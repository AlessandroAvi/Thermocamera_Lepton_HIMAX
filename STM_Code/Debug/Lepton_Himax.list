
Lepton_Himax.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005664  08005664  00015664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00033728  2**0
                  CONTENTS
  4 .ARM          00000008  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005684  08005684  00033728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800568c  0800568c  0001568c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .upper.rodata 000136b8  20000070  08005700  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000180  20013728  08018db8  00033728  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200138a8  08018db8  000338a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00033728  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017136  00000000  00000000  00033758  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000294f  00000000  00000000  0004a88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010c8  00000000  00000000  0004d1e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000fe0  00000000  00000000  0004e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a3e7  00000000  00000000  0004f288  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000d637  00000000  00000000  0006966f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000949dd  00000000  00000000  00076ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0010b683  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047f0  00000000  00000000  0010b700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20013728 	.word	0x20013728
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800564c 	.word	0x0800564c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2001372c 	.word	0x2001372c
 80001d0:	0800564c 	.word	0x0800564c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_Z6millisv>:
bool agc8Enabled;
LEP_SYS_TELEMETRY_LOCATION telemetryLocation;

uint16_t startUpTime = HAL_GetTick();

unsigned long millis(){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0

	uint16_t currentTime = HAL_GetTick();
 80004da:	f002 fb2d 	bl	8002b38 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	80fb      	strh	r3, [r7, #6]
	return currentTime-startUpTime-1;
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	4a03      	ldr	r2, [pc, #12]	; (80004f4 <_Z6millisv+0x20>)
 80004e6:	8812      	ldrh	r2, [r2, #0]
 80004e8:	1a9b      	subs	r3, r3, r2
 80004ea:	3b01      	subs	r3, #1
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20013746 	.word	0x20013746

080004f8 <_Z9constrainiii>:

int constrain(int x, int a, int b){
 80004f8:	b480      	push	{r7}
 80004fa:	b085      	sub	sp, #20
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
	if(a<b){
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	429a      	cmp	r2, r3
 800050a:	da15      	bge.n	8000538 <_Z9constrainiii+0x40>
		if(x>a && x<b){
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	429a      	cmp	r2, r3
 8000512:	dd05      	ble.n	8000520 <_Z9constrainiii+0x28>
 8000514:	68fa      	ldr	r2, [r7, #12]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	da01      	bge.n	8000520 <_Z9constrainiii+0x28>
			return x;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	e021      	b.n	8000564 <_Z9constrainiii+0x6c>
		} else if (x<=a){
 8000520:	68fa      	ldr	r2, [r7, #12]
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	429a      	cmp	r2, r3
 8000526:	dc01      	bgt.n	800052c <_Z9constrainiii+0x34>
			return a;
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	e01b      	b.n	8000564 <_Z9constrainiii+0x6c>
		} else if(x>=b){
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	db17      	blt.n	8000564 <_Z9constrainiii+0x6c>
			return b;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	e015      	b.n	8000564 <_Z9constrainiii+0x6c>
		}
	}else{
		if(x>b && x<a){
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	dd05      	ble.n	800054c <_Z9constrainiii+0x54>
 8000540:	68fa      	ldr	r2, [r7, #12]
 8000542:	68bb      	ldr	r3, [r7, #8]
 8000544:	429a      	cmp	r2, r3
 8000546:	da01      	bge.n	800054c <_Z9constrainiii+0x54>
			return x;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	e00b      	b.n	8000564 <_Z9constrainiii+0x6c>
		} else if (x>=a){
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	429a      	cmp	r2, r3
 8000552:	db01      	blt.n	8000558 <_Z9constrainiii+0x60>
			return a;
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	e005      	b.n	8000564 <_Z9constrainiii+0x6c>
		} else if(x<=b){
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	429a      	cmp	r2, r3
 800055e:	dc01      	bgt.n	8000564 <_Z9constrainiii+0x6c>
			return b;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	e7ff      	b.n	8000564 <_Z9constrainiii+0x6c>
		}
	}
}
 8000564:	4618      	mov	r0, r3
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <_ZL12roundUpVal16i>:

int LEPFLIR_SPI_FRAME_PACKET_SIZE = 0;
int LEPFLIR_SPI_FRAME_PACKET_SIZE16 = 0;

#ifndef LEPFLIR_DISABLE_ALIGNED_MALLOC
static inline int roundUpVal16(int val) { return ((val + 15) & -16); }
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	330f      	adds	r3, #15
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	4618      	mov	r0, r3
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <_ZL12roundUpPtr16Ph>:
static inline byte *roundUpPtr16(byte *ptr) { return ptr ? (byte *)(((uintptr_t)ptr + 15) & -16) : NULL; }
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d004      	beq.n	80005a4 <_ZL12roundUpPtr16Ph+0x18>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	330f      	adds	r3, #15
 800059e:	f023 030f 	bic.w	r3, r3, #15
 80005a2:	e000      	b.n	80005a6 <_ZL12roundUpPtr16Ph+0x1a>
 80005a4:	2300      	movs	r3, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr

080005b2 <_ZL15roundUpMalloc16i>:
static inline byte *roundUpMalloc16(int size) { return (byte *)malloc((size_t)(size + 15)); }
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	330f      	adds	r3, #15
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 ff66 	bl	8005490 <malloc>
 80005c4:	4603      	mov	r3, r0
 80005c6:	4618      	mov	r0, r3
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}

080005ce <_ZL17roundUpSpiFrame16Ph>:
static inline byte *roundUpSpiFrame16(byte *spiFrame) { return spiFrame ? roundUpPtr16(spiFrame) + 16 - 4 : NULL; }
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d005      	beq.n	80005e8 <_ZL17roundUpSpiFrame16Ph+0x1a>
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffd5 	bl	800058c <_ZL12roundUpPtr16Ph>
 80005e2:	4603      	mov	r3, r0
 80005e4:	330c      	adds	r3, #12
 80005e6:	e000      	b.n	80005ea <_ZL17roundUpSpiFrame16Ph+0x1c>
 80005e8:	2300      	movs	r3, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_ZN10LeptonFLiRC1Ev>:
static inline byte *roundUpSpiFrame16(byte *spiFrame) { return spiFrame; }
#endif



LeptonFLiR::LeptonFLiR() {
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
    _storageMode = LeptonFLiR_ImageStorageMode_Count;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2208      	movs	r2, #8
 80005fe:	701a      	strb	r2, [r3, #0]
    _imageData = _spiFrameData = _telemetryData = NULL;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	68da      	ldr	r2, [r3, #12]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	689a      	ldr	r2, [r3, #8]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	605a      	str	r2, [r3, #4]
    _isReadingNextFrame = false;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2200      	movs	r2, #0
 800061a:	741a      	strb	r2, [r3, #16]
    _lastI2CError = _lastLepResult = 0;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	749a      	strb	r2, [r3, #18]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	7c9a      	ldrb	r2, [r3, #18]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	745a      	strb	r2, [r3, #17]
}
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_ZN10LeptonFLiR4initE27LeptonFLiR_ImageStorageMode26LeptonFLiR_TemperatureMode>:
    if (_telemetryData) free(_telemetryData);
}



void LeptonFLiR::init(LeptonFLiR_ImageStorageMode storageMode, LeptonFLiR_TemperatureMode tempMode) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
 8000644:	4613      	mov	r3, r2
 8000646:	70bb      	strb	r3, [r7, #2]
    _storageMode = (LeptonFLiR_ImageStorageMode)constrain((int)storageMode, 0, (int)LeptonFLiR_ImageStorageMode_Count - 1);
 8000648:	78fb      	ldrb	r3, [r7, #3]
 800064a:	2207      	movs	r2, #7
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ff52 	bl	80004f8 <_Z9constrainiii>
 8000654:	4603      	mov	r3, r0
 8000656:	b2da      	uxtb	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	701a      	strb	r2, [r3, #0]
    _tempMode    = (LeptonFLiR_TemperatureMode)constrain((int)tempMode, 0, (int)LeptonFLiR_TemperatureMode_Count - 1);
 800065c:	78bb      	ldrb	r3, [r7, #2]
 800065e:	2202      	movs	r2, #2
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff48 	bl	80004f8 <_Z9constrainiii>
 8000668:	4603      	mov	r3, r0
 800066a:	b2da      	uxtb	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); 	// Deafult setting for the CS pin (default high = disabled slave)
 8000670:	2201      	movs	r2, #1
 8000672:	2140      	movs	r1, #64	; 0x40
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <_ZN10LeptonFLiR4initE27LeptonFLiR_ImageStorageMode26LeptonFLiR_TemperatureMode+0x74>)
 8000676:	f002 fd21 	bl	80030bc <HAL_GPIO_WritePin>
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
	msg_len = sprintf(msg, "\n\r LeptonFLiR::init,   storageMode: %i,   tempMode: %i", _storageMode, _tempMode);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    _imageData = roundUpMalloc16(getImageTotalBytes());
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f000 f8e0 	bl	8000840 <_ZN10LeptonFLiR18getImageTotalBytesEv>
 8000680:	4603      	mov	r3, r0
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff95 	bl	80005b2 <_ZL15roundUpMalloc16i>
 8000688:	4602      	mov	r2, r0
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	605a      	str	r2, [r3, #4]
    	msg_len = sprintf(msg, "\n\r  LeptonFLiR::init Failure allocating imageData. ");
    	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
    }
#endif

    _spiFrameData = roundUpMalloc16(getSPIFrameTotalBytes());
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f98e 	bl	80009b0 <_ZN10LeptonFLiR21getSPIFrameTotalBytesEv>
 8000694:	4603      	mov	r3, r0
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ff8b 	bl	80005b2 <_ZL15roundUpMalloc16i>
 800069c:	4602      	mov	r2, r0
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	609a      	str	r2, [r3, #8]

	msg_len = sprintf(msg, "\n\n\r  LeptonFLiR::init SPIPortSpeed:  ancora da scommentare");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);

#endif
}
 80006a2:	bf00      	nop
 80006a4:	3708      	adds	r7, #8
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40020400 	.word	0x40020400

080006b0 <_ZN10LeptonFLiR13getImageWidthEv>:
LeptonFLiR_TemperatureMode LeptonFLiR::getTemperatureMode() {
    return _tempMode;
}


int LeptonFLiR::getImageWidth() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    switch (_storageMode) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b07      	cmp	r3, #7
 80006be:	d819      	bhi.n	80006f4 <_ZN10LeptonFLiR13getImageWidthEv+0x44>
 80006c0:	a201      	add	r2, pc, #4	; (adr r2, 80006c8 <_ZN10LeptonFLiR13getImageWidthEv+0x18>)
 80006c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006c6:	bf00      	nop
 80006c8:	080006e9 	.word	0x080006e9
 80006cc:	080006e9 	.word	0x080006e9
 80006d0:	080006ed 	.word	0x080006ed
 80006d4:	080006ed 	.word	0x080006ed
 80006d8:	080006f1 	.word	0x080006f1
 80006dc:	080006f1 	.word	0x080006f1
 80006e0:	080006e9 	.word	0x080006e9
 80006e4:	080006e9 	.word	0x080006e9
		case LeptonFLiR_ImageStorageMode_RGB888:
		case LeptonFLiR_ImageStorageMode_RAW14:
        case LeptonFLiR_ImageStorageMode_80x60_16bpp:
        case LeptonFLiR_ImageStorageMode_80x60_8bpp:
            return 80;
 80006e8:	2350      	movs	r3, #80	; 0x50
 80006ea:	e004      	b.n	80006f6 <_ZN10LeptonFLiR13getImageWidthEv+0x46>
        case LeptonFLiR_ImageStorageMode_40x30_16bpp:
        case LeptonFLiR_ImageStorageMode_40x30_8bpp:
            return 40;
 80006ec:	2328      	movs	r3, #40	; 0x28
 80006ee:	e002      	b.n	80006f6 <_ZN10LeptonFLiR13getImageWidthEv+0x46>
        case LeptonFLiR_ImageStorageMode_20x15_16bpp:
        case LeptonFLiR_ImageStorageMode_20x15_8bpp:
            return 20;
 80006f0:	2314      	movs	r3, #20
 80006f2:	e000      	b.n	80006f6 <_ZN10LeptonFLiR13getImageWidthEv+0x46>
        default:
            return 0;
 80006f4:	2300      	movs	r3, #0
    }
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <_ZN10LeptonFLiR14getImageHeightEv>:

int LeptonFLiR::getImageHeight() {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    switch (_storageMode) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b07      	cmp	r3, #7
 8000712:	d819      	bhi.n	8000748 <_ZN10LeptonFLiR14getImageHeightEv+0x44>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <_ZN10LeptonFLiR14getImageHeightEv+0x18>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	0800073d 	.word	0x0800073d
 8000720:	0800073d 	.word	0x0800073d
 8000724:	08000741 	.word	0x08000741
 8000728:	08000741 	.word	0x08000741
 800072c:	08000745 	.word	0x08000745
 8000730:	08000745 	.word	0x08000745
 8000734:	0800073d 	.word	0x0800073d
 8000738:	0800073d 	.word	0x0800073d
		case LeptonFLiR_ImageStorageMode_RAW14:
		case LeptonFLiR_ImageStorageMode_RGB888:
        case LeptonFLiR_ImageStorageMode_80x60_16bpp:
        case LeptonFLiR_ImageStorageMode_80x60_8bpp:
            return 60;
 800073c:	233c      	movs	r3, #60	; 0x3c
 800073e:	e004      	b.n	800074a <_ZN10LeptonFLiR14getImageHeightEv+0x46>
        case LeptonFLiR_ImageStorageMode_40x30_16bpp:
        case LeptonFLiR_ImageStorageMode_40x30_8bpp:
            return 30;
 8000740:	231e      	movs	r3, #30
 8000742:	e002      	b.n	800074a <_ZN10LeptonFLiR14getImageHeightEv+0x46>
        case LeptonFLiR_ImageStorageMode_20x15_16bpp:
        case LeptonFLiR_ImageStorageMode_20x15_8bpp:
            return 15;
 8000744:	230f      	movs	r3, #15
 8000746:	e000      	b.n	800074a <_ZN10LeptonFLiR14getImageHeightEv+0x46>
        default:
            return 0;
 8000748:	2300      	movs	r3, #0
    }
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop

08000758 <_ZN10LeptonFLiR11getImageBppEv>:

int LeptonFLiR::getImageBpp() {
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
    switch (_storageMode) {
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b07      	cmp	r3, #7
 8000766:	d819      	bhi.n	800079c <_ZN10LeptonFLiR11getImageBppEv+0x44>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <_ZN10LeptonFLiR11getImageBppEv+0x18>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000795 	.word	0x08000795
 8000774:	08000799 	.word	0x08000799
 8000778:	08000795 	.word	0x08000795
 800077c:	08000799 	.word	0x08000799
 8000780:	08000795 	.word	0x08000795
 8000784:	08000799 	.word	0x08000799
 8000788:	08000795 	.word	0x08000795
 800078c:	08000791 	.word	0x08000791
		case LeptonFLiR_ImageStorageMode_RGB888:
			return 3;
 8000790:	2303      	movs	r3, #3
 8000792:	e004      	b.n	800079e <_ZN10LeptonFLiR11getImageBppEv+0x46>
    	case LeptonFLiR_ImageStorageMode_RAW14:
        case LeptonFLiR_ImageStorageMode_80x60_16bpp:
        case LeptonFLiR_ImageStorageMode_40x30_16bpp:
        case LeptonFLiR_ImageStorageMode_20x15_16bpp:
            return 2;
 8000794:	2302      	movs	r3, #2
 8000796:	e002      	b.n	800079e <_ZN10LeptonFLiR11getImageBppEv+0x46>
        case LeptonFLiR_ImageStorageMode_80x60_8bpp:
        case LeptonFLiR_ImageStorageMode_40x30_8bpp:
        case LeptonFLiR_ImageStorageMode_20x15_8bpp:
            return 1;
 8000798:	2301      	movs	r3, #1
 800079a:	e000      	b.n	800079e <_ZN10LeptonFLiR11getImageBppEv+0x46>
        default:
            return 0;
 800079c:	2300      	movs	r3, #0
    }
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop

080007ac <_ZN10LeptonFLiR13getImagePitchEv>:

int LeptonFLiR::getImagePitch() {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
    switch (_storageMode) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	d83b      	bhi.n	8000834 <_ZN10LeptonFLiR13getImagePitchEv+0x88>
 80007bc:	a201      	add	r2, pc, #4	; (adr r2, 80007c4 <_ZN10LeptonFLiR13getImagePitchEv+0x18>)
 80007be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c2:	bf00      	nop
 80007c4:	080007f9 	.word	0x080007f9
 80007c8:	08000803 	.word	0x08000803
 80007cc:	0800080d 	.word	0x0800080d
 80007d0:	08000817 	.word	0x08000817
 80007d4:	08000821 	.word	0x08000821
 80007d8:	0800082b 	.word	0x0800082b
 80007dc:	080007ef 	.word	0x080007ef
 80007e0:	080007e5 	.word	0x080007e5
		case LeptonFLiR_ImageStorageMode_RGB888:
			return roundUpVal16(80 * 3);
 80007e4:	20f0      	movs	r0, #240	; 0xf0
 80007e6:	f7ff fec3 	bl	8000570 <_ZL12roundUpVal16i>
 80007ea:	4603      	mov	r3, r0
 80007ec:	e023      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
		case LeptonFLiR_ImageStorageMode_RAW14:
			return roundUpVal16(80 * 2);
 80007ee:	20a0      	movs	r0, #160	; 0xa0
 80007f0:	f7ff febe 	bl	8000570 <_ZL12roundUpVal16i>
 80007f4:	4603      	mov	r3, r0
 80007f6:	e01e      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        case LeptonFLiR_ImageStorageMode_80x60_16bpp:
            return roundUpVal16(80 * 2);
 80007f8:	20a0      	movs	r0, #160	; 0xa0
 80007fa:	f7ff feb9 	bl	8000570 <_ZL12roundUpVal16i>
 80007fe:	4603      	mov	r3, r0
 8000800:	e019      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        case LeptonFLiR_ImageStorageMode_80x60_8bpp:
            return roundUpVal16(80 * 1);
 8000802:	2050      	movs	r0, #80	; 0x50
 8000804:	f7ff feb4 	bl	8000570 <_ZL12roundUpVal16i>
 8000808:	4603      	mov	r3, r0
 800080a:	e014      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        case LeptonFLiR_ImageStorageMode_40x30_16bpp:
            return roundUpVal16(40 * 2);
 800080c:	2050      	movs	r0, #80	; 0x50
 800080e:	f7ff feaf 	bl	8000570 <_ZL12roundUpVal16i>
 8000812:	4603      	mov	r3, r0
 8000814:	e00f      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        case LeptonFLiR_ImageStorageMode_40x30_8bpp:
            return roundUpVal16(40 * 1);
 8000816:	2028      	movs	r0, #40	; 0x28
 8000818:	f7ff feaa 	bl	8000570 <_ZL12roundUpVal16i>
 800081c:	4603      	mov	r3, r0
 800081e:	e00a      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        case LeptonFLiR_ImageStorageMode_20x15_16bpp:
            return roundUpVal16(20 * 2);
 8000820:	2028      	movs	r0, #40	; 0x28
 8000822:	f7ff fea5 	bl	8000570 <_ZL12roundUpVal16i>
 8000826:	4603      	mov	r3, r0
 8000828:	e005      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        case LeptonFLiR_ImageStorageMode_20x15_8bpp:
            return roundUpVal16(20 * 1);
 800082a:	2014      	movs	r0, #20
 800082c:	f7ff fea0 	bl	8000570 <_ZL12roundUpVal16i>
 8000830:	4603      	mov	r3, r0
 8000832:	e000      	b.n	8000836 <_ZN10LeptonFLiR13getImagePitchEv+0x8a>
        default:
            return 0;
 8000834:	2300      	movs	r3, #0
    }
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop

08000840 <_ZN10LeptonFLiR18getImageTotalBytesEv>:

int LeptonFLiR::getImageTotalBytes() {
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    return ((getImageHeight() - 1) * getImagePitch()) + (getImageWidth() * getImageBpp());
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff5b 	bl	8000704 <_ZN10LeptonFLiR14getImageHeightEv>
 800084e:	4603      	mov	r3, r0
 8000850:	1e5c      	subs	r4, r3, #1
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff ffaa 	bl	80007ac <_ZN10LeptonFLiR13getImagePitchEv>
 8000858:	4603      	mov	r3, r0
 800085a:	fb03 f404 	mul.w	r4, r3, r4
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ff26 	bl	80006b0 <_ZN10LeptonFLiR13getImageWidthEv>
 8000864:	4605      	mov	r5, r0
 8000866:	6878      	ldr	r0, [r7, #4]
 8000868:	f7ff ff76 	bl	8000758 <_ZN10LeptonFLiR11getImageBppEv>
 800086c:	4603      	mov	r3, r0
 800086e:	fb03 f305 	mul.w	r3, r3, r5
 8000872:	4423      	add	r3, r4
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bdb0      	pop	{r4, r5, r7, pc}

0800087c <_ZN10LeptonFLiR16_getImageDataRowEi>:

byte *LeptonFLiR::getImageDataRow(int row) {
    return !_isReadingNextFrame && _imageData ? (roundUpPtr16(_imageData) + (row * getImagePitch())) : NULL;
}

byte *LeptonFLiR::_getImageDataRow(int row) {
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    return _imageData ? roundUpPtr16(_imageData) + (getImagePitch() * row) : NULL;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00e      	beq.n	80008ac <_ZN10LeptonFLiR16_getImageDataRowEi+0x30>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe7a 	bl	800058c <_ZL12roundUpPtr16Ph>
 8000898:	4604      	mov	r4, r0
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff86 	bl	80007ac <_ZN10LeptonFLiR13getImagePitchEv>
 80008a0:	4602      	mov	r2, r0
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	fb03 f302 	mul.w	r3, r3, r2
 80008a8:	4423      	add	r3, r4
 80008aa:	e000      	b.n	80008ae <_ZN10LeptonFLiR16_getImageDataRowEi+0x32>
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd90      	pop	{r4, r7, pc}

080008b6 <_ZN10LeptonFLiR22RGB_getImageDataRowColEii>:
	}

    return  (uint8_t)(pixel);
}

uint8_t LeptonFLiR::RGB_getImageDataRowCol(int row, int col) {
 80008b6:	b590      	push	{r4, r7, lr}
 80008b8:	b087      	sub	sp, #28
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	60f8      	str	r0, [r7, #12]
 80008be:	60b9      	str	r1, [r7, #8]
 80008c0:	607a      	str	r2, [r7, #4]
    if (_isReadingNextFrame || !_imageData) return 0;
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	7c1b      	ldrb	r3, [r3, #16]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d103      	bne.n	80008d2 <_ZN10LeptonFLiR22RGB_getImageDataRowColEii+0x1c>
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d101      	bne.n	80008d6 <_ZN10LeptonFLiR22RGB_getImageDataRowColEii+0x20>
 80008d2:	2300      	movs	r3, #0
 80008d4:	e013      	b.n	80008fe <_ZN10LeptonFLiR22RGB_getImageDataRowColEii+0x48>
    uint8_t *imageData = roundUpPtr16(_imageData) + (row * getImagePitch()) + col;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe56 	bl	800058c <_ZL12roundUpPtr16Ph>
 80008e0:	4604      	mov	r4, r0
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	f7ff ff62 	bl	80007ac <_ZN10LeptonFLiR13getImagePitchEv>
 80008e8:	4602      	mov	r2, r0
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	fb03 f302 	mul.w	r3, r3, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4423      	add	r3, r4
 80008f8:	617b      	str	r3, [r7, #20]
    return  (uint8_t)(*imageData);
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	781b      	ldrb	r3, [r3, #0]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	371c      	adds	r7, #28
 8000902:	46bd      	mov	sp, r7
 8000904:	bd90      	pop	{r4, r7, pc}

08000906 <_ZN10LeptonFLiR22RAW_getImageDataRowColEii>:

uint8_t LeptonFLiR::RAW_getImageDataRowCol(int row, int col) {
 8000906:	b590      	push	{r4, r7, lr}
 8000908:	b087      	sub	sp, #28
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
    if (_isReadingNextFrame || !_imageData) return 0;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	7c1b      	ldrb	r3, [r3, #16]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d103      	bne.n	8000922 <_ZN10LeptonFLiR22RAW_getImageDataRowColEii+0x1c>
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <_ZN10LeptonFLiR22RAW_getImageDataRowColEii+0x20>
 8000922:	2300      	movs	r3, #0
 8000924:	e015      	b.n	8000952 <_ZN10LeptonFLiR22RAW_getImageDataRowColEii+0x4c>
    uint8_t *imageData = roundUpPtr16(_imageData) + (row * getImagePitch()) + (col*2) + 1;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff fe2e 	bl	800058c <_ZL12roundUpPtr16Ph>
 8000930:	4604      	mov	r4, r0
 8000932:	68f8      	ldr	r0, [r7, #12]
 8000934:	f7ff ff3a 	bl	80007ac <_ZN10LeptonFLiR13getImagePitchEv>
 8000938:	4602      	mov	r2, r0
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	fb03 f302 	mul.w	r3, r3, r2
 8000940:	461a      	mov	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	3301      	adds	r3, #1
 800094a:	4423      	add	r3, r4
 800094c:	617b      	str	r3, [r7, #20]
    return  (uint8_t)(*imageData);
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	781b      	ldrb	r3, [r3, #0]
}
 8000952:	4618      	mov	r0, r3
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd90      	pop	{r4, r7, pc}
	...

0800095c <_ZN10LeptonFLiR16getSPIFrameLinesEv>:
        ffcState -= 1;

    return (telemetryData[4] & 0x0004) && ffcState != (uint_fast8_t)TelemetryData_FFCState_InProgress;
}

int LeptonFLiR::getSPIFrameLines() {
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    switch (_storageMode) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b07      	cmp	r3, #7
 800096a:	d819      	bhi.n	80009a0 <_ZN10LeptonFLiR16getSPIFrameLinesEv+0x44>
 800096c:	a201      	add	r2, pc, #4	; (adr r2, 8000974 <_ZN10LeptonFLiR16getSPIFrameLinesEv+0x18>)
 800096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000972:	bf00      	nop
 8000974:	08000995 	.word	0x08000995
 8000978:	08000995 	.word	0x08000995
 800097c:	08000999 	.word	0x08000999
 8000980:	08000999 	.word	0x08000999
 8000984:	0800099d 	.word	0x0800099d
 8000988:	0800099d 	.word	0x0800099d
 800098c:	08000995 	.word	0x08000995
 8000990:	08000995 	.word	0x08000995
		case LeptonFLiR_ImageStorageMode_RGB888:
    	case LeptonFLiR_ImageStorageMode_RAW14:
        case LeptonFLiR_ImageStorageMode_80x60_16bpp:
        case LeptonFLiR_ImageStorageMode_80x60_8bpp:
            return 1;
 8000994:	2301      	movs	r3, #1
 8000996:	e004      	b.n	80009a2 <_ZN10LeptonFLiR16getSPIFrameLinesEv+0x46>
        case LeptonFLiR_ImageStorageMode_40x30_16bpp:
        case LeptonFLiR_ImageStorageMode_40x30_8bpp:
            return 2;
 8000998:	2302      	movs	r3, #2
 800099a:	e002      	b.n	80009a2 <_ZN10LeptonFLiR16getSPIFrameLinesEv+0x46>
        case LeptonFLiR_ImageStorageMode_20x15_16bpp:
        case LeptonFLiR_ImageStorageMode_20x15_8bpp:
            return 4;
 800099c:	2304      	movs	r3, #4
 800099e:	e000      	b.n	80009a2 <_ZN10LeptonFLiR16getSPIFrameLinesEv+0x46>
        default:
            return 0;
 80009a0:	2300      	movs	r3, #0
    }
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <_ZN10LeptonFLiR21getSPIFrameTotalBytesEv>:

int LeptonFLiR::getSPIFrameTotalBytes() {
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    return getSPIFrameLines() * roundUpVal16(LEPFLIR_SPI_FRAME_PACKET_SIZE);
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ffcf 	bl	800095c <_ZN10LeptonFLiR16getSPIFrameLinesEv>
 80009be:	4604      	mov	r4, r0
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <_ZN10LeptonFLiR21getSPIFrameTotalBytesEv+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fdd3 	bl	8000570 <_ZL12roundUpVal16i>
 80009ca:	4603      	mov	r3, r0
 80009cc:	fb03 f304 	mul.w	r3, r3, r4
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	20013748 	.word	0x20013748

080009dc <_ZN10LeptonFLiR18getSPIFrameDataRowEi>:

uint16_t *LeptonFLiR::getSPIFrameDataRow(int row) {
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
    return (uint16_t *)(roundUpSpiFrame16(_spiFrameData) + (row * roundUpVal16(LEPFLIR_SPI_FRAME_PACKET_SIZE)));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fdef 	bl	80005ce <_ZL17roundUpSpiFrame16Ph>
 80009f0:	4604      	mov	r4, r0
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <_ZN10LeptonFLiR18getSPIFrameDataRowEi+0x34>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdba 	bl	8000570 <_ZL12roundUpVal16i>
 80009fc:	4602      	mov	r2, r0
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	fb03 f302 	mul.w	r3, r3, r2
 8000a04:	4423      	add	r3, r4
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd90      	pop	{r4, r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20013748 	.word	0x20013748

08000a14 <_ZL12SPI_TransferPti>:
}


// SPI_Transfer uses bare metal command in contrast to HAL function because the
// HAL methods spent too much time for the transmission and risk to lose half of the packet
__attribute__((optimize("-Ofast"))) static void SPI_Transfer(uint16_t *buffer, int count) {
 8000a14:	b570      	push	{r4, r5, r6, lr}

	uint8_t tx_buf[1] = {0};
	uint16_t rx_val;
	uint16_t j = 0;

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); 	// Enable CS
 8000a16:	2200      	movs	r2, #0
__attribute__((optimize("-Ofast"))) static void SPI_Transfer(uint16_t *buffer, int count) {
 8000a18:	460d      	mov	r5, r1
 8000a1a:	4604      	mov	r4, r0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); 	// Enable CS
 8000a1c:	2140      	movs	r1, #64	; 0x40
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <_ZL12SPI_TransferPti+0x58>)
 8000a20:	f002 fb4c 	bl	80030bc <HAL_GPIO_WritePin>

	// cycle over the entire length of a packet (1 line of the frame)
	while(j < count) {
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	dd1a      	ble.n	8000a5e <_ZL12SPI_TransferPti+0x4a>
	uint16_t j = 0;
 8000a28:	2100      	movs	r1, #0

		// SPI transmit (useless, MOSI can be grounded)
		while (((SPI1->SR)&(SPI_FLAG_TXE)) == 0);
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_ZL12SPI_TransferPti+0x5c>)
		SPI1->DR = *tx_buf;
 8000a2c:	460e      	mov	r6, r1
		while (((SPI1->SR)&(SPI_FLAG_TXE)) == 0);
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	0790      	lsls	r0, r2, #30
 8000a32:	d5fc      	bpl.n	8000a2e <_ZL12SPI_TransferPti+0x1a>
		SPI1->DR = *tx_buf;
 8000a34:	60de      	str	r6, [r3, #12]

		// SPI receive
		while((SPI1->SR & SPI_FLAG_RXNE)==0){ }
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	07d2      	lsls	r2, r2, #31
 8000a3a:	d5fc      	bpl.n	8000a36 <_ZL12SPI_TransferPti+0x22>
		rx_val = SPI1->DR;
 8000a3c:	68da      	ldr	r2, [r3, #12]

		// because of mempcy (used later to save frame in allocated space) I need to flip high and low byte
		// do not change the order of the first 4 bytes (contain ID and RC)
		if(j>=2){
 8000a3e:	2901      	cmp	r1, #1
			*buffer++ = (uint8_t)rx_val << 8 | (uint8_t)(rx_val >>8);
		} else {
			*buffer++ = rx_val;
		}

		j+=1;
 8000a40:	f101 0101 	add.w	r1, r1, #1
			*buffer++ = (uint8_t)rx_val << 8 | (uint8_t)(rx_val >>8);
 8000a44:	bf88      	it	hi
 8000a46:	f3c2 2007 	ubfxhi	r0, r2, #8, #8
 8000a4a:	f104 0402 	add.w	r4, r4, #2
		j+=1;
 8000a4e:	b289      	uxth	r1, r1
			*buffer++ = (uint8_t)rx_val << 8 | (uint8_t)(rx_val >>8);
 8000a50:	bf88      	it	hi
 8000a52:	ea40 2202 	orrhi.w	r2, r0, r2, lsl #8
	while(j < count) {
 8000a56:	42a9      	cmp	r1, r5
		rx_val = SPI1->DR;
 8000a58:	f824 2c02 	strh.w	r2, [r4, #-2]
	while(j < count) {
 8000a5c:	dbe7      	blt.n	8000a2e <_ZL12SPI_TransferPti+0x1a>
	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  	// Disable CS
 8000a5e:	2201      	movs	r2, #1
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	4802      	ldr	r0, [pc, #8]	; (8000a6c <_ZL12SPI_TransferPti+0x58>)

}
 8000a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  	// Disable CS
 8000a68:	f002 bb28 	b.w	80030bc <HAL_GPIO_WritePin>
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40013000 	.word	0x40013000

08000a74 <_ZN10LeptonFLiR12readInitDataEv>:



bool LeptonFLiR::readInitData() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b086      	sub	sp, #24
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

#ifdef ELAPSED_TIME_OUTPUT
    uint16_t timStart1 = HAL_GetTick();
#endif

	bool telemetryEnabled, cameraBooted, stateErrors = false;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75fb      	strb	r3, [r7, #23]
	uint32_t value = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]

	// legge AGC state
	receiveCommand(cmdCode(LEP_CID_AGC_ENABLE_STATE, LEP_I2C_COMMAND_TYPE_GET), &value);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 fcca 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4619      	mov	r1, r3
 8000a94:	f107 0310 	add.w	r3, r7, #16
 8000a98:	461a      	mov	r2, r3
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f000 fd6b 	bl	8001576 <_ZN10LeptonFLiR14receiveCommandEtPm>
	agc8Enabled = value;
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf14      	ite	ne
 8000aa6:	2301      	movne	r3, #1
 8000aa8:	2300      	moveq	r3, #0
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b80      	ldr	r3, [pc, #512]	; (8000cb0 <_ZN10LeptonFLiR12readInitDataEv+0x23c>)
 8000aae:	701a      	strb	r2, [r3, #0]
	stateErrors = stateErrors || _lastI2CError || _lastLepResult;
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d107      	bne.n	8000ac6 <_ZN10LeptonFLiR12readInitDataEv+0x52>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	7c5b      	ldrb	r3, [r3, #17]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d103      	bne.n	8000ac6 <_ZN10LeptonFLiR12readInitDataEv+0x52>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	7c9b      	ldrb	r3, [r3, #18]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <_ZN10LeptonFLiR12readInitDataEv+0x56>
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e000      	b.n	8000acc <_ZN10LeptonFLiR12readInitDataEv+0x58>
 8000aca:	2300      	movs	r3, #0
 8000acc:	75fb      	strb	r3, [r7, #23]

	if (agc8Enabled) {
 8000ace:	4b78      	ldr	r3, [pc, #480]	; (8000cb0 <_ZN10LeptonFLiR12readInitDataEv+0x23c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d024      	beq.n	8000b20 <_ZN10LeptonFLiR12readInitDataEv+0xac>
		receiveCommand(cmdCode(LEP_CID_AGC_HEQ_SCALE_FACTOR, LEP_I2C_COMMAND_TYPE_GET), &value);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 fca1 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f107 0310 	add.w	r3, r7, #16
 8000aea:	461a      	mov	r2, r3
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f000 fd42 	bl	8001576 <_ZN10LeptonFLiR14receiveCommandEtPm>
		agc8Enabled = (value == (uint32_t)LEP_AGC_SCALE_TO_8_BITS);
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf0c      	ite	eq
 8000af8:	2301      	moveq	r3, #1
 8000afa:	2300      	movne	r3, #0
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b6c      	ldr	r3, [pc, #432]	; (8000cb0 <_ZN10LeptonFLiR12readInitDataEv+0x23c>)
 8000b00:	701a      	strb	r2, [r3, #0]
		stateErrors = stateErrors || _lastI2CError || _lastLepResult;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d107      	bne.n	8000b18 <_ZN10LeptonFLiR12readInitDataEv+0xa4>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7c5b      	ldrb	r3, [r3, #17]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d103      	bne.n	8000b18 <_ZN10LeptonFLiR12readInitDataEv+0xa4>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	7c9b      	ldrb	r3, [r3, #18]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <_ZN10LeptonFLiR12readInitDataEv+0xa8>
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e000      	b.n	8000b1e <_ZN10LeptonFLiR12readInitDataEv+0xaa>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	75fb      	strb	r3, [r7, #23]
	}

	// legge Telemetry state
	receiveCommand(cmdCode(LEP_CID_SYS_TELEMETRY_ENABLE_STATE, LEP_I2C_COMMAND_TYPE_GET), &value);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 7106 	mov.w	r1, #536	; 0x218
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 fc7c 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	461a      	mov	r2, r3
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 fd1d 	bl	8001576 <_ZN10LeptonFLiR14receiveCommandEtPm>
	telemetryEnabled = value;
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	bf14      	ite	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	2300      	moveq	r3, #0
 8000b46:	75bb      	strb	r3, [r7, #22]
	stateErrors = stateErrors || _lastI2CError || _lastLepResult;
 8000b48:	7dfb      	ldrb	r3, [r7, #23]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d107      	bne.n	8000b5e <_ZN10LeptonFLiR12readInitDataEv+0xea>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7c5b      	ldrb	r3, [r3, #17]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d103      	bne.n	8000b5e <_ZN10LeptonFLiR12readInitDataEv+0xea>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7c9b      	ldrb	r3, [r3, #18]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <_ZN10LeptonFLiR12readInitDataEv+0xee>
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e000      	b.n	8000b64 <_ZN10LeptonFLiR12readInitDataEv+0xf0>
 8000b62:	2300      	movs	r3, #0
 8000b64:	75fb      	strb	r3, [r7, #23]

	if (telemetryEnabled) {
 8000b66:	7dbb      	ldrb	r3, [r7, #22]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d020      	beq.n	8000bae <_ZN10LeptonFLiR12readInitDataEv+0x13a>
		receiveCommand(cmdCode(LEP_CID_SYS_TELEMETRY_LOCATION, LEP_I2C_COMMAND_TYPE_GET), &value);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f000 fc56 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	461a      	mov	r2, r3
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f000 fcf7 	bl	8001576 <_ZN10LeptonFLiR14receiveCommandEtPm>
		telemetryLocation = (LEP_SYS_TELEMETRY_LOCATION)value;
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b49      	ldr	r3, [pc, #292]	; (8000cb4 <_ZN10LeptonFLiR12readInitDataEv+0x240>)
 8000b8e:	701a      	strb	r2, [r3, #0]
		stateErrors = stateErrors || _lastI2CError || _lastLepResult;
 8000b90:	7dfb      	ldrb	r3, [r7, #23]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d107      	bne.n	8000ba6 <_ZN10LeptonFLiR12readInitDataEv+0x132>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7c5b      	ldrb	r3, [r3, #17]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d103      	bne.n	8000ba6 <_ZN10LeptonFLiR12readInitDataEv+0x132>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7c9b      	ldrb	r3, [r3, #18]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <_ZN10LeptonFLiR12readInitDataEv+0x136>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <_ZN10LeptonFLiR12readInitDataEv+0x138>
 8000baa:	2300      	movs	r3, #0
 8000bac:	75fb      	strb	r3, [r7, #23]
	}

	uint16_t status; readRegister(LEP_I2C_STATUS_REG, &status);
 8000bae:	f107 030e 	add.w	r3, r7, #14
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f000 ff0e 	bl	80019d8 <_ZN10LeptonFLiR12readRegisterEtPt>
	#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
	checkForErrors();
	#endif

	// Check for errors
	cameraBooted = (status & LEP_I2C_STATUS_BOOT_MODE_BIT_MASK) && (status & LEP_I2C_STATUS_BOOT_STATUS_BIT_MASK);
 8000bbc:	89fb      	ldrh	r3, [r7, #14]
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d006      	beq.n	8000bd4 <_ZN10LeptonFLiR12readInitDataEv+0x160>
 8000bc6:	89fb      	ldrh	r3, [r7, #14]
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <_ZN10LeptonFLiR12readInitDataEv+0x160>
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <_ZN10LeptonFLiR12readInitDataEv+0x162>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	757b      	strb	r3, [r7, #21]
	stateErrors = stateErrors || _lastI2CError || _lastLepResult;
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d107      	bne.n	8000bee <_ZN10LeptonFLiR12readInitDataEv+0x17a>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7c5b      	ldrb	r3, [r3, #17]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d103      	bne.n	8000bee <_ZN10LeptonFLiR12readInitDataEv+0x17a>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	7c9b      	ldrb	r3, [r3, #18]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <_ZN10LeptonFLiR12readInitDataEv+0x17e>
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e000      	b.n	8000bf4 <_ZN10LeptonFLiR12readInitDataEv+0x180>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	75fb      	strb	r3, [r7, #23]

	if (stateErrors) {
 8000bf6:	7dfb      	ldrb	r3, [r7, #23]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d004      	beq.n	8000c06 <_ZN10LeptonFLiR12readInitDataEv+0x192>
	#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
		msg_len = sprintf(msg, "\n\r  LeptonFLiR::readNextFrame Errors reading state encountered. Aborting.");
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
	#endif
		_isReadingNextFrame = false;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	741a      	strb	r2, [r3, #16]
		return false;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e050      	b.n	8000ca8 <_ZN10LeptonFLiR12readInitDataEv+0x234>
	}

	if (!cameraBooted) {
 8000c06:	7d7b      	ldrb	r3, [r7, #21]
 8000c08:	f083 0301 	eor.w	r3, r3, #1
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <_ZN10LeptonFLiR12readInitDataEv+0x1a8>
	#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
		msg_len = sprintf(msg, "\n\r  LeptonFLiR::readNextFrame Camera has not yet booted. Aborting.");
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
	#endif
		_isReadingNextFrame = false;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	741a      	strb	r2, [r3, #16]
		return false;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e045      	b.n	8000ca8 <_ZN10LeptonFLiR12readInitDataEv+0x234>
	}

	// alloca o libera memoria per la telemetry data
	if (telemetryEnabled && !_telemetryData) {
 8000c1c:	7dbb      	ldrb	r3, [r7, #22]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d01a      	beq.n	8000c58 <_ZN10LeptonFLiR12readInitDataEv+0x1e4>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d116      	bne.n	8000c58 <_ZN10LeptonFLiR12readInitDataEv+0x1e4>
		_telemetryData = (byte *)malloc(LEPFLIR_SPI_FRAME_PACKET_SIZE);
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <_ZN10LeptonFLiR12readInitDataEv+0x244>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fc2e 	bl	8005490 <malloc>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	60da      	str	r2, [r3, #12]

		if (_telemetryData){
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01b      	beq.n	8000c7c <_ZN10LeptonFLiR12readInitDataEv+0x208>
			_telemetryData[0] = _telemetryData[1] = 0xFF; // initialize as discard packet
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	22ff      	movs	r2, #255	; 0xff
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68d2      	ldr	r2, [r2, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	7013      	strb	r3, [r2, #0]
		if (_telemetryData){
 8000c56:	e011      	b.n	8000c7c <_ZN10LeptonFLiR12readInitDataEv+0x208>
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
		}

	#endif
	}
	else if (!telemetryEnabled && _telemetryData) {
 8000c58:	7dbb      	ldrb	r3, [r7, #22]
 8000c5a:	f083 0301 	eor.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00b      	beq.n	8000c7c <_ZN10LeptonFLiR12readInitDataEv+0x208>
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d007      	beq.n	8000c7c <_ZN10LeptonFLiR12readInitDataEv+0x208>
		free(_telemetryData);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f004 fc15 	bl	80054a0 <free>
		_telemetryData = NULL;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
			HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
		}
	#endif


		LEP_OEM_VIDEO_OUTPUT_FORMAT video_out_mode = oem_getVideoMode();
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 faf8 	bl	8001272 <_ZN10LeptonFLiR16oem_getVideoModeEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	753b      	strb	r3, [r7, #20]

		if(video_out_mode == LEP_VIDEO_OUTPUT_FORMAT_RGB888){
 8000c86:	7d3b      	ldrb	r3, [r7, #20]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d106      	bne.n	8000c9a <_ZN10LeptonFLiR12readInitDataEv+0x226>
			LEPFLIR_SPI_FRAME_PACKET_SIZE = LEPFLIR_SPI_FRAME_PACKET_SIZE_RGB888;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <_ZN10LeptonFLiR12readInitDataEv+0x244>)
 8000c8e:	22f4      	movs	r2, #244	; 0xf4
 8000c90:	601a      	str	r2, [r3, #0]
			LEPFLIR_SPI_FRAME_PACKET_SIZE16 = LEPFLIR_SPI_FRAME_PACKET_SIZE16_RGB888;
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <_ZN10LeptonFLiR12readInitDataEv+0x248>)
 8000c94:	227a      	movs	r2, #122	; 0x7a
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	e005      	b.n	8000ca6 <_ZN10LeptonFLiR12readInitDataEv+0x232>
		}else {
			LEPFLIR_SPI_FRAME_PACKET_SIZE = LEPFLIR_SPI_FRAME_PACKET_SIZE_RAW14;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <_ZN10LeptonFLiR12readInitDataEv+0x244>)
 8000c9c:	22a4      	movs	r2, #164	; 0xa4
 8000c9e:	601a      	str	r2, [r3, #0]
			LEPFLIR_SPI_FRAME_PACKET_SIZE16 = LEPFLIR_SPI_FRAME_PACKET_SIZE16_RAW14;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <_ZN10LeptonFLiR12readInitDataEv+0x248>)
 8000ca2:	2252      	movs	r2, #82	; 0x52
 8000ca4:	601a      	str	r2, [r3, #0]
		}

		return true;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3718      	adds	r7, #24
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20013744 	.word	0x20013744
 8000cb4:	20013745 	.word	0x20013745
 8000cb8:	20013748 	.word	0x20013748
 8000cbc:	2001374c 	.word	0x2001374c

08000cc0 <_ZN10LeptonFLiR13readNextFrameEv>:



#define LEPFLIR_ENABLE_FRAME_PACKET_DEBUG_OUTPUT    1

bool LeptonFLiR::readNextFrame() {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b091      	sub	sp, #68	; 0x44
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    if (!_isReadingNextFrame) {
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	7c1b      	ldrb	r3, [r3, #16]
 8000ccc:	f083 0301 	eor.w	r3, r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f000 8160 	beq.w	8000f98 <_ZN10LeptonFLiR13readNextFrameEv+0x2d8>
        _isReadingNextFrame = true;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	741a      	strb	r2, [r3, #16]


        uint16_t *spiFrame = NULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint_fast8_t imgRows = getImageHeight();
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fd0e 	bl	8000704 <_ZN10LeptonFLiR14getImageHeightEv>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	61bb      	str	r3, [r7, #24]
        uint_fast8_t currImgRow = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
        uint_fast8_t spiRows = getSPIFrameLines();
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff fe33 	bl	800095c <_ZN10LeptonFLiR16getSPIFrameLinesEv>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	617b      	str	r3, [r7, #20]
        uint_fast8_t currSpiRow = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	637b      	str	r3, [r7, #52]	; 0x34
        uint_fast8_t teleRows = (_telemetryData ? 3 : 0);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <_ZN10LeptonFLiR13readNextFrameEv+0x4a>
 8000d06:	2303      	movs	r3, #3
 8000d08:	e000      	b.n	8000d0c <_ZN10LeptonFLiR13readNextFrameEv+0x4c>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
        uint_fast8_t currTeleRow = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	633b      	str	r3, [r7, #48]	; 0x30
        uint_fast8_t currReadRow = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint_fast8_t framesSkipped = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
        uint_fast8_t currRow = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
        bool skipFrame = false;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        bool spiPacketRead = false;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		__HAL_SPI_ENABLE(&hspi1);	// initialize the SPI peripheral (necessary because of how the SPI routine is written)
 8000d2a:	4b9e      	ldr	r3, [pc, #632]	; (8000fa4 <_ZN10LeptonFLiR13readNextFrameEv+0x2e4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b9c      	ldr	r3, [pc, #624]	; (8000fa4 <_ZN10LeptonFLiR13readNextFrameEv+0x2e4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d38:	601a      	str	r2, [r3, #0]

		// cycle over the 60 lines and the 4 segments (segments only if telemetry is enabled)
		while (currImgRow < imgRows || currTeleRow < teleRows) {
 8000d3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d304      	bcc.n	8000d4c <_ZN10LeptonFLiR13readNextFrameEv+0x8c>
 8000d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	429a      	cmp	r2, r3
 8000d48:	f080 8123 	bcs.w	8000f92 <_ZN10LeptonFLiR13readNextFrameEv+0x2d2>

			// if packet has already been saved skip (because it was in discard routine, and a image packet was found)
			if (!spiPacketRead) {
 8000d4c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000d50:	f083 0301 	eor.w	r3, r3, #1
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d01b      	beq.n	8000d92 <_ZN10LeptonFLiR13readNextFrameEv+0xd2>
				spiFrame = getSPIFrameDataRow(currSpiRow);
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fe3c 	bl	80009dc <_ZN10LeptonFLiR18getSPIFrameDataRowEi>
 8000d64:	63f8      	str	r0, [r7, #60]	; 0x3c

				SPI_Transfer(spiFrame, LEPFLIR_SPI_FRAME_PACKET_SIZE16);  	// read 1 packet/line of the frame
 8000d66:	4b90      	ldr	r3, [pc, #576]	; (8000fa8 <_ZN10LeptonFLiR13readNextFrameEv+0x2e8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d6e:	f7ff fe51 	bl	8000a14 <_ZL12SPI_TransferPti>

				skipFrame = ((spiFrame[0] & 0x0F00) == 0x0F00);             // read in ID of the packet if it's discard
 8000d72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000d7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8000d7e:	bf0c      	ite	eq
 8000d80:	2301      	moveq	r3, #1
 8000d82:	2300      	movne	r3, #0
 8000d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				currRow = spiFrame[0] & 0x00FF;                             // number of the packet, from 0 to 60
 8000d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d90:	e002      	b.n	8000d98 <_ZN10LeptonFLiR13readNextFrameEv+0xd8>
			}
			else{
				spiPacketRead = false;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			}
			// cathegorize the packet depending on what ID says
			// IMAGE PACKET
			if (!skipFrame && currRow == currReadRow && (
 8000d98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d9c:	f083 0301 	eor.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d01c      	beq.n	8000de0 <_ZN10LeptonFLiR13readNextFrameEv+0x120>
 8000da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d118      	bne.n	8000de0 <_ZN10LeptonFLiR13readNextFrameEv+0x120>
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d003      	beq.n	8000dbc <_ZN10LeptonFLiR13readNextFrameEv+0xfc>
				((!teleRows || telemetryLocation == LEP_TELEMETRY_LOCATION_FOOTER) && currRow < 60) ||
 8000db4:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <_ZN10LeptonFLiR13readNextFrameEv+0x2ec>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d102      	bne.n	8000dc2 <_ZN10LeptonFLiR13readNextFrameEv+0x102>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dbe:	2b3b      	cmp	r3, #59	; 0x3b
 8000dc0:	d907      	bls.n	8000dd2 <_ZN10LeptonFLiR13readNextFrameEv+0x112>
				(telemetryLocation == LEP_TELEMETRY_LOCATION_HEADER && currReadRow >= teleRows))) {
 8000dc2:	4b7a      	ldr	r3, [pc, #488]	; (8000fac <_ZN10LeptonFLiR13readNextFrameEv+0x2ec>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
				((!teleRows || telemetryLocation == LEP_TELEMETRY_LOCATION_FOOTER) && currRow < 60) ||
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10a      	bne.n	8000de0 <_ZN10LeptonFLiR13readNextFrameEv+0x120>
				(telemetryLocation == LEP_TELEMETRY_LOCATION_HEADER && currReadRow >= teleRows))) {
 8000dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d306      	bcc.n	8000de0 <_ZN10LeptonFLiR13readNextFrameEv+0x120>

				++currReadRow; ++currSpiRow;
 8000dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dda:	3301      	adds	r3, #1
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
 8000dde:	e0b2      	b.n	8000f46 <_ZN10LeptonFLiR13readNextFrameEv+0x286>
			}
			// TELEMETRY PACKET
			else if (!skipFrame && currRow == currReadRow && teleRows &&
 8000de0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d027      	beq.n	8000e3e <_ZN10LeptonFLiR13readNextFrameEv+0x17e>
 8000dee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d123      	bne.n	8000e3e <_ZN10LeptonFLiR13readNextFrameEv+0x17e>
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d020      	beq.n	8000e3e <_ZN10LeptonFLiR13readNextFrameEv+0x17e>
				((telemetryLocation == LEP_TELEMETRY_LOCATION_HEADER && currReadRow < teleRows) ||
 8000dfc:	4b6b      	ldr	r3, [pc, #428]	; (8000fac <_ZN10LeptonFLiR13readNextFrameEv+0x2ec>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
			else if (!skipFrame && currRow == currReadRow && teleRows &&
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d103      	bne.n	8000e0c <_ZN10LeptonFLiR13readNextFrameEv+0x14c>
				((telemetryLocation == LEP_TELEMETRY_LOCATION_HEADER && currReadRow < teleRows) ||
 8000e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d306      	bcc.n	8000e1a <_ZN10LeptonFLiR13readNextFrameEv+0x15a>
				 (telemetryLocation == LEP_TELEMETRY_LOCATION_FOOTER && currReadRow >= 60))) {
 8000e0c:	4b67      	ldr	r3, [pc, #412]	; (8000fac <_ZN10LeptonFLiR13readNextFrameEv+0x2ec>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
				((telemetryLocation == LEP_TELEMETRY_LOCATION_HEADER && currReadRow < teleRows) ||
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d114      	bne.n	8000e3e <_ZN10LeptonFLiR13readNextFrameEv+0x17e>
				 (telemetryLocation == LEP_TELEMETRY_LOCATION_FOOTER && currReadRow >= 60))) {
 8000e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e16:	2b3b      	cmp	r3, #59	; 0x3b
 8000e18:	d911      	bls.n	8000e3e <_ZN10LeptonFLiR13readNextFrameEv+0x17e>

				// if packet is a telemetry save the encoded configuration
				if (currTeleRow == 0){
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d107      	bne.n	8000e30 <_ZN10LeptonFLiR13readNextFrameEv+0x170>
					memcpy(_telemetryData, spiFrame, LEPFLIR_SPI_FRAME_PACKET_SIZE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	68d8      	ldr	r0, [r3, #12]
 8000e24:	4b62      	ldr	r3, [pc, #392]	; (8000fb0 <_ZN10LeptonFLiR13readNextFrameEv+0x2f0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000e2c:	f004 fb40 	bl	80054b0 <memcpy>
				}

				++currReadRow; ++currTeleRow;
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	3301      	adds	r3, #1
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e38:	3301      	adds	r3, #1
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e3c:	e083      	b.n	8000f46 <_ZN10LeptonFLiR13readNextFrameEv+0x286>
			}
			// IGNORE PACKET
			else if (!skipFrame && currRow < currReadRow) {
 8000e3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e42:	f083 0301 	eor.w	r3, r3, #1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <_ZN10LeptonFLiR13readNextFrameEv+0x194>
 8000e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d378      	bcc.n	8000f46 <_ZN10LeptonFLiR13readNextFrameEv+0x286>
			}
			// DISCARD PACKET
			else {

				// if the discard packet is not the first packet of the frame retry sync
				if (skipFrame && (currReadRow || framesSkipped)) {
 8000e54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d008      	beq.n	8000e6e <_ZN10LeptonFLiR13readNextFrameEv+0x1ae>
 8000e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <_ZN10LeptonFLiR13readNextFrameEv+0x1a8>
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d002      	beq.n	8000e6e <_ZN10LeptonFLiR13readNextFrameEv+0x1ae>
					HAL_Delay(186);			// from data sheet, retry sync == disable CS, wait 185 ms, enable CS
 8000e68:	20ba      	movs	r0, #186	; 0xba
 8000e6a:	f001 fe71 	bl	8002b50 <HAL_Delay>
				}

				uint_fast8_t triesLeft =120;
 8000e6e:	2378      	movs	r3, #120	; 0x78
 8000e70:	61fb      	str	r3, [r7, #28]
				spiPacketRead = true;
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				// read other 120 packets and try find a good one
				while (triesLeft > 0) {
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d05b      	beq.n	8000f36 <_ZN10LeptonFLiR13readNextFrameEv+0x276>

					SPI_Transfer(spiFrame, LEPFLIR_SPI_FRAME_PACKET_SIZE16);  // read packet
 8000e7e:	4b4a      	ldr	r3, [pc, #296]	; (8000fa8 <_ZN10LeptonFLiR13readNextFrameEv+0x2e8>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4619      	mov	r1, r3
 8000e84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000e86:	f7ff fdc5 	bl	8000a14 <_ZL12SPI_TransferPti>

					skipFrame = ((spiFrame[0] & 0x0F00) == 0x0F00);  			// save category of packe from ID
 8000e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000e92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
					currRow = (spiFrame[0] & 0x00FF);                			// save its number
 8000ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24

					// if not discard packet
					if (!skipFrame) {
 8000ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000eac:	f083 0301 	eor.w	r3, r3, #1
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d038      	beq.n	8000f28 <_ZN10LeptonFLiR13readNextFrameEv+0x268>

						if (currRow == currReadRow) { // Reestablished sync at position we're next expecting
 8000eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d038      	beq.n	8000f30 <_ZN10LeptonFLiR13readNextFrameEv+0x270>
							break;
						}
						else if (currRow == 0) { // Reestablished sync at next frame position
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d131      	bne.n	8000f28 <_ZN10LeptonFLiR13readNextFrameEv+0x268>

							if ((currReadRow || framesSkipped) && ++framesSkipped >= 5) {
 8000ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d102      	bne.n	8000ed0 <_ZN10LeptonFLiR13readNextFrameEv+0x210>
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d007      	beq.n	8000ee0 <_ZN10LeptonFLiR13readNextFrameEv+0x220>
 8000ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d901      	bls.n	8000ee0 <_ZN10LeptonFLiR13readNextFrameEv+0x220>
 8000edc:	2301      	movs	r3, #1
 8000ede:	e000      	b.n	8000ee2 <_ZN10LeptonFLiR13readNextFrameEv+0x222>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d004      	beq.n	8000ef0 <_ZN10LeptonFLiR13readNextFrameEv+0x230>

								_isReadingNextFrame = false;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	741a      	strb	r2, [r3, #16]

								return false;
 8000eec:	2300      	movs	r3, #0
 8000eee:	e054      	b.n	8000f9a <_ZN10LeptonFLiR13readNextFrameEv+0x2da>
							}
							else {

								currReadRow = currImgRow = currSpiRow = currTeleRow = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8000efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c

								uint16_t* prevSPIFrame = spiFrame;
 8000f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f02:	60fb      	str	r3, [r7, #12]
								spiFrame = getSPIFrameDataRow(currSpiRow);
 8000f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f06:	4619      	mov	r1, r3
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff fd67 	bl	80009dc <_ZN10LeptonFLiR18getSPIFrameDataRowEi>
 8000f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
								if (spiFrame != prevSPIFrame)
 8000f10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d00d      	beq.n	8000f34 <_ZN10LeptonFLiR13readNextFrameEv+0x274>
									memcpy(spiFrame, prevSPIFrame, LEPFLIR_SPI_FRAME_PACKET_SIZE);
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <_ZN10LeptonFLiR13readNextFrameEv+0x2f0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	68f9      	ldr	r1, [r7, #12]
 8000f20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000f22:	f004 fac5 	bl	80054b0 <memcpy>

								break;
 8000f26:	e005      	b.n	8000f34 <_ZN10LeptonFLiR13readNextFrameEv+0x274>
							}
						}
					}

					--triesLeft;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	61fb      	str	r3, [r7, #28]
				while (triesLeft > 0) {
 8000f2e:	e7a3      	b.n	8000e78 <_ZN10LeptonFLiR13readNextFrameEv+0x1b8>
							break;
 8000f30:	bf00      	nop
 8000f32:	e000      	b.n	8000f36 <_ZN10LeptonFLiR13readNextFrameEv+0x276>
								break;
 8000f34:	bf00      	nop
				}

				// if I failed to find good packet in 120 read, exit from readNextFrame
				if (triesLeft == 0) {
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d104      	bne.n	8000f46 <_ZN10LeptonFLiR13readNextFrameEv+0x286>
					_isReadingNextFrame = false;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	741a      	strb	r2, [r3, #16]
					return false;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e029      	b.n	8000f9a <_ZN10LeptonFLiR13readNextFrameEv+0x2da>
				}
			}

            // Write out to frame
			if (currSpiRow == spiRows) {
 8000f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	f47f aef5 	bne.w	8000d3a <_ZN10LeptonFLiR13readNextFrameEv+0x7a>

				// for now only the versions of RAW14 and RGB888 are working
				if (_storageMode == LeptonFLiR_ImageStorageMode_RAW14 || _storageMode == LeptonFLiR_ImageStorageMode_RGB888 ) {
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d003      	beq.n	8000f60 <_ZN10LeptonFLiR13readNextFrameEv+0x2a0>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b07      	cmp	r3, #7
 8000f5e:	d112      	bne.n	8000f86 <_ZN10LeptonFLiR13readNextFrameEv+0x2c6>
					memcpy(_getImageDataRow(currImgRow), getSPIFrameDataRow(0) + 2, LEPFLIR_SPI_FRAME_PACKET_SIZE - 4);
 8000f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f62:	4619      	mov	r1, r3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fc89 	bl	800087c <_ZN10LeptonFLiR16_getImageDataRowEi>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fd34 	bl	80009dc <_ZN10LeptonFLiR18getSPIFrameDataRowEi>
 8000f74:	4603      	mov	r3, r0
 8000f76:	1d19      	adds	r1, r3, #4
 8000f78:	4b0d      	ldr	r3, [pc, #52]	; (8000fb0 <_ZN10LeptonFLiR13readNextFrameEv+0x2f0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b04      	subs	r3, #4
 8000f7e:	461a      	mov	r2, r3
 8000f80:	4620      	mov	r0, r4
 8000f82:	f004 fa95 	bl	80054b0 <memcpy>
				}

				++currImgRow; currSpiRow = 0;
 8000f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f88:	3301      	adds	r3, #1
 8000f8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	637b      	str	r3, [r7, #52]	; 0x34
		while (currImgRow < imgRows || currTeleRow < teleRows) {
 8000f90:	e6d3      	b.n	8000d3a <_ZN10LeptonFLiR13readNextFrameEv+0x7a>
			}
		}
        _isReadingNextFrame = false;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	741a      	strb	r2, [r3, #16]
    }
    return true;
 8000f98:	2301      	movs	r3, #1
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3744      	adds	r7, #68	; 0x44
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20013808 	.word	0x20013808
 8000fa8:	2001374c 	.word	0x2001374c
 8000fac:	20013745 	.word	0x20013745
 8000fb0:	20013748 	.word	0x20013748

08000fb4 <_ZN10LeptonFLiR12Lepton_setupEP6LEPTON>:




void LeptonFLiR::Lepton_setup(LEPTON *lepton){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]

	  agc_setAGCEnabled(lepton->agc_en);
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f85f 	bl	8001088 <_ZN10LeptonFLiR17agc_setAGCEnabledE18LEP_AGC_ENABLE_TAG>
	  agc_setAGCPolicy(lepton->agc_policy);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	78db      	ldrb	r3, [r3, #3]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f000 f870 	bl	80010b6 <_ZN10LeptonFLiR16agc_setAGCPolicyE14LEP_AGC_POLICY>
	  sys_setTelemetryEnabled(lepton->telemetry);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	791b      	ldrb	r3, [r3, #4]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f000 f881 	bl	80010e4 <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb>

	  if(lepton->format == LeptonFLiR_ImageStorageMode_RGB888){
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b07      	cmp	r3, #7
 8000fe8:	d11c      	bne.n	8001024 <_ZN10LeptonFLiR12Lepton_setupEP6LEPTON+0x70>

		  oem_setVideoMode(LEP_VIDEO_OUTPUT_FORMAT_RGB888);
 8000fea:	2103      	movs	r1, #3
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f926 	bl	800123e <_ZN10LeptonFLiR16oem_setVideoModeE27LEP_OEM_VIDEO_OUTPUT_FORMAT>
		  vid_setPseudoColorLUT(lepton->color);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	795b      	ldrb	r3, [r3, #5]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f000 f8c5 	bl	8001188 <_ZN10LeptonFLiR21vid_setPseudoColorLUTE18LEP_VID_PCOLOR_LUT>
		  lepton->W = 3*getImageWidth();
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fb56 	bl	80006b0 <_ZN10LeptonFLiR13getImageWidthEv>
 8001004:	4603      	mov	r3, r0
 8001006:	b29b      	uxth	r3, r3
 8001008:	461a      	mov	r2, r3
 800100a:	0052      	lsls	r2, r2, #1
 800100c:	4413      	add	r3, r2
 800100e:	b29a      	uxth	r2, r3
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	80da      	strh	r2, [r3, #6]
		  lepton->H = getImageHeight();
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fb75 	bl	8000704 <_ZN10LeptonFLiR14getImageHeightEv>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	811a      	strh	r2, [r3, #8]
 8001022:	e015      	b.n	8001050 <_ZN10LeptonFLiR12Lepton_setupEP6LEPTON+0x9c>

	  }else if(lepton->format == LeptonFLiR_ImageStorageMode_RAW14){
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b06      	cmp	r3, #6
 800102a:	d111      	bne.n	8001050 <_ZN10LeptonFLiR12Lepton_setupEP6LEPTON+0x9c>

		  oem_setVideoMode(LEP_VIDEO_OUTPUT_FORMAT_RAW14);
 800102c:	2107      	movs	r1, #7
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f905 	bl	800123e <_ZN10LeptonFLiR16oem_setVideoModeE27LEP_OEM_VIDEO_OUTPUT_FORMAT>
		  lepton->W = getImageWidth();
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff fb3b 	bl	80006b0 <_ZN10LeptonFLiR13getImageWidthEv>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	80da      	strh	r2, [r3, #6]
		  lepton->H = getImageHeight();
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fb5e 	bl	8000704 <_ZN10LeptonFLiR14getImageHeightEv>
 8001048:	4603      	mov	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	811a      	strh	r2, [r3, #8]

	  }

	  sys_runFrameAveraging();						// to reduce noise us the built-in function of frame averaging
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f8ca 	bl	80011ea <_ZN10LeptonFLiR21sys_runFrameAveragingEv>
	  sys_setNumFramesToAverage(LEP_SYS_FA_DIV_16);	// specify the number of frames used for the averaging
 8001056:	2104      	movs	r1, #4
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f8d9 	bl	8001210 <_ZN10LeptonFLiR25sys_setNumFramesToAverageE21LEP_SYS_FRAME_AVERAGE>

	  LEP_AGC_HISTOGRAM_ROI newROI;
	  newROI.startCol = 10;
 800105e:	230a      	movs	r3, #10
 8001060:	813b      	strh	r3, [r7, #8]
	  newROI.endCol   = 70;
 8001062:	2346      	movs	r3, #70	; 0x46
 8001064:	81bb      	strh	r3, [r7, #12]
	  newROI.startRow = 10;
 8001066:	230a      	movs	r3, #10
 8001068:	817b      	strh	r3, [r7, #10]
	  newROI.endRow   = 50;
 800106a:	2332      	movs	r3, #50	; 0x32
 800106c:	81fb      	strh	r3, [r7, #14]

	  agc_setHistogramRegion(&newROI);				// define a new Region Of Interest for a better histogram
 800106e:	f107 0308 	add.w	r3, r7, #8
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 f89e 	bl	80011b6 <_ZN10LeptonFLiR22agc_setHistogramRegionEP21LEP_AGC_HISTOGRAM_ROI>

	  readInitData();
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fcfa 	bl	8000a74 <_ZN10LeptonFLiR12readInitDataEv>
}
 8001080:	bf00      	nop
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <_ZN10LeptonFLiR17agc_setAGCEnabledE18LEP_AGC_ENABLE_TAG>:
// 			BEGINNING OF I2C FUNCIONS FOR CAMERA SET UP

// ********************************************************************


void LeptonFLiR::agc_setAGCEnabled(LEP_AGC_ENABLE_TAG state) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\n\r LeptonFLiR::agc_setAGCEnabled");
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_AGC_ENABLE_STATE, LEP_I2C_COMMAND_TYPE_SET), (uint32_t)state);
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f9c2 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4619      	mov	r1, r3
 80010a4:	78fb      	ldrb	r3, [r7, #3]
 80010a6:	461a      	mov	r2, r3
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f000 fa17 	bl	80014dc <_ZN10LeptonFLiR11sendCommandEtm>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <_ZN10LeptonFLiR16agc_setAGCPolicyE14LEP_AGC_POLICY>:
    uint32_t state;
    receiveCommand(cmdCode(LEP_CID_AGC_ENABLE_STATE, LEP_I2C_COMMAND_TYPE_GET), &state);
    return (bool)state;
}

void LeptonFLiR::agc_setAGCPolicy(LEP_AGC_POLICY policy) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\n\r LeptonFLiR::agc_setAGCPolicy");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_AGC_POLICY, LEP_I2C_COMMAND_TYPE_SET), (uint32_t)policy);
 80010c2:	2201      	movs	r2, #1
 80010c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f9ab 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	78fb      	ldrb	r3, [r7, #3]
 80010d4:	461a      	mov	r2, r3
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fa00 	bl	80014dc <_ZN10LeptonFLiR11sendCommandEtm>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb>:
    uint16_t kelvin100;
    receiveCommand(cmdCode(LEP_CID_SYS_FPA_TEMPERATURE_KELVIN, LEP_I2C_COMMAND_TYPE_GET), &kelvin100);
    return kelvin100ToTemperature(kelvin100);
}

void LeptonFLiR::sys_setTelemetryEnabled(bool enabled) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	460b      	mov	r3, r1
 80010ee:	70fb      	strb	r3, [r7, #3]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\n\rLeptonFLiR::sys_setTelemetryEnabled");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_SYS_TELEMETRY_ENABLE_STATE, LEP_I2C_COMMAND_TYPE_SET), (uint32_t)enabled);
 80010f0:	2201      	movs	r2, #1
 80010f2:	f44f 7106 	mov.w	r1, #536	; 0x218
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f994 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 80010fc:	4603      	mov	r3, r0
 80010fe:	4619      	mov	r1, r3
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	461a      	mov	r2, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f9e9 	bl	80014dc <_ZN10LeptonFLiR11sendCommandEtm>

    if (!_lastI2CError && !_lastLepResult) {
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7c5b      	ldrb	r3, [r3, #17]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d134      	bne.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	7c9b      	ldrb	r3, [r3, #18]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d130      	bne.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
        if (enabled && !_telemetryData) {
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d01a      	beq.n	8001156 <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x72>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d116      	bne.n	8001156 <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x72>
            _telemetryData = (byte *)malloc(LEPFLIR_SPI_FRAME_PACKET_SIZE);
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0xa0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f004 f9af 	bl	8005490 <malloc>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	60da      	str	r2, [r3, #12]

            if (_telemetryData)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d01c      	beq.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
                _telemetryData[0] = _telemetryData[1] = 0xFF; // initialize as discard packet
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	22ff      	movs	r2, #255	; 0xff
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	687a      	ldr	r2, [r7, #4]
 800114e:	68d2      	ldr	r2, [r2, #12]
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	7013      	strb	r3, [r2, #0]
            if (_telemetryData)
 8001154:	e012      	b.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
                msg_len = sprintf(msg, "\n\r  LeptonFLiR::sys_setTelemetryEnabled Failure allocating telemetryData.");
            	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
            }
#endif
        }
        else if (!enabled && _telemetryData) {
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	f083 0301 	eor.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00c      	beq.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
            free(_telemetryData);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	4618      	mov	r0, r3
 8001170:	f004 f996 	bl	80054a0 <free>
            _telemetryData = NULL;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
        }
    }
}
 800117a:	e7ff      	b.n	800117c <_ZN10LeptonFLiR23sys_setTelemetryEnabledEb+0x98>
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20013748 	.word	0x20013748

08001188 <_ZN10LeptonFLiR21vid_setPseudoColorLUTE18LEP_VID_PCOLOR_LUT>:
    uint32_t polarity;
    receiveCommand(cmdCode(LEP_CID_VID_POLARITY_SELECT, LEP_I2C_COMMAND_TYPE_GET), &polarity);
    return (LEP_VID_POLARITY)polarity;
}

void LeptonFLiR::vid_setPseudoColorLUT(LEP_VID_PCOLOR_LUT table) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	70fb      	strb	r3, [r7, #3]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\n\r LeptonFLiR::vid_setPseudoColorLUT");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_VID_LUT_SELECT, LEP_I2C_COMMAND_TYPE_SET), (uint32_t)table);
 8001194:	2201      	movs	r2, #1
 8001196:	f44f 7141 	mov.w	r1, #772	; 0x304
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f942 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4619      	mov	r1, r3
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	461a      	mov	r2, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f997 	bl	80014dc <_ZN10LeptonFLiR11sendCommandEtm>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <_ZN10LeptonFLiR22agc_setHistogramRegionEP21LEP_AGC_HISTOGRAM_ROI>:
    return enabled;
}

#ifndef LEPFLIR_EXCLUDE_EXT_I2C_FUNCS

void LeptonFLiR::agc_setHistogramRegion(LEP_AGC_HISTOGRAM_ROI *region) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
    if (!region) return;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00d      	beq.n	80011e2 <_ZN10LeptonFLiR22agc_setHistogramRegionEP21LEP_AGC_HISTOGRAM_ROI+0x2c>
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\n\r LeptonFLiR::agc_setHistogramRegion");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_AGC_ROI, LEP_I2C_COMMAND_TYPE_SET), (uint16_t *)region, sizeof(LEP_AGC_HISTOGRAM_ROI) / 2);
 80011c6:	2201      	movs	r2, #1
 80011c8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 f929 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4619      	mov	r1, r3
 80011d6:	2304      	movs	r3, #4
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f9a4 	bl	8001528 <_ZN10LeptonFLiR11sendCommandEtPti>
 80011e0:	e000      	b.n	80011e4 <_ZN10LeptonFLiR22agc_setHistogramRegionEP21LEP_AGC_HISTOGRAM_ROI+0x2e>
    if (!region) return;
 80011e2:	bf00      	nop
}
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZN10LeptonFLiR21sys_runFrameAveragingEv>:
    uint32_t location;
    receiveCommand(cmdCode(LEP_CID_SYS_TELEMETRY_LOCATION, LEP_I2C_COMMAND_TYPE_GET), &location);
    return (LEP_SYS_TELEMETRY_LOCATION)location;
}

void LeptonFLiR::sys_runFrameAveraging() {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r LeptonFLiR::sys_runFrameAveraging");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_SYS_EXECTUE_FRAME_AVERAGE, LEP_I2C_COMMAND_TYPE_RUN));
 80011f2:	2202      	movs	r2, #2
 80011f4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f913 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 80011fe:	4603      	mov	r3, r0
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f945 	bl	8001492 <_ZN10LeptonFLiR11sendCommandEt>
}
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN10LeptonFLiR25sys_setNumFramesToAverageE21LEP_SYS_FRAME_AVERAGE>:

void LeptonFLiR::sys_setNumFramesToAverage(LEP_SYS_FRAME_AVERAGE average) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	460b      	mov	r3, r1
 800121a:	70fb      	strb	r3, [r7, #3]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r LeptonFLiR::sys_setNumFramesToAverage");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCode(LEP_CID_SYS_NUM_FRAMES_TO_AVERAGE, LEP_I2C_COMMAND_TYPE_SET), (uint32_t)average);
 800121c:	2201      	movs	r2, #1
 800121e:	f44f 7109 	mov.w	r1, #548	; 0x224
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f8fe 	bl	8001424 <_ZN10LeptonFLiR7cmdCodeEtt>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	78fb      	ldrb	r3, [r7, #3]
 800122e:	461a      	mov	r2, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 f953 	bl	80014dc <_ZN10LeptonFLiR11sendCommandEtm>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <_ZN10LeptonFLiR16oem_setVideoModeE27LEP_OEM_VIDEO_OUTPUT_FORMAT>:
    receiveCommand(cmdCode(LEP_CID_VID_GAMMA_SELECT, LEP_I2C_COMMAND_TYPE_GET), &gamma);
    return gamma;
}


void LeptonFLiR::oem_setVideoMode(LEP_OEM_VIDEO_OUTPUT_FORMAT format) {
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	70fb      	strb	r3, [r7, #3]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\n\r LeptonFLiR::oem_setVideoMode");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    sendCommand(cmdCodeOEM(LEP_CID_OEM_VIDEO_OUTPUT_FORMAT_SELECT, LEP_I2C_COMMAND_TYPE_SET), (uint32_t)format);
 800124a:	2201      	movs	r2, #1
 800124c:	f640 0128 	movw	r1, #2088	; 0x828
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f901 	bl	8001458 <_ZN10LeptonFLiR10cmdCodeOEMEtt>
 8001256:	4603      	mov	r3, r0
 8001258:	4619      	mov	r1, r3
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	461a      	mov	r2, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f93c 	bl	80014dc <_ZN10LeptonFLiR11sendCommandEtm>

    if (!_lastI2CError && !_lastLepResult) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7c5b      	ldrb	r3, [r3, #17]
 8001268:	2b00      	cmp	r3, #0

    }
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <_ZN10LeptonFLiR16oem_getVideoModeEv>:

LEP_OEM_VIDEO_OUTPUT_FORMAT LeptonFLiR::oem_getVideoMode() {
 8001272:	b580      	push	{r7, lr}
 8001274:	b084      	sub	sp, #16
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]

    uint32_t format;
    receiveCommand(cmdCodeOEM(LEP_CID_OEM_VIDEO_OUTPUT_FORMAT_SELECT, LEP_I2C_COMMAND_TYPE_GET), &format);
 800127a:	2200      	movs	r2, #0
 800127c:	f640 0128 	movw	r1, #2088	; 0x828
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8e9 	bl	8001458 <_ZN10LeptonFLiR10cmdCodeOEMEtt>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	461a      	mov	r2, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f970 	bl	8001576 <_ZN10LeptonFLiR14receiveCommandEtPm>

    }
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    return (LEP_OEM_VIDEO_OUTPUT_FORMAT)format;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b2db      	uxtb	r3, r3
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_ZN10LeptonFLiR16waitCommandBeginEi>:
}

#endif


bool LeptonFLiR::waitCommandBegin(int timeout) {
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r    LeptonFLiR::waitCommandBegin");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    _lastLepResult = 0;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	749a      	strb	r2, [r3, #18]


    uint16_t status;
    if (readRegister(LEP_I2C_STATUS_REG, &status))
 80012b2:	f107 030a 	add.w	r3, r7, #10
 80012b6:	461a      	mov	r2, r3
 80012b8:	2102      	movs	r1, #2
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 fb8c 	bl	80019d8 <_ZN10LeptonFLiR12readRegisterEtPt>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <_ZN10LeptonFLiR16waitCommandBeginEi+0x32>
        return false;
 80012d0:	2300      	movs	r3, #0
 80012d2:	e03e      	b.n	8001352 <_ZN10LeptonFLiR16waitCommandBeginEi+0xb0>

    if (!(status & LEP_I2C_STATUS_BUSY_BIT_MASK))
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <_ZN10LeptonFLiR16waitCommandBeginEi+0x40>
        return true;
 80012de:	2301      	movs	r3, #1
 80012e0:	e037      	b.n	8001352 <_ZN10LeptonFLiR16waitCommandBeginEi+0xb0>

    unsigned long endTime = millis() + (unsigned long)timeout;
 80012e2:	f7ff f8f7 	bl	80004d4 <_Z6millisv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	4413      	add	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]

    while ((status & LEP_I2C_STATUS_BUSY_BIT_MASK) && (timeout <= 0 || millis() < endTime)) {
 80012ee:	897b      	ldrh	r3, [r7, #10]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00a      	beq.n	800130e <_ZN10LeptonFLiR16waitCommandBeginEi+0x6c>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	dd05      	ble.n	800130a <_ZN10LeptonFLiR16waitCommandBeginEi+0x68>
 80012fe:	f7ff f8e9 	bl	80004d4 <_Z6millisv>
 8001302:	4602      	mov	r2, r0
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4293      	cmp	r3, r2
 8001308:	d901      	bls.n	800130e <_ZN10LeptonFLiR16waitCommandBeginEi+0x6c>
 800130a:	2301      	movs	r3, #1
 800130c:	e000      	b.n	8001310 <_ZN10LeptonFLiR16waitCommandBeginEi+0x6e>
 800130e:	2300      	movs	r3, #0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d013      	beq.n	800133c <_ZN10LeptonFLiR16waitCommandBeginEi+0x9a>

        HAL_Delay(1);
 8001314:	2001      	movs	r0, #1
 8001316:	f001 fc1b 	bl	8002b50 <HAL_Delay>


        if (readRegister(LEP_I2C_STATUS_REG, &status))
 800131a:	f107 030a 	add.w	r3, r7, #10
 800131e:	461a      	mov	r2, r3
 8001320:	2102      	movs	r1, #2
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 fb58 	bl	80019d8 <_ZN10LeptonFLiR12readRegisterEtPt>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf14      	ite	ne
 800132e:	2301      	movne	r3, #1
 8001330:	2300      	moveq	r3, #0
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b00      	cmp	r3, #0
 8001336:	d0da      	beq.n	80012ee <_ZN10LeptonFLiR16waitCommandBeginEi+0x4c>
            return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e00a      	b.n	8001352 <_ZN10LeptonFLiR16waitCommandBeginEi+0xb0>
    }

    if (!(status & LEP_I2C_STATUS_BUSY_BIT_MASK))
 800133c:	897b      	ldrh	r3, [r7, #10]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <_ZN10LeptonFLiR16waitCommandBeginEi+0xa8>
        return true;
 8001346:	2301      	movs	r3, #1
 8001348:	e003      	b.n	8001352 <_ZN10LeptonFLiR16waitCommandBeginEi+0xb0>
    else {
        _lastLepResult = LEP_TIMEOUT_ERROR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2293      	movs	r2, #147	; 0x93
 800134e:	749a      	strb	r2, [r3, #18]
        return false;
 8001350:	2300      	movs	r3, #0
    }
}
 8001352:	4618      	mov	r0, r3
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_ZN10LeptonFLiR17waitCommandFinishEi>:


bool LeptonFLiR::waitCommandFinish(int timeout) {
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
    msg_len = sprintf(msg, "\n\r    LeptonFLiR::waitCommandFinish");
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    uint16_t status;
    if (readRegister(LEP_I2C_STATUS_REG, &status))
 8001364:	f107 030a 	add.w	r3, r7, #10
 8001368:	461a      	mov	r2, r3
 800136a:	2102      	movs	r1, #2
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fb33 	bl	80019d8 <_ZN10LeptonFLiR12readRegisterEtPt>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	bf14      	ite	ne
 8001378:	2301      	movne	r3, #1
 800137a:	2300      	moveq	r3, #0
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <_ZN10LeptonFLiR17waitCommandFinishEi+0x2c>
        return false;
 8001382:	2300      	movs	r3, #0
 8001384:	e04a      	b.n	800141c <_ZN10LeptonFLiR17waitCommandFinishEi+0xc2>

    if (!(status & LEP_I2C_STATUS_BUSY_BIT_MASK)) {
 8001386:	897b      	ldrh	r3, [r7, #10]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <_ZN10LeptonFLiR17waitCommandFinishEi+0x46>
        _lastLepResult = (byte)((status & LEP_I2C_STATUS_ERROR_CODE_BIT_MASK) >> LEP_I2C_STATUS_ERROR_CODE_BIT_SHIFT);
 8001390:	897b      	ldrh	r3, [r7, #10]
 8001392:	0a1b      	lsrs	r3, r3, #8
 8001394:	b29b      	uxth	r3, r3
 8001396:	b2da      	uxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	749a      	strb	r2, [r3, #18]
        return true;
 800139c:	2301      	movs	r3, #1
 800139e:	e03d      	b.n	800141c <_ZN10LeptonFLiR17waitCommandFinishEi+0xc2>
    }

    unsigned long endTime = millis() + (unsigned long)timeout;
 80013a0:	f7ff f898 	bl	80004d4 <_Z6millisv>
 80013a4:	4602      	mov	r2, r0
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]

    while ((status & LEP_I2C_STATUS_BUSY_BIT_MASK) && (timeout <= 0 || millis() < endTime)) {
 80013ac:	897b      	ldrh	r3, [r7, #10]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00a      	beq.n	80013cc <_ZN10LeptonFLiR17waitCommandFinishEi+0x72>
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	dd05      	ble.n	80013c8 <_ZN10LeptonFLiR17waitCommandFinishEi+0x6e>
 80013bc:	f7ff f88a 	bl	80004d4 <_Z6millisv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d901      	bls.n	80013cc <_ZN10LeptonFLiR17waitCommandFinishEi+0x72>
 80013c8:	2301      	movs	r3, #1
 80013ca:	e000      	b.n	80013ce <_ZN10LeptonFLiR17waitCommandFinishEi+0x74>
 80013cc:	2300      	movs	r3, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d013      	beq.n	80013fa <_ZN10LeptonFLiR17waitCommandFinishEi+0xa0>

        HAL_Delay(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f001 fbbc 	bl	8002b50 <HAL_Delay>

        if (readRegister(LEP_I2C_STATUS_REG, &status))
 80013d8:	f107 030a 	add.w	r3, r7, #10
 80013dc:	461a      	mov	r2, r3
 80013de:	2102      	movs	r1, #2
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 faf9 	bl	80019d8 <_ZN10LeptonFLiR12readRegisterEtPt>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0da      	beq.n	80013ac <_ZN10LeptonFLiR17waitCommandFinishEi+0x52>
            return false;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e010      	b.n	800141c <_ZN10LeptonFLiR17waitCommandFinishEi+0xc2>
    }

    if (!(status & LEP_I2C_STATUS_BUSY_BIT_MASK)) {
 80013fa:	897b      	ldrh	r3, [r7, #10]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d107      	bne.n	8001414 <_ZN10LeptonFLiR17waitCommandFinishEi+0xba>
        _lastLepResult = (byte)((status & LEP_I2C_STATUS_ERROR_CODE_BIT_MASK) >> LEP_I2C_STATUS_ERROR_CODE_BIT_SHIFT);
 8001404:	897b      	ldrh	r3, [r7, #10]
 8001406:	0a1b      	lsrs	r3, r3, #8
 8001408:	b29b      	uxth	r3, r3
 800140a:	b2da      	uxtb	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	749a      	strb	r2, [r3, #18]
        return true;
 8001410:	2301      	movs	r3, #1
 8001412:	e003      	b.n	800141c <_ZN10LeptonFLiR17waitCommandFinishEi+0xc2>
    } else {
        _lastLepResult = LEP_TIMEOUT_ERROR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2293      	movs	r2, #147	; 0x93
 8001418:	749a      	strb	r2, [r3, #18]
        return false;
 800141a:	2300      	movs	r3, #0
    }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <_ZN10LeptonFLiR7cmdCodeEtt>:

uint16_t LeptonFLiR::cmdCode(uint16_t cmdID, uint16_t cmdType) {
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
 8001430:	4613      	mov	r3, r2
 8001432:	803b      	strh	r3, [r7, #0]
    return (cmdID & LEP_I2C_COMMAND_MODULE_ID_BIT_MASK) | (cmdID & LEP_I2C_COMMAND_ID_BIT_MASK) | (cmdType & LEP_I2C_COMMAND_TYPE_BIT_MASK);
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	051b      	lsls	r3, r3, #20
 800143c:	0d1b      	lsrs	r3, r3, #20
 800143e:	b29a      	uxth	r2, r3
 8001440:	883b      	ldrh	r3, [r7, #0]
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	b29b      	uxth	r3, r3
 8001448:	4313      	orrs	r3, r2
 800144a:	b29b      	uxth	r3, r3
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_ZN10LeptonFLiR10cmdCodeOEMEtt>:

uint16_t LeptonFLiR::cmdCodeOEM(uint16_t cmdID, uint16_t cmdType) {
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
 8001464:	4613      	mov	r3, r2
 8001466:	803b      	strh	r3, [r7, #0]
    return (LEP_I2C_COMMAND_PROTECTION_BIT_BIT_MASK)|(cmdID & LEP_I2C_COMMAND_MODULE_ID_BIT_MASK) | (cmdID & LEP_I2C_COMMAND_ID_BIT_MASK) | (cmdType & LEP_I2C_COMMAND_TYPE_BIT_MASK);
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	f023 0303 	bic.w	r3, r3, #3
 800146e:	051b      	lsls	r3, r3, #20
 8001470:	0d1b      	lsrs	r3, r3, #20
 8001472:	b29a      	uxth	r2, r3
 8001474:	883b      	ldrh	r3, [r7, #0]
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	b29b      	uxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b29b      	uxth	r3, r3
 8001480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001484:	b29b      	uxth	r3, r3
}
 8001486:	4618      	mov	r0, r3
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <_ZN10LeptonFLiR11sendCommandEt>:

void LeptonFLiR::sendCommand(uint16_t cmdCode) {
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r  LeptonFLiR::sendCommand cmdCode: 0x%x", cmdCode);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    if (waitCommandBegin(LEPFLIR_GEN_CMD_TIMEOUT)) {
 800149e:	f241 3188 	movw	r1, #5000	; 0x1388
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fefd 	bl	80012a2 <_ZN10LeptonFLiR16waitCommandBeginEi>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d012      	beq.n	80014d4 <_ZN10LeptonFLiR11sendCommandEt+0x42>

        if (writeCmdRegister(cmdCode, NULL, 0) == 0) {
 80014ae:	8879      	ldrh	r1, [r7, #2]
 80014b0:	2300      	movs	r3, #0
 80014b2:	2200      	movs	r2, #0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f8a1 	bl	80015fc <_ZN10LeptonFLiR16writeCmdRegisterEtPti>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d004      	beq.n	80014d4 <_ZN10LeptonFLiR11sendCommandEt+0x42>

            waitCommandFinish(LEPFLIR_GEN_CMD_TIMEOUT);
 80014ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff43 	bl	800135a <_ZN10LeptonFLiR17waitCommandFinishEi>
    }

#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <_ZN10LeptonFLiR11sendCommandEtm>:
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}

void LeptonFLiR::sendCommand(uint16_t cmdCode, uint32_t value) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	460b      	mov	r3, r1
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	817b      	strh	r3, [r7, #10]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r  LeptonFLiR::sendCommand cmdCode: 0x%x", cmdCode);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    if (waitCommandBegin(LEPFLIR_GEN_CMD_TIMEOUT)) {
 80014ea:	f241 3188 	movw	r1, #5000	; 0x1388
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff fed7 	bl	80012a2 <_ZN10LeptonFLiR16waitCommandBeginEi>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d012      	beq.n	8001520 <_ZN10LeptonFLiR11sendCommandEtm+0x44>

        if (writeCmdRegister(cmdCode, (uint16_t *)&value, 2) == 0) {
 80014fa:	1d3a      	adds	r2, r7, #4
 80014fc:	8979      	ldrh	r1, [r7, #10]
 80014fe:	2302      	movs	r3, #2
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f87b 	bl	80015fc <_ZN10LeptonFLiR16writeCmdRegisterEtPti>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d004      	beq.n	8001520 <_ZN10LeptonFLiR11sendCommandEtm+0x44>

            waitCommandFinish(LEPFLIR_GEN_CMD_TIMEOUT);
 8001516:	f241 3188 	movw	r1, #5000	; 0x1388
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f7ff ff1d 	bl	800135a <_ZN10LeptonFLiR17waitCommandFinishEi>
    }

#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}
 8001520:	bf00      	nop
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <_ZN10LeptonFLiR11sendCommandEtPti>:

void LeptonFLiR::sendCommand(uint16_t cmdCode, uint16_t *dataWords, int dataLength) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	460b      	mov	r3, r1
 8001536:	817b      	strh	r3, [r7, #10]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r  LeptonFLiR::sendCommand cmdCode: 0x%x", cmdCode);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    if (waitCommandBegin(LEPFLIR_GEN_CMD_TIMEOUT)) {
 8001538:	f241 3188 	movw	r1, #5000	; 0x1388
 800153c:	68f8      	ldr	r0, [r7, #12]
 800153e:	f7ff feb0 	bl	80012a2 <_ZN10LeptonFLiR16waitCommandBeginEi>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d012      	beq.n	800156e <_ZN10LeptonFLiR11sendCommandEtPti+0x46>

        if (writeCmdRegister(cmdCode, dataWords, dataLength) == 0) {
 8001548:	8979      	ldrh	r1, [r7, #10]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	68f8      	ldr	r0, [r7, #12]
 8001550:	f000 f854 	bl	80015fc <_ZN10LeptonFLiR16writeCmdRegisterEtPti>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf0c      	ite	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	2300      	movne	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <_ZN10LeptonFLiR11sendCommandEtPti+0x46>

            waitCommandFinish(LEPFLIR_GEN_CMD_TIMEOUT);
 8001564:	f241 3188 	movw	r1, #5000	; 0x1388
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7ff fef6 	bl	800135a <_ZN10LeptonFLiR17waitCommandFinishEi>
    }

#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <_ZN10LeptonFLiR14receiveCommandEtPm>:
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}

void LeptonFLiR::receiveCommand(uint16_t cmdCode, uint32_t *value) {
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	60f8      	str	r0, [r7, #12]
 800157e:	460b      	mov	r3, r1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	817b      	strh	r3, [r7, #10]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg, "\n\r  LeptonFLiR::receiveCommand cmdCode: 0x%x",cmdCode);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    if (waitCommandBegin(LEPFLIR_GEN_CMD_TIMEOUT)) {
 8001584:	f241 3188 	movw	r1, #5000	; 0x1388
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fe8a 	bl	80012a2 <_ZN10LeptonFLiR16waitCommandBeginEi>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d01a      	beq.n	80015ca <_ZN10LeptonFLiR14receiveCommandEtPm+0x54>

        if (writeRegister(LEP_I2C_COMMAND_REG, cmdCode) == 0) {
 8001594:	897b      	ldrh	r3, [r7, #10]
 8001596:	461a      	mov	r2, r3
 8001598:	2104      	movs	r1, #4
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f9f0 	bl	8001980 <_ZN10LeptonFLiR13writeRegisterEtt>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf0c      	ite	eq
 80015a6:	2301      	moveq	r3, #1
 80015a8:	2300      	movne	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00c      	beq.n	80015ca <_ZN10LeptonFLiR14receiveCommandEtPm+0x54>

            if (waitCommandFinish(LEPFLIR_GEN_CMD_TIMEOUT)) {
 80015b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7ff fed0 	bl	800135a <_ZN10LeptonFLiR17waitCommandFinishEi>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d004      	beq.n	80015ca <_ZN10LeptonFLiR14receiveCommandEtPm+0x54>

                readDataRegister((uint16_t *)value, 2);
 80015c0:	2202      	movs	r2, #2
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f000 f8c5 	bl	8001754 <_ZN10LeptonFLiR16readDataRegisterEPti>
    }

#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZSt3minIiERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	da01      	bge.n	80015ec <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	e000      	b.n	80015ee <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80015ec:	687b      	ldr	r3, [r7, #4]
    }
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <_ZN10LeptonFLiR16writeCmdRegisterEtPti>:
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    checkForErrors();
#endif
}

int LeptonFLiR::writeCmdRegister(uint16_t cmdCode, uint16_t *dataWords, int dataLength) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b090      	sub	sp, #64	; 0x40
 8001600:	af04      	add	r7, sp, #16
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	460b      	mov	r3, r1
 800160a:	817b      	strh	r3, [r7, #10]
	        HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
        }
    }
#endif

    if (dataWords && dataLength) {
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 8083 	beq.w	800171a <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x11e>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d07f      	beq.n	800171a <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x11e>

    	HAL_StatusTypeDef I2C_Status;
    	uint8_t write_buf[2];
    	write_buf[0] = (uint16_t)dataLength>>8; // high byte
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	121b      	asrs	r3, r3, #8
 8001620:	b2db      	uxtb	r3, r3
 8001622:	773b      	strb	r3, [r7, #28]
    	write_buf[1] = (uint16_t)dataLength;    // low byte
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	b2db      	uxtb	r3, r3
 8001628:	777b      	strb	r3, [r7, #29]


    	I2C_Status = HAL_I2C_Mem_Write(&hi2c2, DEVICE_ADDRESS_I2C, LEP_I2C_DATA_LENGTH_REG, 2, write_buf, 2, 500);
 800162a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	2302      	movs	r3, #2
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	f107 031c 	add.w	r3, r7, #28
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2302      	movs	r3, #2
 800163c:	2206      	movs	r2, #6
 800163e:	2154      	movs	r1, #84	; 0x54
 8001640:	4843      	ldr	r0, [pc, #268]	; (8001750 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x154>)
 8001642:	f001 fea5 	bl	8003390 <HAL_I2C_Mem_Write>
 8001646:	4603      	mov	r3, r0
 8001648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	if(I2C_Status != HAL_OK){
 800164c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x5e>
    		return _lastI2CError;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	7c5b      	ldrb	r3, [r3, #17]
 8001658:	e076      	b.n	8001748 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x14c>
    	}

        int maxLength = BUFFER_LENGTH / 2;
 800165a:	2310      	movs	r3, #16
 800165c:	61bb      	str	r3, [r7, #24]
        int writeLength = std::min(maxLength, dataLength);
 800165e:	463a      	mov	r2, r7
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff ffb3 	bl	80015d2 <_ZSt3minIiERKT_S2_S2_>
 800166c:	4603      	mov	r3, r0
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint16_t regAddress = dataLength <= 16 ? LEP_I2C_DATA_0_REG : LEP_I2C_DATA_BUFFER;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2b10      	cmp	r3, #16
 8001676:	dc01      	bgt.n	800167c <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x80>
 8001678:	2308      	movs	r3, #8
 800167a:	e001      	b.n	8001680 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x84>
 800167c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001680:	857b      	strh	r3, [r7, #42]	; 0x2a

        while (dataLength > 0) {
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	dd48      	ble.n	800171a <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x11e>

        	HAL_StatusTypeDef I2C_Status2;
        	uint8_t write_buf2[2];
        	uint16_t moving_address = regAddress;
 8001688:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800168a:	853b      	strh	r3, [r7, #40]	; 0x28
        	uint16_t tmp;

        	while(writeLength-- > 0){
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001692:	2b00      	cmp	r3, #0
 8001694:	bfcc      	ite	gt
 8001696:	2301      	movgt	r3, #1
 8001698:	2300      	movle	r3, #0
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d026      	beq.n	80016ee <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0xf2>
        		tmp = *dataWords++;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1c9a      	adds	r2, r3, #2
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	84bb      	strh	r3, [r7, #36]	; 0x24
				write_buf2[0] = tmp>>8;
 80016aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016ac:	121b      	asrs	r3, r3, #8
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	753b      	strb	r3, [r7, #20]
				write_buf2[1] = tmp;
 80016b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	757b      	strb	r3, [r7, #21]

				I2C_Status2 = HAL_I2C_Mem_Write(&hi2c2, DEVICE_ADDRESS_I2C, moving_address, 2, write_buf2, 2, 500);
 80016b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016ba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	2302      	movs	r3, #2
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2302      	movs	r3, #2
 80016cc:	2154      	movs	r1, #84	; 0x54
 80016ce:	4820      	ldr	r0, [pc, #128]	; (8001750 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x154>)
 80016d0:	f001 fe5e 	bl	8003390 <HAL_I2C_Mem_Write>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				moving_address = moving_address + 0x0002;
 80016da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80016dc:	3302      	adds	r3, #2
 80016de:	853b      	strh	r3, [r7, #40]	; 0x28

				if(I2C_Status2 != HAL_OK){
 80016e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0d1      	beq.n	800168c <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x90>
					return _lastI2CError;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	7c5b      	ldrb	r3, [r3, #17]
 80016ec:	e02c      	b.n	8001748 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x14c>
				}
        	}


            regAddress += maxLength * 0x02;
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80016f8:	4413      	add	r3, r2
 80016fa:	857b      	strh	r3, [r7, #42]	; 0x2a
            dataLength -= maxLength;
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	603b      	str	r3, [r7, #0]
            writeLength = std::min(maxLength, dataLength);
 8001704:	463a      	mov	r2, r7
 8001706:	f107 0318 	add.w	r3, r7, #24
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff60 	bl	80015d2 <_ZSt3minIiERKT_S2_S2_>
 8001712:	4603      	mov	r3, r0
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (dataLength > 0) {
 8001718:	e7b3      	b.n	8001682 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x86>
        }
    }

	uint8_t write_buf3[2];
	write_buf3[0] = cmdCode>>8;
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	121b      	asrs	r3, r3, #8
 800171e:	b2db      	uxtb	r3, r3
 8001720:	f887 3020 	strb.w	r3, [r7, #32]
	write_buf3[1] = cmdCode;
 8001724:	897b      	ldrh	r3, [r7, #10]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	HAL_I2C_Mem_Write(&hi2c2, DEVICE_ADDRESS_I2C, LEP_I2C_COMMAND_REG, 2, write_buf3, 2, 500);
 800172c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2302      	movs	r3, #2
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2302      	movs	r3, #2
 800173e:	2204      	movs	r2, #4
 8001740:	2154      	movs	r1, #84	; 0x54
 8001742:	4803      	ldr	r0, [pc, #12]	; (8001750 <_ZN10LeptonFLiR16writeCmdRegisterEtPti+0x154>)
 8001744:	f001 fe24 	bl	8003390 <HAL_I2C_Mem_Write>
}
 8001748:	4618      	mov	r0, r3
 800174a:	3730      	adds	r7, #48	; 0x30
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200137b4 	.word	0x200137b4

08001754 <_ZN10LeptonFLiR16readDataRegisterEPti>:

int LeptonFLiR::readDataRegister(uint16_t *readWords, int maxLength) {
 8001754:	b5b0      	push	{r4, r5, r7, lr}
 8001756:	b096      	sub	sp, #88	; 0x58
 8001758:	af04      	add	r7, sp, #16
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]

	HAL_StatusTypeDef status;
	uint8_t read_buf[2];

	status = HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS_I2C, LEP_I2C_DATA_LENGTH_REG, 2, read_buf, 2, 500);
 8001760:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	2302      	movs	r3, #2
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2302      	movs	r3, #2
 8001772:	2206      	movs	r2, #6
 8001774:	2154      	movs	r1, #84	; 0x54
 8001776:	4881      	ldr	r0, [pc, #516]	; (800197c <_ZN10LeptonFLiR16readDataRegisterEPti+0x228>)
 8001778:	f001 ff04 	bl	8003584 <HAL_I2C_Mem_Read>
 800177c:	4603      	mov	r3, r0
 800177e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	int bytesRead;
	int readLength;
	if(status == HAL_OK){
 8001782:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10a      	bne.n	80017a0 <_ZN10LeptonFLiR16readDataRegisterEPti+0x4c>
		readLength = ((uint16_t)read_buf[0]<<8|read_buf[1]);
 800178a:	7f3b      	ldrb	r3, [r7, #28]
 800178c:	021b      	lsls	r3, r3, #8
 800178e:	7f7a      	ldrb	r2, [r7, #29]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
		bytesRead = 2;
 8001794:	2302      	movs	r3, #2
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
	} else {
		return (_lastI2CError = 4);
	}

    if (readLength == 0){
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10a      	bne.n	80017b4 <_ZN10LeptonFLiR16readDataRegisterEPti+0x60>
 800179e:	e004      	b.n	80017aa <_ZN10LeptonFLiR16readDataRegisterEPti+0x56>
		return (_lastI2CError = 4);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2204      	movs	r2, #4
 80017a4:	745a      	strb	r2, [r3, #17]
 80017a6:	2304      	movs	r3, #4
 80017a8:	e0e4      	b.n	8001974 <_ZN10LeptonFLiR16readDataRegisterEPti+0x220>
        return (_lastI2CError = 4);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2204      	movs	r2, #4
 80017ae:	745a      	strb	r2, [r3, #17]
 80017b0:	2304      	movs	r3, #4
 80017b2:	e0df      	b.n	8001974 <_ZN10LeptonFLiR16readDataRegisterEPti+0x220>
    }

    int min_length = std::min(BUFFER_LENGTH, readLength);
 80017b4:	2320      	movs	r3, #32
 80017b6:	623b      	str	r3, [r7, #32]
 80017b8:	f107 0218 	add.w	r2, r7, #24
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff ff05 	bl	80015d2 <_ZSt3minIiERKT_S2_S2_>
 80017c8:	4603      	mov	r3, r0
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_StatusTypeDef status2;
    uint8_t read_buf2[2];
    uint16_t moving_address = LEP_I2C_DATA_0_REG;
 80017ce:	2308      	movs	r3, #8
 80017d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    status2 = HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS_I2C, LEP_I2C_DATA_0_REG, 2, read_buf2, 2, 500);
 80017d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017d8:	9302      	str	r3, [sp, #8]
 80017da:	2302      	movs	r3, #2
 80017dc:	9301      	str	r3, [sp, #4]
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2302      	movs	r3, #2
 80017e6:	2208      	movs	r2, #8
 80017e8:	2154      	movs	r1, #84	; 0x54
 80017ea:	4864      	ldr	r0, [pc, #400]	; (800197c <_ZN10LeptonFLiR16readDataRegisterEPti+0x228>)
 80017ec:	f001 feca 	bl	8003584 <HAL_I2C_Mem_Read>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if(status2 == HAL_OK){
 80017f6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <_ZN10LeptonFLiR16readDataRegisterEPti+0xae>
    	bytesRead = min_length;
 80017fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
    }

    while (bytesRead > 0 && readLength > 0) {
 8001802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001804:	2b00      	cmp	r3, #0
 8001806:	f340 809b 	ble.w	8001940 <_ZN10LeptonFLiR16readDataRegisterEPti+0x1ec>
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b00      	cmp	r3, #0
 800180e:	f340 8097 	ble.w	8001940 <_ZN10LeptonFLiR16readDataRegisterEPti+0x1ec>
        int origReadLength = readLength / 2;
        int origMaxLength = maxLength;
        uint16_t *origReadWords = readWords;
#endif

        while (bytesRead > 1 && readLength > 1 && maxLength > 0) {
 8001812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001814:	2b01      	cmp	r3, #1
 8001816:	dd32      	ble.n	800187e <_ZN10LeptonFLiR16readDataRegisterEPti+0x12a>
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b01      	cmp	r3, #1
 800181c:	dd2f      	ble.n	800187e <_ZN10LeptonFLiR16readDataRegisterEPti+0x12a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	dd2c      	ble.n	800187e <_ZN10LeptonFLiR16readDataRegisterEPti+0x12a>

        	*(readWords++) = ((uint16_t)(read_buf2[0] & 0xFF) << 8) | (uint16_t)(read_buf2[1] & 0xFF);
 8001824:	7d3b      	ldrb	r3, [r7, #20]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	b21a      	sxth	r2, r3
 800182a:	7d7b      	ldrb	r3, [r7, #21]
 800182c:	b21b      	sxth	r3, r3
 800182e:	4313      	orrs	r3, r2
 8001830:	b219      	sxth	r1, r3
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1c9a      	adds	r2, r3, #2
 8001836:	60ba      	str	r2, [r7, #8]
 8001838:	b28a      	uxth	r2, r1
 800183a:	801a      	strh	r2, [r3, #0]

        	moving_address += 0x0002;
 800183c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001840:	3302      	adds	r3, #2
 8001842:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
            status2 = HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS_I2C, moving_address, 2, read_buf2, 2, 500);
 8001846:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800184a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800184e:	9302      	str	r3, [sp, #8]
 8001850:	2302      	movs	r3, #2
 8001852:	9301      	str	r3, [sp, #4]
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2302      	movs	r3, #2
 800185c:	2154      	movs	r1, #84	; 0x54
 800185e:	4847      	ldr	r0, [pc, #284]	; (800197c <_ZN10LeptonFLiR16readDataRegisterEPti+0x228>)
 8001860:	f001 fe90 	bl	8003584 <HAL_I2C_Mem_Read>
 8001864:	4603      	mov	r3, r0
 8001866:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

            bytesRead -= 2; readLength -= 2; --maxLength;
 800186a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800186c:	3b02      	subs	r3, #2
 800186e:	647b      	str	r3, [r7, #68]	; 0x44
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	3b02      	subs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3b01      	subs	r3, #1
 800187a:	607b      	str	r3, [r7, #4]
        while (bytesRead > 1 && readLength > 1 && maxLength > 0) {
 800187c:	e7c9      	b.n	8001812 <_ZN10LeptonFLiR16readDataRegisterEPti+0xbe>
            }
        }
#endif


        if (readLength > 0){
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b00      	cmp	r3, #0
 8001882:	ddbe      	ble.n	8001802 <_ZN10LeptonFLiR16readDataRegisterEPti+0xae>

        	status4 = HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS_I2C, moving_address, 2, read_buf4, min_length, 500);

        	if(status4 == HAL_OK){
        		bytesRead += std::min(BUFFER_LENGTH, readLength);
        	}
 8001884:	466b      	mov	r3, sp
 8001886:	461d      	mov	r5, r3
        	min_length = std::min(BUFFER_LENGTH, readLength);
 8001888:	2320      	movs	r3, #32
 800188a:	627b      	str	r3, [r7, #36]	; 0x24
 800188c:	f107 0218 	add.w	r2, r7, #24
 8001890:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001894:	4611      	mov	r1, r2
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fe9b 	bl	80015d2 <_ZSt3minIiERKT_S2_S2_>
 800189c:	4603      	mov	r3, r0
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        	uint8_t read_buf4[min_length];
 80018a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a4:	1e58      	subs	r0, r3, #1
 80018a6:	6378      	str	r0, [r7, #52]	; 0x34
 80018a8:	4603      	mov	r3, r0
 80018aa:	3301      	adds	r3, #1
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	f04f 0300 	mov.w	r3, #0
 80018b6:	f04f 0400 	mov.w	r4, #0
 80018ba:	00d4      	lsls	r4, r2, #3
 80018bc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80018c0:	00cb      	lsls	r3, r1, #3
 80018c2:	4603      	mov	r3, r0
 80018c4:	3301      	adds	r3, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	00d4      	lsls	r4, r2, #3
 80018d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80018da:	00cb      	lsls	r3, r1, #3
 80018dc:	4603      	mov	r3, r0
 80018de:	3301      	adds	r3, #1
 80018e0:	3307      	adds	r3, #7
 80018e2:	08db      	lsrs	r3, r3, #3
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	ebad 0d03 	sub.w	sp, sp, r3
 80018ea:	ab04      	add	r3, sp, #16
 80018ec:	3300      	adds	r3, #0
 80018ee:	633b      	str	r3, [r7, #48]	; 0x30
        	status4 = HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS_I2C, moving_address, 2, read_buf4, min_length, 500);
 80018f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80018f4:	b292      	uxth	r2, r2
 80018f6:	f8b7 0042 	ldrh.w	r0, [r7, #66]	; 0x42
 80018fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80018fe:	9102      	str	r1, [sp, #8]
 8001900:	9201      	str	r2, [sp, #4]
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2302      	movs	r3, #2
 8001906:	4602      	mov	r2, r0
 8001908:	2154      	movs	r1, #84	; 0x54
 800190a:	481c      	ldr	r0, [pc, #112]	; (800197c <_ZN10LeptonFLiR16readDataRegisterEPti+0x228>)
 800190c:	f001 fe3a 	bl	8003584 <HAL_I2C_Mem_Read>
 8001910:	4603      	mov	r3, r0
 8001912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        	if(status4 == HAL_OK){
 8001916:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10e      	bne.n	800193c <_ZN10LeptonFLiR16readDataRegisterEPti+0x1e8>
        		bytesRead += std::min(BUFFER_LENGTH, readLength);
 800191e:	2320      	movs	r3, #32
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
 8001922:	f107 0218 	add.w	r2, r7, #24
 8001926:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe50 	bl	80015d2 <_ZSt3minIiERKT_S2_S2_>
 8001932:	4603      	mov	r3, r0
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001938:	4413      	add	r3, r2
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
 800193c:	46ad      	mov	sp, r5
    while (bytesRead > 0 && readLength > 0) {
 800193e:	e760      	b.n	8001802 <_ZN10LeptonFLiR16readDataRegisterEPti+0xae>

        }
    }

    while (maxLength-- > 0)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	2b00      	cmp	r3, #0
 8001948:	bfcc      	ite	gt
 800194a:	2301      	movgt	r3, #1
 800194c:	2300      	movle	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <_ZN10LeptonFLiR16readDataRegisterEPti+0x20c>
        *readWords++ = 0;
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c9a      	adds	r2, r3, #2
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	2200      	movs	r2, #0
 800195c:	801a      	strh	r2, [r3, #0]
    while (maxLength-- > 0)
 800195e:	e7ef      	b.n	8001940 <_ZN10LeptonFLiR16readDataRegisterEPti+0x1ec>

    return (_lastI2CError = readLength ? 4 : 0);
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <_ZN10LeptonFLiR16readDataRegisterEPti+0x216>
 8001966:	2204      	movs	r2, #4
 8001968:	e000      	b.n	800196c <_ZN10LeptonFLiR16readDataRegisterEPti+0x218>
 800196a:	2200      	movs	r2, #0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	745a      	strb	r2, [r3, #17]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	7c5b      	ldrb	r3, [r3, #17]
}
 8001974:	4618      	mov	r0, r3
 8001976:	3748      	adds	r7, #72	; 0x48
 8001978:	46bd      	mov	sp, r7
 800197a:	bdb0      	pop	{r4, r5, r7, pc}
 800197c:	200137b4 	.word	0x200137b4

08001980 <_ZN10LeptonFLiR13writeRegisterEtt>:

int LeptonFLiR::writeRegister(uint16_t regAddress, uint16_t value) {
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af04      	add	r7, sp, #16
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	803b      	strh	r3, [r7, #0]
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 5000);
#endif

    HAL_StatusTypeDef I2C_status;
	uint8_t write_buf[2];
	write_buf[0] = value >> 8; // HIGH BIT
 8001990:	883b      	ldrh	r3, [r7, #0]
 8001992:	121b      	asrs	r3, r3, #8
 8001994:	b2db      	uxtb	r3, r3
 8001996:	733b      	strb	r3, [r7, #12]
	write_buf[1] = value;      // LOW BIT
 8001998:	883b      	ldrh	r3, [r7, #0]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	737b      	strb	r3, [r7, #13]

	I2C_status = HAL_I2C_Mem_Write(&hi2c2, DEVICE_ADDRESS_I2C, regAddress, 2, write_buf, 2, 500);
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019a4:	9302      	str	r3, [sp, #8]
 80019a6:	2302      	movs	r3, #2
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2302      	movs	r3, #2
 80019b2:	2154      	movs	r1, #84	; 0x54
 80019b4:	4807      	ldr	r0, [pc, #28]	; (80019d4 <_ZN10LeptonFLiR13writeRegisterEtt+0x54>)
 80019b6:	f001 fceb 	bl	8003390 <HAL_I2C_Mem_Write>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]

    if (I2C_status == HAL_OK){
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <_ZN10LeptonFLiR13writeRegisterEtt+0x48>
		return 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <_ZN10LeptonFLiR13writeRegisterEtt+0x4a>
    } else {
    	return 4;
 80019c8:	2304      	movs	r3, #4
    }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3710      	adds	r7, #16
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200137b4 	.word	0x200137b4

080019d8 <_ZN10LeptonFLiR12readRegisterEtPt>:


int LeptonFLiR::readRegister(uint16_t regAddress, uint16_t *value) {
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08c      	sub	sp, #48	; 0x30
 80019dc:	af04      	add	r7, sp, #16
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	460b      	mov	r3, r1
 80019e2:	607a      	str	r2, [r7, #4]
 80019e4:	817b      	strh	r3, [r7, #10]

	int bytesread;
	HAL_StatusTypeDef I2C_status;
	uint8_t read_buf[2];

	I2C_status =  HAL_I2C_Mem_Read(&hi2c2, DEVICE_ADDRESS_I2C, regAddress, 2, read_buf, 2, 500);
 80019e6:	897a      	ldrh	r2, [r7, #10]
 80019e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019ec:	9302      	str	r3, [sp, #8]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2302      	movs	r3, #2
 80019fa:	2154      	movs	r1, #84	; 0x54
 80019fc:	480e      	ldr	r0, [pc, #56]	; (8001a38 <_ZN10LeptonFLiR12readRegisterEtPt+0x60>)
 80019fe:	f001 fdc1 	bl	8003584 <HAL_I2C_Mem_Read>
 8001a02:	4603      	mov	r3, r0
 8001a04:	77fb      	strb	r3, [r7, #31]

	if(I2C_status == HAL_OK) {
 8001a06:	7ffb      	ldrb	r3, [r7, #31]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10e      	bne.n	8001a2a <_ZN10LeptonFLiR12readRegisterEtPt+0x52>
		*value = ((uint16_t)read_buf[0]<<8 | read_buf[1]); // HIGH BIT | LOW BIT
 8001a0c:	7d3b      	ldrb	r3, [r7, #20]
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21a      	sxth	r2, r3
 8001a12:	7d7b      	ldrb	r3, [r7, #21]
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	b29a      	uxth	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	801a      	strh	r2, [r3, #0]
		bytesread = 2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
#ifdef LEPFLIR_ENABLE_DEBUG_OUTPUT
    msg_len = sprintf(msg,"\n\r      LeptonFLiR::readRegister retVal: 0x%x",*value);
	HAL_UART_Transmit(&huart2, (uint8_t *)msg, msg_len, 500);
#endif

    return _lastI2CError;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	7c5b      	ldrb	r3, [r3, #17]
 8001a28:	e001      	b.n	8001a2e <_ZN10LeptonFLiR12readRegisterEtPt+0x56>
		return _lastI2CError;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	7c5b      	ldrb	r3, [r3, #17]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200137b4 	.word	0x200137b4

08001a3c <_Z41__static_initialization_and_destruction_0ii>:
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d10a      	bne.n	8001a62 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d105      	bne.n	8001a62 <_Z41__static_initialization_and_destruction_0ii+0x26>
uint16_t startUpTime = HAL_GetTick();
 8001a56:	f001 f86f 	bl	8002b38 <HAL_GetTick>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001a60:	801a      	strh	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20013746 	.word	0x20013746

08001a70 <_GLOBAL__sub_I_msg_len>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff ffdf 	bl	8001a3c <_Z41__static_initialization_and_destruction_0ii>
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a45      	ldr	r2, [pc, #276]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a3e      	ldr	r2, [pc, #248]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b3c      	ldr	r3, [pc, #240]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a37      	ldr	r2, [pc, #220]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001af4:	f043 0302 	orr.w	r3, r3, #2
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <MX_GPIO_Init+0x134>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2142      	movs	r1, #66	; 0x42
 8001b0a:	482b      	ldr	r0, [pc, #172]	; (8001bb8 <MX_GPIO_Init+0x138>)
 8001b0c:	f001 fad6 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b16:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <MX_GPIO_Init+0x13c>)
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4826      	ldr	r0, [pc, #152]	; (8001bc0 <MX_GPIO_Init+0x140>)
 8001b26:	f001 f947 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b2a:	23ff      	movs	r3, #255	; 0xff
 8001b2c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4820      	ldr	r0, [pc, #128]	; (8001bc0 <MX_GPIO_Init+0x140>)
 8001b3e:	f001 f93b 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b42:	f24e 0301 	movw	r3, #57345	; 0xe001
 8001b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4818      	ldr	r0, [pc, #96]	; (8001bb8 <MX_GPIO_Init+0x138>)
 8001b58:	f001 f92e 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001b5c:	2342      	movs	r3, #66	; 0x42
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_GPIO_Init+0x138>)
 8001b74:	f001 f920 	bl	8002db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <MX_GPIO_Init+0x144>)
 8001b96:	f001 f90f 	bl	8002db8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2028      	movs	r0, #40	; 0x28
 8001ba0:	f001 f8d3 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ba4:	2028      	movs	r0, #40	; 0x28
 8001ba6:	f001 f8ec 	bl	8002d82 <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3728      	adds	r7, #40	; 0x28
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	10210000 	.word	0x10210000
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <_Z16hm01b0_reg_writeth>:
}




void hm01b0_reg_write(uint16_t addr, uint8_t val) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af04      	add	r7, sp, #16
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460a      	mov	r2, r1
 8001bd2:	80fb      	strh	r3, [r7, #6]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	717b      	strb	r3, [r7, #5]

	HAL_StatusTypeDef I2Cstatus;

    I2Cstatus = HAL_I2C_Mem_Write(&hi2c1, HIMAX_I2C_ADDR, addr, 2, &val, sizeof(val), 500);
 8001bd8:	88fa      	ldrh	r2, [r7, #6]
 8001bda:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001bde:	9302      	str	r3, [sp, #8]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	1d7b      	adds	r3, r7, #5
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2302      	movs	r3, #2
 8001bea:	2148      	movs	r1, #72	; 0x48
 8001bec:	4804      	ldr	r0, [pc, #16]	; (8001c00 <_Z16hm01b0_reg_writeth+0x38>)
 8001bee:	f001 fbcf 	bl	8003390 <HAL_I2C_Mem_Write>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	73fb      	strb	r3, [r7, #15]
#ifdef enable_debug
    	STM_print("\n\r I2C write - error");
#endif
    }

}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20013760 	.word	0x20013760

08001c04 <_Z15hm01b0_reg_readt>:




uint8_t hm01b0_reg_read(uint16_t addr) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]

	HAL_StatusTypeDef I2Cstatus;
	uint8_t ReceiveBuffer[1];

    I2Cstatus = HAL_I2C_Mem_Read(&hi2c1, HIMAX_I2C_ADDR, addr, 2, ReceiveBuffer, 1, 500);
 8001c0e:	88fa      	ldrh	r2, [r7, #6]
 8001c10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c14:	9302      	str	r3, [sp, #8]
 8001c16:	2301      	movs	r3, #1
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	f107 030c 	add.w	r3, r7, #12
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2302      	movs	r3, #2
 8001c22:	2148      	movs	r1, #72	; 0x48
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <_Z15hm01b0_reg_readt+0x34>)
 8001c26:	f001 fcad 	bl	8003584 <HAL_I2C_Mem_Read>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
#ifdef enable_debug
    	STM_print("\n\r I2C read - error");
#endif
    }

	return ReceiveBuffer[0];
 8001c2e:	7b3b      	ldrb	r3, [r7, #12]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	20013760 	.word	0x20013760

08001c3c <_Z23hm01b0_reg_default_initv>:




void hm01b0_reg_default_init() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0


	uint8_t PID_L = 0, PID_H = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	717b      	strb	r3, [r7, #5]
 8001c46:	2300      	movs	r3, #0
 8001c48:	713b      	strb	r3, [r7, #4]
	uint16_t PID = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	80fb      	strh	r3, [r7, #6]

	PID_H = hm01b0_reg_read(MODEL_ID_H);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff ffd8 	bl	8001c04 <_Z15hm01b0_reg_readt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	713b      	strb	r3, [r7, #4]
	PID_L = hm01b0_reg_read(MODEL_ID_L);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f7ff ffd3 	bl	8001c04 <_Z15hm01b0_reg_readt>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	717b      	strb	r3, [r7, #5]

	PID = ((PID_H << 8) | PID_L);
 8001c62:	793b      	ldrb	r3, [r7, #4]
 8001c64:	021b      	lsls	r3, r3, #8
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	797b      	ldrb	r3, [r7, #5]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	80fb      	strh	r3, [r7, #6]

	while (PID != 0x01B0) {
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001c78:	d012      	beq.n	8001ca0 <_Z23hm01b0_reg_default_initv+0x64>

		PID_H = hm01b0_reg_read(MODEL_ID_H);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f7ff ffc2 	bl	8001c04 <_Z15hm01b0_reg_readt>
 8001c80:	4603      	mov	r3, r0
 8001c82:	713b      	strb	r3, [r7, #4]
		PID_L = hm01b0_reg_read(MODEL_ID_L);
 8001c84:	2001      	movs	r0, #1
 8001c86:	f7ff ffbd 	bl	8001c04 <_Z15hm01b0_reg_readt>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	717b      	strb	r3, [r7, #5]

		PID = ((PID_H << 8) | PID_L);
 8001c8e:	793b      	ldrb	r3, [r7, #4]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	797b      	ldrb	r3, [r7, #5]
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	80fb      	strh	r3, [r7, #6]
	while (PID != 0x01B0) {
 8001c9e:	e7e8      	b.n	8001c72 <_Z23hm01b0_reg_default_initv+0x36>
#ifdef enable_debug
	STM_print("\n\r Camera: Register config");
#endif

	// Software Reset
	hm01b0_reg_write(SW_RESET, 0x01);
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	f240 1003 	movw	r0, #259	; 0x103
 8001ca6:	f7ff ff8f 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	// Clock configuration
	hm01b0_reg_write(OSC_CLK_DIV, 0x38); 						// Gated pclock, MSB first, main clock 8x div, reg clock 1x div [Nard - 0x38]
 8001caa:	2138      	movs	r1, #56	; 0x38
 8001cac:	f243 0060 	movw	r0, #12384	; 0x3060
 8001cb0:	f7ff ff8a 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	// Motion detection
	hm01b0_reg_write(MD_CTRL, 0x30);                    		// Motion detection control -- Disable
 8001cb4:	2130      	movs	r1, #48	; 0x30
 8001cb6:	f242 1050 	movw	r0, #8528	; 0x2150
 8001cba:	f7ff ff85 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	// QVGA windows
	hm01b0_reg_write(QVGA_WIN_EN, 0x01);   						// Enable qvga timing						[Nard - 0x01]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	f243 0010 	movw	r0, #12304	; 0x3010
 8001cc4:	f7ff ff80 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	//Sync signal advance
	hm01b0_reg_write(ADVANCE_VSYNC, 0x01);						// Advance LVLD by 2 Pixel Time
 8001cc8:	2101      	movs	r1, #1
 8001cca:	f243 0022 	movw	r0, #12322	; 0x3022
 8001cce:	f7ff ff7b 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	// Exposure integration time start value 					// Optimized for bright outdoor 
	hm01b0_reg_write(INTEGRATION_H, 0x00);						// Pixels line lenght High bits [Def: 0x01]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	f240 2002 	movw	r0, #514	; 0x202
 8001cd8:	f7ff ff76 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(INTEGRATION_L, 0x20);						// Pixels line lenght Low bits  [Def: 0x01]
 8001cdc:	2120      	movs	r1, #32
 8001cde:	f240 2003 	movw	r0, #515	; 0x203
 8001ce2:	f7ff ff71 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	// Flicker step control
	hm01b0_reg_write(FS_CTRL, 0x00);                    		// Flicker Control -- Disable
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f242 100e 	movw	r0, #8462	; 0x210e
 8001cec:	f7ff ff6c 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	hm01b0_reg_write(AE_TARGET_MEAN, 0x39);						// Auto exp target value [Def: 0x3C]
 8001cf0:	2139      	movs	r1, #57	; 0x39
 8001cf2:	f242 1001 	movw	r0, #8449	; 0x2101
 8001cf6:	f7ff ff67 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(AE_MIN_MEAN, 0x07);						// Auto exp target value [Def: 0x0A]
 8001cfa:	2107      	movs	r1, #7
 8001cfc:	f242 1002 	movw	r0, #8450	; 0x2102
 8001d00:	f7ff ff62 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	hm01b0_reg_write(DIGITAL_GAIN_H, 0x03);						// Digital Gain High [Def: 0x01]
 8001d04:	2103      	movs	r1, #3
 8001d06:	f240 200e 	movw	r0, #526	; 0x20e
 8001d0a:	f7ff ff5d 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(DIGITAL_GAIN_L, 0x96);						// Digital Gain Low [Def: 0x00]
 8001d0e:	2196      	movs	r1, #150	; 0x96
 8001d10:	f240 200f 	movw	r0, #527	; 0x20f
 8001d14:	f7ff ff58 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	hm01b0_reg_write(MAX_DGAIN,	0xF0);							//	Max DGAIN [Def: 0xC0]
 8001d18:	21f0      	movs	r1, #240	; 0xf0
 8001d1a:	f242 100b 	movw	r0, #8459	; 0x210b
 8001d1e:	f7ff ff53 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(MIN_DGAIN, 0x30);							//	Min DGAIN [Def: 0x40]
 8001d22:	2130      	movs	r1, #48	; 0x30
 8001d24:	f242 100c 	movw	r0, #8460	; 0x210c
 8001d28:	f7ff ff4e 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	//hm01b0_reg_write(PMU_AUTOSLEEP_FRAMECNT, 0x01);				// Provides only 1 frame - only for streaming mode 2 frames number

	hm01b0_reg_write(MODE_SELECT, 0x05);						// Streaming mode 3								[Nard - 0x05]
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d32:	f7ff ff49 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	hm01b0_reg_write(READOUT_X, 0x03);   						// horizontal binning timing					[Nard - 0x03]
 8001d36:	2103      	movs	r1, #3
 8001d38:	f240 3083 	movw	r0, #899	; 0x383
 8001d3c:	f7ff ff44 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(READOUT_Y, 0x03);   						// vertical binning timing						[Nard - 0x03]
 8001d40:	2103      	movs	r1, #3
 8001d42:	f240 3087 	movw	r0, #903	; 0x387
 8001d46:	f7ff ff3f 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(BINNING_MODE, 0x03);   					// enable v and h binning						[Nard - 0x03]
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	f44f 7064 	mov.w	r0, #912	; 0x390
 8001d50:	f7ff ff3a 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	// Frame rate control
	hm01b0_reg_write(LINE_LEN_PCK_H, 0x00);						// Pixels line lenght High bits [Def: 0x01] - [Nard - 0x00]
 8001d54:	2100      	movs	r1, #0
 8001d56:	f240 3042 	movw	r0, #834	; 0x342
 8001d5a:	f7ff ff35 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(LINE_LEN_PCK_L, 0xD7);						// Pixels line lenght Low bits  [Def: 0x01] - [Nard - 0xD7]
 8001d5e:	21d7      	movs	r1, #215	; 0xd7
 8001d60:	f240 3043 	movw	r0, #835	; 0x343
 8001d64:	f7ff ff30 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(FRAME_LEN_LINES_H, 0x00);					// Frame line lenght High bits  [Def: 0x02] - [Nard - 0x00]
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f44f 7050 	mov.w	r0, #832	; 0x340
 8001d6e:	f7ff ff2b 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	hm01b0_reg_write(FRAME_LEN_LINES_L, 0x80);					// Frame line lenght Low bits   [Def: 0x32] - [Nard - 0x80]
 8001d72:	2180      	movs	r1, #128	; 0x80
 8001d74:	f240 3041 	movw	r0, #833	; 0x341
 8001d78:	f7ff ff26 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	hm01b0_reg_write(GRP_PARAM_HOLD, 0x01);						//Group parameter hold -- Command Update
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001d82:	f7ff ff21 	bl	8001bc8 <_Z16hm01b0_reg_writeth>


#ifdef enable_debug
	STM_print("\n\r Camera: configured");
#endif
}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <_Z15hm01b0_set_modeh>:
}




uint8_t hm01b0_set_mode(uint8_t mode) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]

	switch (mode) {
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d823      	bhi.n	8001de8 <_Z15hm01b0_set_modeh+0x58>
 8001da0:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <_Z15hm01b0_set_modeh+0x18>)
 8001da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da6:	bf00      	nop
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dc5 	.word	0x08001dc5
 8001db0:	08001dd1 	.word	0x08001dd1
 8001db4:	08001ddd 	.word	0x08001ddd

	case 0://Standby
#ifdef enable_debug
	STM_print("Camera: Standby\n\r");
#endif
		hm01b0_reg_write(MODE_SELECT, 0x00);
 8001db8:	2100      	movs	r1, #0
 8001dba:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dbe:	f7ff ff03 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001dc2:	e016      	b.n	8001df2 <_Z15hm01b0_set_modeh+0x62>

	case 1://Streaming mode 1
#ifdef enable_debug
	STM_print("Camera: Streaming mode 1\n\r");
#endif
		hm01b0_reg_write(MODE_SELECT, 0x01);
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dca:	f7ff fefd 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001dce:	e010      	b.n	8001df2 <_Z15hm01b0_set_modeh+0x62>

	case 2://Streaming mode 2
#ifdef enable_debug
	STM_print("Camera: Streaming mode 2\n\r");
#endif
		hm01b0_reg_write(MODE_SELECT, 0x03);
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dd6:	f7ff fef7 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001dda:	e00a      	b.n	8001df2 <_Z15hm01b0_set_modeh+0x62>

	case 3://Streaming mode 3
#ifdef enable_debug
	STM_print("Camera: Streaming mode 3\n\r");
#endif
		hm01b0_reg_write(MODE_SELECT, 0x05);
 8001ddc:	2105      	movs	r1, #5
 8001dde:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001de2:	f7ff fef1 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001de6:	e004      	b.n	8001df2 <_Z15hm01b0_set_modeh+0x62>

	default://Standby
#ifdef enable_debug
	STM_print("Camera: Standby\n\r");
#endif
		hm01b0_reg_write(MODE_SELECT, 0x00);
 8001de8:	2100      	movs	r1, #0
 8001dea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dee:	f7ff feeb 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

	}

	return mode;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_Z21hm01b0_set_resolutionP6HM01B0>:
}




uint8_t hm01b0_set_resolution(HM01B0 *cam) {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]

	switch (cam->resolution) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	789b      	ldrb	r3, [r3, #2]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <_Z21hm01b0_set_resolutionP6HM01B0+0x16>
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d01e      	beq.n	8001e4e <_Z21hm01b0_set_resolutionP6HM01B0+0x52>
 8001e10:	e04d      	b.n	8001eae <_Z21hm01b0_set_resolutionP6HM01B0+0xb2>
	case 0:
		//QVGA binning
#ifdef enable_debug
	STM_print("Camera: QVGA\n\r");
#endif
		hm01b0_reg_write(READOUT_X, 0x01);   					// disable horizontal binning timing
 8001e12:	2101      	movs	r1, #1
 8001e14:	f240 3083 	movw	r0, #899	; 0x383
 8001e18:	f7ff fed6 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(READOUT_Y, 0x01);   					// disable vertical binning timing
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	f240 3087 	movw	r0, #903	; 0x387
 8001e22:	f7ff fed1 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(BINNING_MODE, 0x00);   				// disable v and h binning
 8001e26:	2100      	movs	r1, #0
 8001e28:	f44f 7064 	mov.w	r0, #912	; 0x390
 8001e2c:	f7ff fecc 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

		cam->raw_W = 326;										// Raw camera orizontal pixel number
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f44f 72a3 	mov.w	r2, #326	; 0x146
 8001e36:	80da      	strh	r2, [r3, #6]
		cam->raw_H = 244;										// Raw camera vertical pixel number
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	22f4      	movs	r2, #244	; 0xf4
 8001e3c:	811a      	strh	r2, [r3, #8]

		cam->W = 320;											// Picture orizontal pixel number
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e44:	815a      	strh	r2, [r3, #10]
		cam->H = 240;											// Picture vertical pixel number
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	22f0      	movs	r2, #240	; 0xf0
 8001e4a:	819a      	strh	r2, [r3, #12]

		break;
 8001e4c:	e05e      	b.n	8001f0c <_Z21hm01b0_set_resolutionP6HM01B0+0x110>
	case 1:
		//QQVGA binning
#ifdef enable_debug
	STM_print("Camera: QQVGA\n\r");
#endif
		hm01b0_reg_write(READOUT_X, 0x03);   				// horizontal binning timing
 8001e4e:	2103      	movs	r1, #3
 8001e50:	f240 3083 	movw	r0, #899	; 0x383
 8001e54:	f7ff feb8 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(READOUT_Y,	0x03);   				// vertical binning timing
 8001e58:	2103      	movs	r1, #3
 8001e5a:	f240 3087 	movw	r0, #903	; 0x387
 8001e5e:	f7ff feb3 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(BINNING_MODE, 0x03);   			// enable v and h binning
 8001e62:	2103      	movs	r1, #3
 8001e64:	f44f 7064 	mov.w	r0, #912	; 0x390
 8001e68:	f7ff feae 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

		// Frame rate control
		hm01b0_reg_write(LINE_LEN_PCK_H, 0x00);				// Pixels line lenght High bits [Def: 0x01]
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f240 3042 	movw	r0, #834	; 0x342
 8001e72:	f7ff fea9 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(LINE_LEN_PCK_L, 0xD7);				// Pixels line lenght Low bits  [Def: 0x01]
 8001e76:	21d7      	movs	r1, #215	; 0xd7
 8001e78:	f240 3043 	movw	r0, #835	; 0x343
 8001e7c:	f7ff fea4 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(FRAME_LEN_LINES_H, 0x00);			// Frame line lenght High bits  [Def: 0x02]
 8001e80:	2100      	movs	r1, #0
 8001e82:	f44f 7050 	mov.w	r0, #832	; 0x340
 8001e86:	f7ff fe9f 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(FRAME_LEN_LINES_L, 0x80);			// Frame line lenght Low bits   [Def: 0x32]
 8001e8a:	2180      	movs	r1, #128	; 0x80
 8001e8c:	f240 3041 	movw	r0, #833	; 0x341
 8001e90:	f7ff fe9a 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

		cam->raw_W = 164;									// Raw camera orizontal pixel number
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	22a4      	movs	r2, #164	; 0xa4
 8001e98:	80da      	strh	r2, [r3, #6]
		cam->raw_H = 122;									// Raw camera vertical pixel number
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	227a      	movs	r2, #122	; 0x7a
 8001e9e:	811a      	strh	r2, [r3, #8]

		cam->W = 160;										// Picture orizontal pixel number
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	22a0      	movs	r2, #160	; 0xa0
 8001ea4:	815a      	strh	r2, [r3, #10]
		cam->H = 120;										// Picture vertical pixel number
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2278      	movs	r2, #120	; 0x78
 8001eaa:	819a      	strh	r2, [r3, #12]

		break;
 8001eac:	e02e      	b.n	8001f0c <_Z21hm01b0_set_resolutionP6HM01B0+0x110>
	default:
		//QQVGA binning
#ifdef enable_debug
	STM_print("Camera: QQVGA\n\r");
#endif
		hm01b0_reg_write(READOUT_X, 0x03);   				// horizontal binning timing
 8001eae:	2103      	movs	r1, #3
 8001eb0:	f240 3083 	movw	r0, #899	; 0x383
 8001eb4:	f7ff fe88 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(READOUT_Y,	0x03);   				// vertical binning timing
 8001eb8:	2103      	movs	r1, #3
 8001eba:	f240 3087 	movw	r0, #903	; 0x387
 8001ebe:	f7ff fe83 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(BINNING_MODE, 0x03);   			// enable v and h binning
 8001ec2:	2103      	movs	r1, #3
 8001ec4:	f44f 7064 	mov.w	r0, #912	; 0x390
 8001ec8:	f7ff fe7e 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

		// Frame rate control
		hm01b0_reg_write(LINE_LEN_PCK_H, 0x00);				// Pixels line lenght High bits [Def: 0x01]
 8001ecc:	2100      	movs	r1, #0
 8001ece:	f240 3042 	movw	r0, #834	; 0x342
 8001ed2:	f7ff fe79 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(LINE_LEN_PCK_L, 0xD7);				// Pixels line lenght Low bits  [Def: 0x01]
 8001ed6:	21d7      	movs	r1, #215	; 0xd7
 8001ed8:	f240 3043 	movw	r0, #835	; 0x343
 8001edc:	f7ff fe74 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(FRAME_LEN_LINES_H, 0x00);			// Frame line lenght High bits  [Def: 0x02]
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f44f 7050 	mov.w	r0, #832	; 0x340
 8001ee6:	f7ff fe6f 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		hm01b0_reg_write(FRAME_LEN_LINES_L, 0x80);			// Frame line lenght Low bits   [Def: 0x32]
 8001eea:	2180      	movs	r1, #128	; 0x80
 8001eec:	f240 3041 	movw	r0, #833	; 0x341
 8001ef0:	f7ff fe6a 	bl	8001bc8 <_Z16hm01b0_reg_writeth>

		cam->raw_W = 164;									// Raw camera orizontal pixel number
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	22a4      	movs	r2, #164	; 0xa4
 8001ef8:	80da      	strh	r2, [r3, #6]
		cam->raw_H = 122;									// Raw camera vertical pixel number
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	227a      	movs	r2, #122	; 0x7a
 8001efe:	811a      	strh	r2, [r3, #8]

		cam->W = 160;										// Picture orizontal pixel number
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	22a0      	movs	r2, #160	; 0xa0
 8001f04:	815a      	strh	r2, [r3, #10]
		cam->H = 120;										// Picture vertical pixel number
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2278      	movs	r2, #120	; 0x78
 8001f0a:	819a      	strh	r2, [r3, #12]
	}

	return cam->resolution;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	789b      	ldrb	r3, [r3, #2]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_Z19hm01b0_test_patternh>:




uint8_t hm01b0_test_pattern(uint8_t pattern) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]

	switch (pattern) {
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d009      	beq.n	8001f3c <_Z19hm01b0_test_patternh+0x24>
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d00d      	beq.n	8001f48 <_Z19hm01b0_test_patternh+0x30>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d111      	bne.n	8001f54 <_Z19hm01b0_test_patternh+0x3c>

	case 0://Disabled
#ifdef enable_debug
	STM_print("Camera: Test pattern Disabled\n\r");
#endif
		hm01b0_reg_write(TEST_PATTERN_MODE, 0x00);
 8001f30:	2100      	movs	r1, #0
 8001f32:	f240 6001 	movw	r0, #1537	; 0x601
 8001f36:	f7ff fe47 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001f3a:	e010      	b.n	8001f5e <_Z19hm01b0_test_patternh+0x46>

	case 1: // walking 1's
#ifdef enable_debug
	STM_print("Camera: Test pattern walking 1's\n\r");
#endif
		hm01b0_reg_write(TEST_PATTERN_MODE, 0x11);
 8001f3c:	2111      	movs	r1, #17
 8001f3e:	f240 6001 	movw	r0, #1537	; 0x601
 8001f42:	f7ff fe41 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001f46:	e00a      	b.n	8001f5e <_Z19hm01b0_test_patternh+0x46>

	case 2://color bars
#ifdef enable_debug
	STM_print("Camera: Test pattern color bars\n\r");
#endif
		hm01b0_reg_write(TEST_PATTERN_MODE, 0x01);
 8001f48:	2101      	movs	r1, #1
 8001f4a:	f240 6001 	movw	r0, #1537	; 0x601
 8001f4e:	f7ff fe3b 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
		break;
 8001f52:	e004      	b.n	8001f5e <_Z19hm01b0_test_patternh+0x46>

	default://Disabled
#ifdef enable_debug
	STM_print("Camera: Test pattern Disabled\n\r");
#endif
		hm01b0_reg_write(TEST_PATTERN_MODE, 0x00);
 8001f54:	2100      	movs	r1, #0
 8001f56:	f240 6001 	movw	r0, #1537	; 0x601
 8001f5a:	f7ff fe35 	bl	8001bc8 <_Z16hm01b0_reg_writeth>
	}

	return pattern;
 8001f5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_Z18STM_hm01b0_captureP6HM01B0>:




uint32_t STM_hm01b0_capture(HM01B0 *cam){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

	uint32_t max_pixels = (uint32_t)(cam->raw_W)*(cam->raw_H);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	88db      	ldrh	r3, [r3, #6]
 8001f74:	461a      	mov	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	891b      	ldrh	r3, [r3, #8]
 8001f7a:	fb03 f302 	mul.w	r3, r3, r2
 8001f7e:	60fb      	str	r3, [r7, #12]
	uint32_t tot = 0, k = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]

	if (cam->mode == 3)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d104      	bne.n	8001f9a <_Z18STM_hm01b0_captureP6HM01B0+0x32>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);		// raise frame request (TRIG pin)
 8001f90:	2201      	movs	r2, #1
 8001f92:	2102      	movs	r1, #2
 8001f94:	4843      	ldr	r0, [pc, #268]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8001f96:	f001 f891 	bl	80030bc <HAL_GPIO_WritePin>

	// wait for frame signal (read pin B15)
	while( (GPIOB->IDR & 0x8000) == 0x8000 );
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fa6:	bf0c      	ite	eq
 8001fa8:	2301      	moveq	r3, #1
 8001faa:	2300      	movne	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d000      	beq.n	8001fb4 <_Z18STM_hm01b0_captureP6HM01B0+0x4c>
 8001fb2:	e7f2      	b.n	8001f9a <_Z18STM_hm01b0_captureP6HM01B0+0x32>
	while( (GPIOB->IDR & 0x8000) != 0x8000 );
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fc0:	bf14      	ite	ne
 8001fc2:	2301      	movne	r3, #1
 8001fc4:	2300      	moveq	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d000      	beq.n	8001fce <_Z18STM_hm01b0_captureP6HM01B0+0x66>
 8001fcc:	e7f2      	b.n	8001fb4 <_Z18STM_hm01b0_captureP6HM01B0+0x4c>

	if(cam->resolution == QVGA){								// in QVGA mode skip first 7 pixels clock (read pin B13)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	789b      	ldrb	r3, [r3, #2]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d122      	bne.n	800201c <_Z18STM_hm01b0_captureP6HM01B0+0xb4>
		while(tot < 7){
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d81d      	bhi.n	8002018 <_Z18STM_hm01b0_captureP6HM01B0+0xb0>
			while( (GPIOB->IDR & 0x2000) == 0x2000 );
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fe8:	bf0c      	ite	eq
 8001fea:	2301      	moveq	r3, #1
 8001fec:	2300      	movne	r3, #0
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d000      	beq.n	8001ff6 <_Z18STM_hm01b0_captureP6HM01B0+0x8e>
 8001ff4:	e7f2      	b.n	8001fdc <_Z18STM_hm01b0_captureP6HM01B0+0x74>
			while( (GPIOB->IDR & 0x2000) != 0x2000 );
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d000      	beq.n	8002010 <_Z18STM_hm01b0_captureP6HM01B0+0xa8>
 800200e:	e7f2      	b.n	8001ff6 <_Z18STM_hm01b0_captureP6HM01B0+0x8e>
			tot++;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	3301      	adds	r3, #1
 8002014:	617b      	str	r3, [r7, #20]
		while(tot < 7){
 8002016:	e7de      	b.n	8001fd6 <_Z18STM_hm01b0_captureP6HM01B0+0x6e>
		}
		tot=0;
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
	}

	// cycle over all pixels
	while( ((GPIOB->IDR & 0x8000) == 0x8000) && tot < max_pixels){
 800201c:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002028:	d105      	bne.n	8002036 <_Z18STM_hm01b0_captureP6HM01B0+0xce>
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	429a      	cmp	r2, r3
 8002030:	d201      	bcs.n	8002036 <_Z18STM_hm01b0_captureP6HM01B0+0xce>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <_Z18STM_hm01b0_captureP6HM01B0+0xd0>
 8002036:	2300      	movs	r3, #0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d025      	beq.n	8002088 <_Z18STM_hm01b0_captureP6HM01B0+0x120>

		// wait for pixel signal (read pin B13)
		while( (GPIOB->IDR & 0x2000) == 0x2000 );
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002048:	bf0c      	ite	eq
 800204a:	2301      	moveq	r3, #1
 800204c:	2300      	movne	r3, #0
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d000      	beq.n	8002056 <_Z18STM_hm01b0_captureP6HM01B0+0xee>
 8002054:	e7f2      	b.n	800203c <_Z18STM_hm01b0_captureP6HM01B0+0xd4>
		while( (GPIOB->IDR & 0x2000) != 0x2000 );
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800205e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002062:	bf14      	ite	ne
 8002064:	2301      	movne	r3, #1
 8002066:	2300      	moveq	r3, #0
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d000      	beq.n	8002070 <_Z18STM_hm01b0_captureP6HM01B0+0x108>
 800206e:	e7f2      	b.n	8002056 <_Z18STM_hm01b0_captureP6HM01B0+0xee>

		frame[k++] = (GPIOC->IDR) & 0x00FF;						// save byte in frame buffer (read all 8 GPIO in 1 command)
 8002070:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <_Z18STM_hm01b0_captureP6HM01B0+0x140>)
 8002072:	6919      	ldr	r1, [r3, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	613a      	str	r2, [r7, #16]
 800207a:	b2c9      	uxtb	r1, r1
 800207c:	4a0b      	ldr	r2, [pc, #44]	; (80020ac <_Z18STM_hm01b0_captureP6HM01B0+0x144>)
 800207e:	54d1      	strb	r1, [r2, r3]
		tot++;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
	while( ((GPIOB->IDR & 0x8000) == 0x8000) && tot < max_pixels){
 8002086:	e7c9      	b.n	800201c <_Z18STM_hm01b0_captureP6HM01B0+0xb4>
	}

	if (cam->mode == 3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d104      	bne.n	800209a <_Z18STM_hm01b0_captureP6HM01B0+0x132>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);	// lower frame request (TRIG pin)
 8002090:	2200      	movs	r2, #0
 8002092:	2102      	movs	r1, #2
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <_Z18STM_hm01b0_captureP6HM01B0+0x13c>)
 8002096:	f001 f811 	bl	80030bc <HAL_GPIO_WritePin>

#ifdef enable_debug
	STM_print("Camera: Total %u pixels\n\r", tot);
#endif

	return tot;
 800209a:	697b      	ldr	r3, [r7, #20]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40020400 	.word	0x40020400
 80020a8:	40020800 	.word	0x40020800
 80020ac:	20000070 	.word	0x20000070

080020b0 <_Z17get_frame_row_colP6HM01B0ii>:




uint8_t get_frame_row_col(HM01B0 *cam, int row, int col){
 80020b0:	b480      	push	{r7}
 80020b2:	b087      	sub	sp, #28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]

	int count = row*cam->raw_W + col;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	88db      	ldrh	r3, [r3, #6]
 80020c0:	461a      	mov	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	fb03 f302 	mul.w	r3, r3, r2
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]

	uint8_t data;
	if(cam->dataDepth == EightB){
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	78db      	ldrb	r3, [r3, #3]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <_Z17get_frame_row_colP6HM01B0ii+0x32>
		data = frame[count];
 80020d6:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <_Z17get_frame_row_colP6HM01B0ii+0x58>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	75fb      	strb	r3, [r7, #23]
 80020e0:	e00a      	b.n	80020f8 <_Z17get_frame_row_colP6HM01B0ii+0x48>
	}else if(cam->dataDepth == SixB){
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	78db      	ldrb	r3, [r3, #3]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d106      	bne.n	80020f8 <_Z17get_frame_row_colP6HM01B0ii+0x48>
		data = frame[count] & 0x3F;
 80020ea:	4a07      	ldr	r2, [pc, #28]	; (8002108 <_Z17get_frame_row_colP6HM01B0ii+0x58>)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020f6:	75fb      	strb	r3, [r7, #23]
	}

	return data;
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	371c      	adds	r7, #28
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	20000070 	.word	0x20000070

0800210c <_Z12hm01b0_setupP6HM01B0>:




void hm01b0_setup(HM01B0 *cam){
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]

	if(cam->mode != 0)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d004      	beq.n	8002126 <_Z12hm01b0_setupP6HM01B0+0x1a>
		hm01b0_set_mode(cam->mode);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe35 	bl	8001d90 <_Z15hm01b0_set_modeh>

	hm01b0_set_resolution(cam);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff fe68 	bl	8001dfc <_Z21hm01b0_set_resolutionP6HM01B0>

	if(cam->tPattern != 0)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	795b      	ldrb	r3, [r3, #5]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <_Z12hm01b0_setupP6HM01B0+0x32>
		hm01b0_test_pattern(cam->tPattern);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	795b      	ldrb	r3, [r3, #5]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff feed 	bl	8001f18 <_Z19hm01b0_test_patternh>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <MX_I2C1_Init+0x50>)
 800214e:	4a13      	ldr	r2, [pc, #76]	; (800219c <MX_I2C1_Init+0x54>)
 8002150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <MX_I2C1_Init+0x50>)
 8002154:	4a12      	ldr	r2, [pc, #72]	; (80021a0 <MX_I2C1_Init+0x58>)
 8002156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <MX_I2C1_Init+0x50>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <MX_I2C1_Init+0x50>)
 8002160:	2200      	movs	r2, #0
 8002162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <MX_I2C1_Init+0x50>)
 8002166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800216a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <MX_I2C1_Init+0x50>)
 800216e:	2200      	movs	r2, #0
 8002170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <MX_I2C1_Init+0x50>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002178:	4b07      	ldr	r3, [pc, #28]	; (8002198 <MX_I2C1_Init+0x50>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800217e:	4b06      	ldr	r3, [pc, #24]	; (8002198 <MX_I2C1_Init+0x50>)
 8002180:	2200      	movs	r2, #0
 8002182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_I2C1_Init+0x50>)
 8002186:	f000 ffcb 	bl	8003120 <HAL_I2C_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002190:	f000 fa96 	bl	80026c0 <Error_Handler>
  }

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20013760 	.word	0x20013760
 800219c:	40005400 	.word	0x40005400
 80021a0:	00061a80 	.word	0x00061a80

080021a4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80021a8:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021aa:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <MX_I2C2_Init+0x54>)
 80021ac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <MX_I2C2_Init+0x58>)
 80021b2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c0:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021c6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021c8:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021d4:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021e0:	4804      	ldr	r0, [pc, #16]	; (80021f4 <MX_I2C2_Init+0x50>)
 80021e2:	f000 ff9d 	bl	8003120 <HAL_I2C_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021ec:	f000 fa68 	bl	80026c0 <Error_Handler>
  }

}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200137b4 	.word	0x200137b4
 80021f8:	40005800 	.word	0x40005800
 80021fc:	00061a80 	.word	0x00061a80

08002200 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08c      	sub	sp, #48	; 0x30
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002208:	f107 031c 	add.w	r3, r7, #28
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a3b      	ldr	r2, [pc, #236]	; (800230c <HAL_I2C_MspInit+0x10c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12d      	bne.n	800227e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	61bb      	str	r3, [r7, #24]
 8002226:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_I2C_MspInit+0x110>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a39      	ldr	r2, [pc, #228]	; (8002310 <HAL_I2C_MspInit+0x110>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_I2C_MspInit+0x110>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	61bb      	str	r3, [r7, #24]
 800223c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800223e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002244:	2312      	movs	r3, #18
 8002246:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002248:	2301      	movs	r3, #1
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224c:	2303      	movs	r3, #3
 800224e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002250:	2304      	movs	r3, #4
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002254:	f107 031c 	add.w	r3, r7, #28
 8002258:	4619      	mov	r1, r3
 800225a:	482e      	ldr	r0, [pc, #184]	; (8002314 <HAL_I2C_MspInit+0x114>)
 800225c:	f000 fdac 	bl	8002db8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002260:	2300      	movs	r3, #0
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_I2C_MspInit+0x110>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_I2C_MspInit+0x110>)
 800226a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226e:	6413      	str	r3, [r2, #64]	; 0x40
 8002270:	4b27      	ldr	r3, [pc, #156]	; (8002310 <HAL_I2C_MspInit+0x110>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800227c:	e041      	b.n	8002302 <HAL_I2C_MspInit+0x102>
  else if(i2cHandle->Instance==I2C2)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_I2C_MspInit+0x118>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d13c      	bne.n	8002302 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_I2C_MspInit+0x110>)
 800228e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002290:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_I2C_MspInit+0x110>)
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	6313      	str	r3, [r2, #48]	; 0x30
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_I2C_MspInit+0x110>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022aa:	2312      	movs	r3, #18
 80022ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ae:	2301      	movs	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b6:	2304      	movs	r3, #4
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ba:	f107 031c 	add.w	r3, r7, #28
 80022be:	4619      	mov	r1, r3
 80022c0:	4814      	ldr	r0, [pc, #80]	; (8002314 <HAL_I2C_MspInit+0x114>)
 80022c2:	f000 fd79 	bl	8002db8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c6:	2308      	movs	r3, #8
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ca:	2312      	movs	r3, #18
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80022d6:	2309      	movs	r3, #9
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022da:	f107 031c 	add.w	r3, r7, #28
 80022de:	4619      	mov	r1, r3
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <HAL_I2C_MspInit+0x114>)
 80022e2:	f000 fd69 	bl	8002db8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b09      	ldr	r3, [pc, #36]	; (8002310 <HAL_I2C_MspInit+0x110>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4a08      	ldr	r2, [pc, #32]	; (8002310 <HAL_I2C_MspInit+0x110>)
 80022f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f4:	6413      	str	r3, [r2, #64]	; 0x40
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <HAL_I2C_MspInit+0x110>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
}
 8002302:	bf00      	nop
 8002304:	3730      	adds	r7, #48	; 0x30
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40005400 	.word	0x40005400
 8002310:	40023800 	.word	0x40023800
 8002314:	40020400 	.word	0x40020400
 8002318:	40005800 	.word	0x40005800

0800231c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	b099      	sub	sp, #100	; 0x64
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002322:	f000 fba3 	bl	8002a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002326:	f000 f939 	bl	800259c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800232a:	f7ff fba9 	bl	8001a80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800232e:	f000 fb01 	bl	8002934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002332:	f7ff ff09 	bl	8002148 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002336:	f7ff ff35 	bl	80021a4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800233a:	f000 f9c5 	bl	80026c8 <MX_SPI1_Init>
  // ************************
#if defined LEPTON_ACTIVE || defined BOTH_SEPARATE || defined SOVRAPP

  LEPTON lepton;

  lepton.format 	= LeptonFLiR_ImageStorageMode_RGB888;	// either B&W (LeptonFLiR_ImageStorageMode_RAW14) or RGB (LeptonFLiR_ImageStorageMode_RGB888)
 800233e:	2307      	movs	r3, #7
 8002340:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  lepton.temp 		= LeptonFLiR_TemperatureMode_Celsius;	// definition of temperature scale, doesn't do anything (was original of previous code)
 8002344:	2300      	movs	r3, #0
 8002346:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  lepton.agc_en 	= LEP_AGC_ENABLE;						// enable or disable AGC (automatic gain control)
 800234a:	2301      	movs	r3, #1
 800234c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  lepton.agc_policy = LEP_AGC_HEQ;							// either linear (LEP_AGC_LINEAR) or histogram (LEP_AGC_HEQ) - refer to section 3.6 of data sheet
 8002350:	2301      	movs	r3, #1
 8002352:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  lepton.telemetry 	= false;								// enable or disable Telemetry
 8002356:	2300      	movs	r3, #0
 8002358:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  lepton.color 		= LEP_VID_FUSION_LUT;					// select the built in color palette (only for RGB mode)  - refer to page 38 of data sheet
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31



  LeptonFLiR flirController;								// define the class
 8002362:	f107 0318 	add.w	r3, r7, #24
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe f943 	bl	80005f2 <_ZN10LeptonFLiRC1Ev>
  flirController.init(lepton.format, lepton.temp);			// init the class
 800236c:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8002370:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	4618      	mov	r0, r3
 800237a:	f7fe f95d 	bl	8000638 <_ZN10LeptonFLiR4initE27LeptonFLiR_ImageStorageMode26LeptonFLiR_TemperatureMode>

  HAL_Delay(1000);
 800237e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002382:	f000 fbe5 	bl	8002b50 <HAL_Delay>
  flirController.Lepton_setup(&lepton);						// set up Lepton camera as defined in the struct (other more specific set ups are made also in this function)
 8002386:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4611      	mov	r1, r2
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fe0f 	bl	8000fb4 <_ZN10LeptonFLiR12Lepton_setupEP6LEPTON>


  // definitions for the transmission cycle
  bool leptonCapture = false;
 8002396:	2300      	movs	r3, #0
 8002398:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint8_t uart_tx_lep[lepton.W];
 800239c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800239e:	1e5d      	subs	r5, r3, #1
 80023a0:	64bd      	str	r5, [r7, #72]	; 0x48
 80023a2:	462b      	mov	r3, r5
 80023a4:	3301      	adds	r3, #1
 80023a6:	4619      	mov	r1, r3
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	f04f 0400 	mov.w	r4, #0
 80023b4:	00d4      	lsls	r4, r2, #3
 80023b6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80023ba:	00cb      	lsls	r3, r1, #3
 80023bc:	462b      	mov	r3, r5
 80023be:	3301      	adds	r3, #1
 80023c0:	4619      	mov	r1, r3
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	f04f 0400 	mov.w	r4, #0
 80023ce:	00d4      	lsls	r4, r2, #3
 80023d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80023d4:	00cb      	lsls	r3, r1, #3
 80023d6:	462b      	mov	r3, r5
 80023d8:	3301      	adds	r3, #1
 80023da:	3307      	adds	r3, #7
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	ebad 0d03 	sub.w	sp, sp, r3
 80023e4:	466b      	mov	r3, sp
 80023e6:	3300      	adds	r3, #0
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44
  //        INIT HIMAX
  // ************************

#if defined HIMAX_ACTIVE || defined BOTH_SEPARATE || defined SOVRAPP

  HM01B0 himax = {0};
 80023ea:	463b      	mov	r3, r7
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
 80023f8:	615a      	str	r2, [r3, #20]

  himax.mode 		= Streaming;		// either: continuous stream (Streaming), specific number of frames (Streaming2), send trigger for frame (Streaming3)
 80023fa:	2301      	movs	r3, #1
 80023fc:	703b      	strb	r3, [r7, #0]
  himax.resolution 	= QQVGA;			// either: 164x122 (QQVGA), 324x244 (QVGA)
 80023fe:	2301      	movs	r3, #1
 8002400:	70bb      	strb	r3, [r7, #2]
  himax.dataDepth 	= EightB;			// either: 6 bpp (EightB), 8 bpp (SixB)
 8002402:	2300      	movs	r3, #0
 8002404:	70fb      	strb	r3, [r7, #3]
  himax.dataIo 		= EightL;			// either: 8 Data lines (EightL), 4 Data lines (FourL), 8 Data lines (Serial)
 8002406:	2300      	movs	r3, #0
 8002408:	713b      	strb	r3, [r7, #4]
  himax.tPattern 	= Disabled;			// enable the test pattern (Disabled, Walking, ColorBar)
 800240a:	2300      	movs	r3, #0
 800240c:	717b      	strb	r3, [r7, #5]


  hm01b0_reg_default_init();			// read and write the standard configuration of the camera
 800240e:	f7ff fc15 	bl	8001c3c <_Z23hm01b0_reg_default_initv>

  hm01b0_setup(&himax);					// set up himax camera as defined in the struct
 8002412:	463b      	mov	r3, r7
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fe79 	bl	800210c <_Z12hm01b0_setupP6HM01B0>


  // definitions for the transmission cycle
  uint32_t himax_pixels;
  uint8_t uart_tx_him[himax.raw_W];
 800241a:	88fb      	ldrh	r3, [r7, #6]
 800241c:	1e5e      	subs	r6, r3, #1
 800241e:	643e      	str	r6, [r7, #64]	; 0x40
 8002420:	4633      	mov	r3, r6
 8002422:	3301      	adds	r3, #1
 8002424:	4619      	mov	r1, r3
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	00d4      	lsls	r4, r2, #3
 8002434:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002438:	00cb      	lsls	r3, r1, #3
 800243a:	4633      	mov	r3, r6
 800243c:	3301      	adds	r3, #1
 800243e:	4619      	mov	r1, r3
 8002440:	f04f 0200 	mov.w	r2, #0
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	f04f 0400 	mov.w	r4, #0
 800244c:	00d4      	lsls	r4, r2, #3
 800244e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002452:	00cb      	lsls	r3, r1, #3
 8002454:	4633      	mov	r3, r6
 8002456:	3301      	adds	r3, #1
 8002458:	3307      	adds	r3, #7
 800245a:	08db      	lsrs	r3, r3, #3
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	ebad 0d03 	sub.w	sp, sp, r3
 8002462:	466b      	mov	r3, sp
 8002464:	3300      	adds	r3, #0
 8002466:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint16_t lep_riga=0;
	uint16_t lep_col=0;

#endif

  HAL_Delay(1000);
 8002468:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800246c:	f000 fb70 	bl	8002b50 <HAL_Delay>
  while (1)
  {


	  // to start or stop reading frames PRESS THE BLUE BUTTON
	  if( BLUE_BUTTON ){
 8002470:	4b48      	ldr	r3, [pc, #288]	; (8002594 <main+0x278>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0fb      	beq.n	8002470 <main+0x154>
		  HAL_Delay(1);
 8002478:	2001      	movs	r0, #1
 800247a:	f000 fb69 	bl	8002b50 <HAL_Delay>
#endif


#ifdef BOTH_SEPARATE

		  himax_pixels = STM_hm01b0_capture(&himax);					// capture HIMAX image
 800247e:	463b      	mov	r3, r7
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fd71 	bl	8001f68 <_Z18STM_hm01b0_captureP6HM01B0>
 8002486:	63b8      	str	r0, [r7, #56]	; 0x38
		  leptonCapture = flirController.readNextFrame();				// capture LEPTON image
 8002488:	f107 0318 	add.w	r3, r7, #24
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe fc17 	bl	8000cc0 <_ZN10LeptonFLiR13readNextFrameEv>
 8002492:	4603      	mov	r3, r0
 8002494:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		  if((leptonCapture==true) && (himax_pixels == (himax.raw_H*himax.raw_W))){
 8002498:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800249c:	2b01      	cmp	r3, #1
 800249e:	d1e7      	bne.n	8002470 <main+0x154>
 80024a0:	893b      	ldrh	r3, [r7, #8]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d1df      	bne.n	8002470 <main+0x154>

			  // send to PC the HIMAX image
			  for(int riga=0; riga < himax.raw_H; riga++){
 80024b0:	2300      	movs	r3, #0
 80024b2:	653b      	str	r3, [r7, #80]	; 0x50
 80024b4:	893b      	ldrh	r3, [r7, #8]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ba:	4293      	cmp	r3, r2
 80024bc:	da24      	bge.n	8002508 <main+0x1ec>
				  for(int col=0; col< himax.raw_W; col++){
 80024be:	2300      	movs	r3, #0
 80024c0:	657b      	str	r3, [r7, #84]	; 0x54
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	461a      	mov	r2, r3
 80024c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024c8:	4293      	cmp	r3, r2
 80024ca:	da10      	bge.n	80024ee <main+0x1d2>
					  uart_tx_him[col] = get_frame_row_col(&himax, riga, col);
 80024cc:	463b      	mov	r3, r7
 80024ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fdec 	bl	80020b0 <_Z17get_frame_row_colP6HM01B0ii>
 80024d8:	4603      	mov	r3, r0
 80024da:	4619      	mov	r1, r3
 80024dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e0:	4413      	add	r3, r2
 80024e2:	460a      	mov	r2, r1
 80024e4:	701a      	strb	r2, [r3, #0]
				  for(int col=0; col< himax.raw_W; col++){
 80024e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024e8:	3301      	adds	r3, #1
 80024ea:	657b      	str	r3, [r7, #84]	; 0x54
 80024ec:	e7e9      	b.n	80024c2 <main+0x1a6>
				  }
				  HAL_UART_Transmit(&huart2, (uint8_t *)uart_tx_him, sizeof(uart_tx_him), 500);			// send 1 line of pixels
 80024ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80024f0:	b2b3      	uxth	r3, r6
 80024f2:	3301      	adds	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80024fa:	4827      	ldr	r0, [pc, #156]	; (8002598 <main+0x27c>)
 80024fc:	f002 fb3f 	bl	8004b7e <HAL_UART_Transmit>
			  for(int riga=0; riga < himax.raw_H; riga++){
 8002500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002502:	3301      	adds	r3, #1
 8002504:	653b      	str	r3, [r7, #80]	; 0x50
 8002506:	e7d5      	b.n	80024b4 <main+0x198>
			  }

			  // send to PC the LEPTON image
			  for(int riga=lepton.H-1; riga >= 0; --riga){
 8002508:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800250a:	3b01      	subs	r3, #1
 800250c:	65bb      	str	r3, [r7, #88]	; 0x58
 800250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002510:	2b00      	cmp	r3, #0
 8002512:	dbad      	blt.n	8002470 <main+0x154>
				  for(int col=0; col < lepton.W; ++col){
 8002514:	2300      	movs	r3, #0
 8002516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002518:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800251a:	461a      	mov	r2, r3
 800251c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800251e:	4293      	cmp	r3, r2
 8002520:	da2a      	bge.n	8002578 <main+0x25c>
					  if(lepton.format == LeptonFLiR_ImageStorageMode_RAW14){
 8002522:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002526:	2b06      	cmp	r3, #6
 8002528:	d10f      	bne.n	800254a <main+0x22e>
						  uart_tx_lep[lepton.W-1-col] = flirController.RAW_getImageDataRowCol(riga,col);
 800252a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800252c:	1e5a      	subs	r2, r3, #1
 800252e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002530:	1ad4      	subs	r4, r2, r3
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002538:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f9e3 	bl	8000906 <_ZN10LeptonFLiR22RAW_getImageDataRowColEii>
 8002540:	4603      	mov	r3, r0
 8002542:	461a      	mov	r2, r3
 8002544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002546:	551a      	strb	r2, [r3, r4]
 8002548:	e012      	b.n	8002570 <main+0x254>
					  }else if(lepton.format == LeptonFLiR_ImageStorageMode_RGB888){
 800254a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800254e:	2b07      	cmp	r3, #7
 8002550:	d10e      	bne.n	8002570 <main+0x254>
						  uart_tx_lep[lepton.W-1-col] = flirController.RGB_getImageDataRowCol(riga,col);
 8002552:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002554:	1e5a      	subs	r2, r3, #1
 8002556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002558:	1ad4      	subs	r4, r2, r3
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002560:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f9a7 	bl	80008b6 <_ZN10LeptonFLiR22RGB_getImageDataRowColEii>
 8002568:	4603      	mov	r3, r0
 800256a:	461a      	mov	r2, r3
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	551a      	strb	r2, [r3, r4]
				  for(int col=0; col < lepton.W; ++col){
 8002570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002572:	3301      	adds	r3, #1
 8002574:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002576:	e7cf      	b.n	8002518 <main+0x1fc>
					  }
				  }
				  HAL_UART_Transmit(&huart2, (uint8_t *)uart_tx_lep, sizeof(uart_tx_lep), 500);			// send 1 line of pixels
 8002578:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800257a:	b2ab      	uxth	r3, r5
 800257c:	3301      	adds	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <main+0x27c>)
 8002586:	f002 fafa 	bl	8004b7e <HAL_UART_Transmit>
			  for(int riga=lepton.H-1; riga >= 0; --riga){
 800258a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800258c:	3b01      	subs	r3, #1
 800258e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002590:	e7bd      	b.n	800250e <main+0x1f2>
 8002592:	bf00      	nop
 8002594:	20013750 	.word	0x20013750
 8002598:	20013860 	.word	0x20013860

0800259c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b094      	sub	sp, #80	; 0x50
 80025a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025a2:	f107 0320 	add.w	r3, r7, #32
 80025a6:	2230      	movs	r2, #48	; 0x30
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 ff8b 	bl	80054c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	4b30      	ldr	r3, [pc, #192]	; (8002688 <_Z18SystemClock_Configv+0xec>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <_Z18SystemClock_Configv+0xec>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ce:	6413      	str	r3, [r2, #64]	; 0x40
 80025d0:	4b2d      	ldr	r3, [pc, #180]	; (8002688 <_Z18SystemClock_Configv+0xec>)
 80025d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80025dc:	2300      	movs	r3, #0
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	4b2a      	ldr	r3, [pc, #168]	; (800268c <_Z18SystemClock_Configv+0xf0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80025e8:	4a28      	ldr	r2, [pc, #160]	; (800268c <_Z18SystemClock_Configv+0xf0>)
 80025ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b26      	ldr	r3, [pc, #152]	; (800268c <_Z18SystemClock_Configv+0xf0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f8:	607b      	str	r3, [r7, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002600:	2301      	movs	r3, #1
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002604:	2310      	movs	r3, #16
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002608:	2302      	movs	r3, #2
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800260c:	2300      	movs	r3, #0
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002610:	2308      	movs	r3, #8
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 60;
 8002614:	233c      	movs	r3, #60	; 0x3c
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002618:	2302      	movs	r3, #2
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800261c:	2307      	movs	r3, #7
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002620:	f107 0320 	add.w	r3, r7, #32
 8002624:	4618      	mov	r0, r3
 8002626:	f001 fd2f 	bl	8004088 <HAL_RCC_OscConfig>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf14      	ite	ne
 8002630:	2301      	movne	r3, #1
 8002632:	2300      	moveq	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800263a:	f000 f841 	bl	80026c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800263e:	230f      	movs	r3, #15
 8002640:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002642:	2302      	movs	r3, #2
 8002644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800264a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	2101      	movs	r1, #1
 800265a:	4618      	mov	r0, r3
 800265c:	f001 ff84 	bl	8004568 <HAL_RCC_ClockConfig>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf14      	ite	ne
 8002666:	2301      	movne	r3, #1
 8002668:	2300      	moveq	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8002670:	f000 f826 	bl	80026c0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_5);
 8002674:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002678:	2100      	movs	r1, #0
 800267a:	2000      	movs	r0, #0
 800267c:	f002 f85a 	bl	8004734 <HAL_RCC_MCOConfig>
}
 8002680:	bf00      	nop
 8002682:	3750      	adds	r7, #80	; 0x50
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000

08002690 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]

	// interrupt blue button
	if(GPIO_Pin==B1_Pin){
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a0:	d106      	bne.n	80026b0 <HAL_GPIO_EXTI_Callback+0x20>
		BLUE_BUTTON = !BLUE_BUTTON;
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_GPIO_EXTI_Callback+0x2c>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	f083 0301 	eor.w	r3, r3, #1
 80026aa:	b2da      	uxtb	r2, r3
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_GPIO_EXTI_Callback+0x2c>)
 80026ae:	701a      	strb	r2, [r3, #0]
	}
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	20013750 	.word	0x20013750

080026c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <Error_Handler+0x6>

080026c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <MX_SPI1_Init+0x68>)
 80026ce:	4a19      	ldr	r2, [pc, #100]	; (8002734 <MX_SPI1_Init+0x6c>)
 80026d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <MX_SPI1_Init+0x68>)
 80026d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <MX_SPI1_Init+0x68>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <MX_SPI1_Init+0x68>)
 80026e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_SPI1_Init+0x68>)
 80026ea:	2202      	movs	r2, #2
 80026ec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <MX_SPI1_Init+0x68>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026f4:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_SPI1_Init+0x68>)
 80026f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026fa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_SPI1_Init+0x68>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002702:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <MX_SPI1_Init+0x68>)
 8002704:	2200      	movs	r2, #0
 8002706:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_SPI1_Init+0x68>)
 800270a:	2200      	movs	r2, #0
 800270c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <MX_SPI1_Init+0x68>)
 8002710:	2200      	movs	r2, #0
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_SPI1_Init+0x68>)
 8002716:	220a      	movs	r2, #10
 8002718:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800271a:	4805      	ldr	r0, [pc, #20]	; (8002730 <MX_SPI1_Init+0x68>)
 800271c:	f002 f97e 	bl	8004a1c <HAL_SPI_Init>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8002726:	f7ff ffcb 	bl	80026c0 <Error_Handler>
  }

}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20013808 	.word	0x20013808
 8002734:	40013000 	.word	0x40013000

08002738 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a19      	ldr	r2, [pc, #100]	; (80027bc <HAL_SPI_MspInit+0x84>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d12b      	bne.n	80027b2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002764:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a10      	ldr	r2, [pc, #64]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_SPI_MspInit+0x88>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002792:	23e0      	movs	r3, #224	; 0xe0
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027a2:	2305      	movs	r3, #5
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 0314 	add.w	r3, r7, #20
 80027aa:	4619      	mov	r1, r3
 80027ac:	4805      	ldr	r0, [pc, #20]	; (80027c4 <HAL_SPI_MspInit+0x8c>)
 80027ae:	f000 fb03 	bl	8002db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80027b2:	bf00      	nop
 80027b4:	3728      	adds	r7, #40	; 0x28
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40013000 	.word	0x40013000
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020000 	.word	0x40020000

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b14      	ldr	r3, [pc, #80]	; (8002824 <HAL_MspInit+0x5c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <HAL_MspInit+0x5c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	; 0x44
 80027de:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_MspInit+0x5c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <HAL_MspInit+0x5c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_MspInit+0x5c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	; 0x40
 80027fa:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <HAL_MspInit+0x5c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002806:	2007      	movs	r0, #7
 8002808:	f000 fa94 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800280c:	2200      	movs	r2, #0
 800280e:	2100      	movs	r1, #0
 8002810:	2051      	movs	r0, #81	; 0x51
 8002812:	f000 fa9a 	bl	8002d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8002816:	2051      	movs	r0, #81	; 0x51
 8002818:	f000 fab3 	bl	8002d82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800281c:	bf00      	nop
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40023800 	.word	0x40023800

08002828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800282c:	e7fe      	b.n	800282c <NMI_Handler+0x4>

0800282e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002832:	e7fe      	b.n	8002832 <HardFault_Handler+0x4>

08002834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <MemManage_Handler+0x4>

0800283a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <BusFault_Handler+0x4>

08002840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <UsageFault_Handler+0x4>

08002846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800284a:	bf00      	nop
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002858:	bf00      	nop
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002862:	b480      	push	{r7}
 8002864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002874:	f000 f94c 	bl	8002b10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002878:	bf00      	nop
 800287a:	bd80      	pop	{r7, pc}

0800287c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002880:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002884:	f000 fc34 	bl	80030f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8002890:	bf00      	nop
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028a4:	4a14      	ldr	r2, [pc, #80]	; (80028f8 <_sbrk+0x5c>)
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <_sbrk+0x60>)
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <_sbrk+0x64>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d102      	bne.n	80028be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <_sbrk+0x64>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	; (8002904 <_sbrk+0x68>)
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d207      	bcs.n	80028dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028cc:	f002 fdb6 	bl	800543c <__errno>
 80028d0:	4602      	mov	r2, r0
 80028d2:	230c      	movs	r3, #12
 80028d4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80028d6:	f04f 33ff 	mov.w	r3, #4294967295
 80028da:	e009      	b.n	80028f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <_sbrk+0x64>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	4a05      	ldr	r2, [pc, #20]	; (8002900 <_sbrk+0x64>)
 80028ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ee:	68fb      	ldr	r3, [r7, #12]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3718      	adds	r7, #24
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20018000 	.word	0x20018000
 80028fc:	00000400 	.word	0x00000400
 8002900:	20013754 	.word	0x20013754
 8002904:	200138a8 	.word	0x200138a8

08002908 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800290c:	4b08      	ldr	r3, [pc, #32]	; (8002930 <SystemInit+0x28>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	4a07      	ldr	r2, [pc, #28]	; (8002930 <SystemInit+0x28>)
 8002914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <SystemInit+0x28>)
 800291e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002922:	609a      	str	r2, [r3, #8]
#endif
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <MX_USART2_UART_Init+0x48>)
 800293a:	4a11      	ldr	r2, [pc, #68]	; (8002980 <MX_USART2_UART_Init+0x4c>)
 800293c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1764705;
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <MX_USART2_UART_Init+0x48>)
 8002940:	4a10      	ldr	r2, [pc, #64]	; (8002984 <MX_USART2_UART_Init+0x50>)
 8002942:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002944:	4b0d      	ldr	r3, [pc, #52]	; (800297c <MX_USART2_UART_Init+0x48>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800294a:	4b0c      	ldr	r3, [pc, #48]	; (800297c <MX_USART2_UART_Init+0x48>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <MX_USART2_UART_Init+0x48>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <MX_USART2_UART_Init+0x48>)
 8002958:	220c      	movs	r2, #12
 800295a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <MX_USART2_UART_Init+0x48>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <MX_USART2_UART_Init+0x48>)
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002968:	4804      	ldr	r0, [pc, #16]	; (800297c <MX_USART2_UART_Init+0x48>)
 800296a:	f002 f8bb 	bl	8004ae4 <HAL_UART_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 8002974:	f7ff fea4 	bl	80026c0 <Error_Handler>
  }

}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	20013860 	.word	0x20013860
 8002980:	40004400 	.word	0x40004400
 8002984:	001aed61 	.word	0x001aed61

08002988 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08a      	sub	sp, #40	; 0x28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0314 	add.w	r3, r7, #20
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a19      	ldr	r2, [pc, #100]	; (8002a0c <HAL_UART_MspInit+0x84>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d12b      	bne.n	8002a02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	4b18      	ldr	r3, [pc, #96]	; (8002a10 <HAL_UART_MspInit+0x88>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	4a17      	ldr	r2, [pc, #92]	; (8002a10 <HAL_UART_MspInit+0x88>)
 80029b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029b8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ba:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <HAL_UART_MspInit+0x88>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b11      	ldr	r3, [pc, #68]	; (8002a10 <HAL_UART_MspInit+0x88>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a10      	ldr	r2, [pc, #64]	; (8002a10 <HAL_UART_MspInit+0x88>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_UART_MspInit+0x88>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029e2:	230c      	movs	r3, #12
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ee:	2300      	movs	r3, #0
 80029f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029f2:	2307      	movs	r3, #7
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 0314 	add.w	r3, r7, #20
 80029fa:	4619      	mov	r1, r3
 80029fc:	4805      	ldr	r0, [pc, #20]	; (8002a14 <HAL_UART_MspInit+0x8c>)
 80029fe:	f000 f9db 	bl	8002db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a02:	bf00      	nop
 8002a04:	3728      	adds	r7, #40	; 0x28
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	40004400 	.word	0x40004400
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000

08002a18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002a1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002a1e:	e003      	b.n	8002a28 <LoopCopyDataInit>

08002a20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002a22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002a24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002a26:	3104      	adds	r1, #4

08002a28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002a28:	480b      	ldr	r0, [pc, #44]	; (8002a58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002a2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002a2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002a30:	d3f6      	bcc.n	8002a20 <CopyDataInit>
  ldr  r2, =_sbss
 8002a32:	4a0b      	ldr	r2, [pc, #44]	; (8002a60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002a34:	e002      	b.n	8002a3c <LoopFillZerobss>

08002a36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002a36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002a38:	f842 3b04 	str.w	r3, [r2], #4

08002a3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002a3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002a40:	d3f9      	bcc.n	8002a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a42:	f7ff ff61 	bl	8002908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a46:	f002 fcff 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a4a:	f7ff fc67 	bl	800231c <main>
  bx  lr    
 8002a4e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a50:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002a54:	08005690 	.word	0x08005690
  ldr  r0, =_sdata
 8002a58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002a5c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002a60:	20013728 	.word	0x20013728
  ldr  r3, = _ebss
 8002a64:	200138a8 	.word	0x200138a8

08002a68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a68:	e7fe      	b.n	8002a68 <ADC_IRQHandler>
	...

08002a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_Init+0x40>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a0d      	ldr	r2, [pc, #52]	; (8002aac <HAL_Init+0x40>)
 8002a76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <HAL_Init+0x40>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <HAL_Init+0x40>)
 8002a82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a88:	4b08      	ldr	r3, [pc, #32]	; (8002aac <HAL_Init+0x40>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_Init+0x40>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a94:	2003      	movs	r0, #3
 8002a96:	f000 f94d 	bl	8002d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f000 f808 	bl	8002ab0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002aa0:	f7ff fe92 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023c00 	.word	0x40023c00

08002ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x54>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_InitTick+0x58>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f965 	bl	8002d9e <HAL_SYSTICK_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d001      	beq.n	8002ade <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00e      	b.n	8002afc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b0f      	cmp	r3, #15
 8002ae2:	d80a      	bhi.n	8002afa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f000 f92d 	bl	8002d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002af0:	4a06      	ldr	r2, [pc, #24]	; (8002b0c <HAL_InitTick+0x5c>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
 8002af8:	e000      	b.n	8002afc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000000 	.word	0x20000000
 8002b08:	20000008 	.word	0x20000008
 8002b0c:	20000004 	.word	0x20000004

08002b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x20>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	461a      	mov	r2, r3
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_IncTick+0x24>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4413      	add	r3, r2
 8002b20:	4a04      	ldr	r2, [pc, #16]	; (8002b34 <HAL_IncTick+0x24>)
 8002b22:	6013      	str	r3, [r2, #0]
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	20000008 	.word	0x20000008
 8002b34:	200138a0 	.word	0x200138a0

08002b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b3c:	4b03      	ldr	r3, [pc, #12]	; (8002b4c <HAL_GetTick+0x14>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	200138a0 	.word	0x200138a0

08002b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff ffee 	bl	8002b38 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b68:	d005      	beq.n	8002b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_Delay+0x40>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b76:	bf00      	nop
 8002b78:	f7ff ffde 	bl	8002b38 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d8f7      	bhi.n	8002b78 <HAL_Delay+0x28>
  {
  }
}
 8002b88:	bf00      	nop
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000008 	.word	0x20000008

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	; (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	db0b      	blt.n	8002c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	f003 021f 	and.w	r2, r3, #31
 8002c10:	4907      	ldr	r1, [pc, #28]	; (8002c30 <__NVIC_EnableIRQ+0x38>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	095b      	lsrs	r3, r3, #5
 8002c18:	2001      	movs	r0, #1
 8002c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	6039      	str	r1, [r7, #0]
 8002c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	db0a      	blt.n	8002c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	490c      	ldr	r1, [pc, #48]	; (8002c80 <__NVIC_SetPriority+0x4c>)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	0112      	lsls	r2, r2, #4
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	440b      	add	r3, r1
 8002c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c5c:	e00a      	b.n	8002c74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	4908      	ldr	r1, [pc, #32]	; (8002c84 <__NVIC_SetPriority+0x50>)
 8002c64:	79fb      	ldrb	r3, [r7, #7]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	3b04      	subs	r3, #4
 8002c6c:	0112      	lsls	r2, r2, #4
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	440b      	add	r3, r1
 8002c72:	761a      	strb	r2, [r3, #24]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000e100 	.word	0xe000e100
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b089      	sub	sp, #36	; 0x24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf28      	it	cs
 8002ca6:	2304      	movcs	r3, #4
 8002ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	3304      	adds	r3, #4
 8002cae:	2b06      	cmp	r3, #6
 8002cb0:	d902      	bls.n	8002cb8 <NVIC_EncodePriority+0x30>
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3b03      	subs	r3, #3
 8002cb6:	e000      	b.n	8002cba <NVIC_EncodePriority+0x32>
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	401a      	ands	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	4313      	orrs	r3, r2
         );
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	; 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d00:	d301      	bcc.n	8002d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d02:	2301      	movs	r3, #1
 8002d04:	e00f      	b.n	8002d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <SysTick_Config+0x40>)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0e:	210f      	movs	r1, #15
 8002d10:	f04f 30ff 	mov.w	r0, #4294967295
 8002d14:	f7ff ff8e 	bl	8002c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d18:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <SysTick_Config+0x40>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1e:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <SysTick_Config+0x40>)
 8002d20:	2207      	movs	r2, #7
 8002d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	e000e010 	.word	0xe000e010

08002d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff29 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d42:	bf00      	nop
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	4603      	mov	r3, r0
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5c:	f7ff ff3e 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff ff8e 	bl	8002c88 <NVIC_EncodePriority>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff5d 	bl	8002c34 <__NVIC_SetPriority>
}
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff31 	bl	8002bf8 <__NVIC_EnableIRQ>
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b082      	sub	sp, #8
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff ffa2 	bl	8002cf0 <SysTick_Config>
 8002dac:	4603      	mov	r3, r0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
 8002dd2:	e159      	b.n	8003088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	f040 8148 	bne.w	8003082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d00b      	beq.n	8002e12 <HAL_GPIO_Init+0x5a>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e06:	2b11      	cmp	r3, #17
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b12      	cmp	r3, #18
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0xfc>
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b12      	cmp	r3, #18
 8002eb2:	d123      	bne.n	8002efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	08da      	lsrs	r2, r3, #3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3208      	adds	r2, #8
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	220f      	movs	r2, #15
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	08da      	lsrs	r2, r3, #3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3208      	adds	r2, #8
 8002ef6:	69b9      	ldr	r1, [r7, #24]
 8002ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	2203      	movs	r2, #3
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	f000 80a2 	beq.w	8003082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_GPIO_Init+0x2e4>)
 8002f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f46:	4a55      	ldr	r2, [pc, #340]	; (800309c <HAL_GPIO_Init+0x2e4>)
 8002f48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4e:	4b53      	ldr	r3, [pc, #332]	; (800309c <HAL_GPIO_Init+0x2e4>)
 8002f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f5a:	4a51      	ldr	r2, [pc, #324]	; (80030a0 <HAL_GPIO_Init+0x2e8>)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	3302      	adds	r3, #2
 8002f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0303 	and.w	r3, r3, #3
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	220f      	movs	r2, #15
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a48      	ldr	r2, [pc, #288]	; (80030a4 <HAL_GPIO_Init+0x2ec>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x202>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a47      	ldr	r2, [pc, #284]	; (80030a8 <HAL_GPIO_Init+0x2f0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x1fe>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a46      	ldr	r2, [pc, #280]	; (80030ac <HAL_GPIO_Init+0x2f4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x1fa>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a45      	ldr	r2, [pc, #276]	; (80030b0 <HAL_GPIO_Init+0x2f8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x1f6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a44      	ldr	r2, [pc, #272]	; (80030b4 <HAL_GPIO_Init+0x2fc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x1f2>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e008      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e006      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e004      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_GPIO_Init+0x204>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	f002 0203 	and.w	r2, r2, #3
 8002fc2:	0092      	lsls	r2, r2, #2
 8002fc4:	4093      	lsls	r3, r2
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fcc:	4934      	ldr	r1, [pc, #208]	; (80030a0 <HAL_GPIO_Init+0x2e8>)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fda:	4b37      	ldr	r3, [pc, #220]	; (80030b8 <HAL_GPIO_Init+0x300>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <HAL_GPIO_Init+0x300>)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <HAL_GPIO_Init+0x300>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	43db      	mvns	r3, r3
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4013      	ands	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_GPIO_Init+0x300>)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_GPIO_Init+0x300>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	43db      	mvns	r3, r3
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	4013      	ands	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003052:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_GPIO_Init+0x300>)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003058:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_GPIO_Init+0x300>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	43db      	mvns	r3, r3
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	4013      	ands	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <HAL_GPIO_Init+0x300>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3301      	adds	r3, #1
 8003086:	61fb      	str	r3, [r7, #28]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	2b0f      	cmp	r3, #15
 800308c:	f67f aea2 	bls.w	8002dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003090:	bf00      	nop
 8003092:	3724      	adds	r7, #36	; 0x24
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	40023800 	.word	0x40023800
 80030a0:	40013800 	.word	0x40013800
 80030a4:	40020000 	.word	0x40020000
 80030a8:	40020400 	.word	0x40020400
 80030ac:	40020800 	.word	0x40020800
 80030b0:	40020c00 	.word	0x40020c00
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030fa:	4b08      	ldr	r3, [pc, #32]	; (800311c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003106:	4a05      	ldr	r2, [pc, #20]	; (800311c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800310c:	88fb      	ldrh	r3, [r7, #6]
 800310e:	4618      	mov	r0, r3
 8003110:	f7ff fabe 	bl	8002690 <HAL_GPIO_EXTI_Callback>
  }
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40013c00 	.word	0x40013c00

08003120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e11f      	b.n	8003372 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff f85a 	bl	8002200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003184:	f001 fc22 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a7b      	ldr	r2, [pc, #492]	; (800337c <HAL_I2C_Init+0x25c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d807      	bhi.n	80031a4 <HAL_I2C_Init+0x84>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a7a      	ldr	r2, [pc, #488]	; (8003380 <HAL_I2C_Init+0x260>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	e006      	b.n	80031b2 <HAL_I2C_Init+0x92>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a77      	ldr	r2, [pc, #476]	; (8003384 <HAL_I2C_Init+0x264>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	bf94      	ite	ls
 80031ac:	2301      	movls	r3, #1
 80031ae:	2300      	movhi	r3, #0
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e0db      	b.n	8003372 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a72      	ldr	r2, [pc, #456]	; (8003388 <HAL_I2C_Init+0x268>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a1b      	ldr	r3, [r3, #32]
 80031e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a64      	ldr	r2, [pc, #400]	; (800337c <HAL_I2C_Init+0x25c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d802      	bhi.n	80031f4 <HAL_I2C_Init+0xd4>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	e009      	b.n	8003208 <HAL_I2C_Init+0xe8>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	4a63      	ldr	r2, [pc, #396]	; (800338c <HAL_I2C_Init+0x26c>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	099b      	lsrs	r3, r3, #6
 8003206:	3301      	adds	r3, #1
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	430b      	orrs	r3, r1
 800320e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	69db      	ldr	r3, [r3, #28]
 8003216:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800321a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4956      	ldr	r1, [pc, #344]	; (800337c <HAL_I2C_Init+0x25c>)
 8003224:	428b      	cmp	r3, r1
 8003226:	d80d      	bhi.n	8003244 <HAL_I2C_Init+0x124>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	1e59      	subs	r1, r3, #1
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fbb1 f3f3 	udiv	r3, r1, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	2b04      	cmp	r3, #4
 800323e:	bf38      	it	cc
 8003240:	2304      	movcc	r3, #4
 8003242:	e04f      	b.n	80032e4 <HAL_I2C_Init+0x1c4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d111      	bne.n	8003270 <HAL_I2C_Init+0x150>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e58      	subs	r0, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	460b      	mov	r3, r1
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	440b      	add	r3, r1
 800325a:	fbb0 f3f3 	udiv	r3, r0, r3
 800325e:	3301      	adds	r3, #1
 8003260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf0c      	ite	eq
 8003268:	2301      	moveq	r3, #1
 800326a:	2300      	movne	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e012      	b.n	8003296 <HAL_I2C_Init+0x176>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	1e58      	subs	r0, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6859      	ldr	r1, [r3, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	0099      	lsls	r1, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	fbb0 f3f3 	udiv	r3, r0, r3
 8003286:	3301      	adds	r3, #1
 8003288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf0c      	ite	eq
 8003290:	2301      	moveq	r3, #1
 8003292:	2300      	movne	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Init+0x17e>
 800329a:	2301      	movs	r3, #1
 800329c:	e022      	b.n	80032e4 <HAL_I2C_Init+0x1c4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10e      	bne.n	80032c4 <HAL_I2C_Init+0x1a4>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1e58      	subs	r0, r3, #1
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6859      	ldr	r1, [r3, #4]
 80032ae:	460b      	mov	r3, r1
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	440b      	add	r3, r1
 80032b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c2:	e00f      	b.n	80032e4 <HAL_I2C_Init+0x1c4>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1e58      	subs	r0, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	0099      	lsls	r1, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032da:	3301      	adds	r3, #1
 80032dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	6809      	ldr	r1, [r1, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	6911      	ldr	r1, [r2, #16]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68d2      	ldr	r2, [r2, #12]
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6812      	ldr	r2, [r2, #0]
 8003324:	430b      	orrs	r3, r1
 8003326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	000186a0 	.word	0x000186a0
 8003380:	001e847f 	.word	0x001e847f
 8003384:	003d08ff 	.word	0x003d08ff
 8003388:	431bde83 	.word	0x431bde83
 800338c:	10624dd3 	.word	0x10624dd3

08003390 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	4608      	mov	r0, r1
 800339a:	4611      	mov	r1, r2
 800339c:	461a      	mov	r2, r3
 800339e:	4603      	mov	r3, r0
 80033a0:	817b      	strh	r3, [r7, #10]
 80033a2:	460b      	mov	r3, r1
 80033a4:	813b      	strh	r3, [r7, #8]
 80033a6:	4613      	mov	r3, r2
 80033a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80033aa:	f7ff fbc5 	bl	8002b38 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	f040 80d9 	bne.w	8003570 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	2319      	movs	r3, #25
 80033c4:	2201      	movs	r2, #1
 80033c6:	496d      	ldr	r1, [pc, #436]	; (800357c <HAL_I2C_Mem_Write+0x1ec>)
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fc7f 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0cc      	b.n	8003572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_I2C_Mem_Write+0x56>
 80033e2:	2302      	movs	r3, #2
 80033e4:	e0c5      	b.n	8003572 <HAL_I2C_Mem_Write+0x1e2>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2201      	movs	r2, #1
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d007      	beq.n	800340c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2221      	movs	r2, #33	; 0x21
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2240      	movs	r2, #64	; 0x40
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6a3a      	ldr	r2, [r7, #32]
 8003436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a4d      	ldr	r2, [pc, #308]	; (8003580 <HAL_I2C_Mem_Write+0x1f0>)
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800344e:	88f8      	ldrh	r0, [r7, #6]
 8003450:	893a      	ldrh	r2, [r7, #8]
 8003452:	8979      	ldrh	r1, [r7, #10]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9301      	str	r3, [sp, #4]
 8003458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	4603      	mov	r3, r0
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fab6 	bl	80039d0 <I2C_RequestMemoryWrite>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d052      	beq.n	8003510 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e081      	b.n	8003572 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fd00 	bl	8003e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00d      	beq.n	800349a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b04      	cmp	r3, #4
 8003484:	d107      	bne.n	8003496 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e06b      	b.n	8003572 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	781a      	ldrb	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d11b      	bne.n	8003510 <HAL_I2C_Mem_Write+0x180>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d017      	beq.n	8003510 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	781a      	ldrb	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1aa      	bne.n	800346e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fcec 	bl	8003efa <I2C_WaitOnBTFFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00d      	beq.n	8003544 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	2b04      	cmp	r3, #4
 800352e:	d107      	bne.n	8003540 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e016      	b.n	8003572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	e000      	b.n	8003572 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003570:	2302      	movs	r3, #2
  }
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	00100002 	.word	0x00100002
 8003580:	ffff0000 	.word	0xffff0000

08003584 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08c      	sub	sp, #48	; 0x30
 8003588:	af02      	add	r7, sp, #8
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	4603      	mov	r3, r0
 8003594:	817b      	strh	r3, [r7, #10]
 8003596:	460b      	mov	r3, r1
 8003598:	813b      	strh	r3, [r7, #8]
 800359a:	4613      	mov	r3, r2
 800359c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800359e:	f7ff facb 	bl	8002b38 <HAL_GetTick>
 80035a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	f040 8208 	bne.w	80039c2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2319      	movs	r3, #25
 80035b8:	2201      	movs	r2, #1
 80035ba:	497b      	ldr	r1, [pc, #492]	; (80037a8 <HAL_I2C_Mem_Read+0x224>)
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 fb85 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80035c8:	2302      	movs	r3, #2
 80035ca:	e1fb      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_I2C_Mem_Read+0x56>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e1f4      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d007      	beq.n	8003600 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2222      	movs	r2, #34	; 0x22
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2240      	movs	r2, #64	; 0x40
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003630:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a5b      	ldr	r2, [pc, #364]	; (80037ac <HAL_I2C_Mem_Read+0x228>)
 8003640:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003642:	88f8      	ldrh	r0, [r7, #6]
 8003644:	893a      	ldrh	r2, [r7, #8]
 8003646:	8979      	ldrh	r1, [r7, #10]
 8003648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fa52 	bl	8003afc <I2C_RequestMemoryRead>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1b0      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003666:	2b00      	cmp	r3, #0
 8003668:	d113      	bne.n	8003692 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366a:	2300      	movs	r3, #0
 800366c:	623b      	str	r3, [r7, #32]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	623b      	str	r3, [r7, #32]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	623b      	str	r3, [r7, #32]
 800367e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e184      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	2b01      	cmp	r3, #1
 8003698:	d11b      	bne.n	80036d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e164      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d11b      	bne.n	8003712 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	61bb      	str	r3, [r7, #24]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	61bb      	str	r3, [r7, #24]
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	e144      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003712:	2300      	movs	r3, #0
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	617b      	str	r3, [r7, #20]
 8003726:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003728:	e138      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b03      	cmp	r3, #3
 8003730:	f200 80f1 	bhi.w	8003916 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003738:	2b01      	cmp	r3, #1
 800373a:	d123      	bne.n	8003784 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f000 fc1b 	bl	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e139      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003782:	e10b      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003788:	2b02      	cmp	r3, #2
 800378a:	d14e      	bne.n	800382a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003792:	2200      	movs	r2, #0
 8003794:	4906      	ldr	r1, [pc, #24]	; (80037b0 <HAL_I2C_Mem_Read+0x22c>)
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 fa98 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d008      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e10e      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
 80037a6:	bf00      	nop
 80037a8:	00100002 	.word	0x00100002
 80037ac:	ffff0000 	.word	0xffff0000
 80037b0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	3b01      	subs	r3, #1
 80037f0:	b29a      	uxth	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b01      	subs	r3, #1
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003828:	e0b8      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003830:	2200      	movs	r2, #0
 8003832:	4966      	ldr	r1, [pc, #408]	; (80039cc <HAL_I2C_Mem_Read+0x448>)
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 fa49 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0bf      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	1c5a      	adds	r2, r3, #1
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	9300      	str	r3, [sp, #0]
 800388a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800388c:	2200      	movs	r2, #0
 800388e:	494f      	ldr	r1, [pc, #316]	; (80039cc <HAL_I2C_Mem_Read+0x448>)
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 fa1b 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e091      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29b      	uxth	r3, r3
 80038da:	3b01      	subs	r3, #1
 80038dc:	b29a      	uxth	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	3b01      	subs	r3, #1
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390a:	b29b      	uxth	r3, r3
 800390c:	3b01      	subs	r3, #1
 800390e:	b29a      	uxth	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003914:	e042      	b.n	800399c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fb2e 	bl	8003f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e04c      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	691a      	ldr	r2, [r3, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	3b01      	subs	r3, #1
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b04      	cmp	r3, #4
 8003968:	d118      	bne.n	800399c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f aec2 	bne.w	800372a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e000      	b.n	80039c4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039c2:	2302      	movs	r3, #2
  }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	00010004 	.word	0x00010004

080039d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af02      	add	r7, sp, #8
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	4608      	mov	r0, r1
 80039da:	4611      	mov	r1, r2
 80039dc:	461a      	mov	r2, r3
 80039de:	4603      	mov	r3, r0
 80039e0:	817b      	strh	r3, [r7, #10]
 80039e2:	460b      	mov	r3, r1
 80039e4:	813b      	strh	r3, [r7, #8]
 80039e6:	4613      	mov	r3, r2
 80039e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f960 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d103      	bne.n	8003a2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e05f      	b.n	8003aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a2e:	897b      	ldrh	r3, [r7, #10]
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	6a3a      	ldr	r2, [r7, #32]
 8003a42:	492d      	ldr	r1, [pc, #180]	; (8003af8 <I2C_RequestMemoryWrite+0x128>)
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f000 f998 	bl	8003d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e04c      	b.n	8003aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a6c:	6a39      	ldr	r1, [r7, #32]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fa02 	bl	8003e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00d      	beq.n	8003a96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	2b04      	cmp	r3, #4
 8003a80:	d107      	bne.n	8003a92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e02b      	b.n	8003aee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d105      	bne.n	8003aa8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	611a      	str	r2, [r3, #16]
 8003aa6:	e021      	b.n	8003aec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003aa8:	893b      	ldrh	r3, [r7, #8]
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab8:	6a39      	ldr	r1, [r7, #32]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f9dc 	bl	8003e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00d      	beq.n	8003ae2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d107      	bne.n	8003ade <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003adc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e005      	b.n	8003aee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae2:	893b      	ldrh	r3, [r7, #8]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	00010002 	.word	0x00010002

08003afc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b088      	sub	sp, #32
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	4608      	mov	r0, r1
 8003b06:	4611      	mov	r1, r2
 8003b08:	461a      	mov	r2, r3
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	817b      	strh	r3, [r7, #10]
 8003b0e:	460b      	mov	r3, r1
 8003b10:	813b      	strh	r3, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f8c2 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00d      	beq.n	8003b6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b5c:	d103      	bne.n	8003b66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0aa      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b6a:	897b      	ldrh	r3, [r7, #10]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	4952      	ldr	r1, [pc, #328]	; (8003cc8 <I2C_RequestMemoryRead+0x1cc>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f8fa 	bl	8003d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e097      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b90:	2300      	movs	r3, #0
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f964 	bl	8003e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00d      	beq.n	8003bd2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d107      	bne.n	8003bce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e076      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d105      	bne.n	8003be4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd8:	893b      	ldrh	r3, [r7, #8]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	611a      	str	r2, [r3, #16]
 8003be2:	e021      	b.n	8003c28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003be4:	893b      	ldrh	r3, [r7, #8]
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 f93e 	bl	8003e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00d      	beq.n	8003c1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d107      	bne.n	8003c1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e050      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1e:	893b      	ldrh	r3, [r7, #8]
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 f923 	bl	8003e78 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e035      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 f82b 	bl	8003ccc <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8a:	d103      	bne.n	8003c94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e013      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c98:	897b      	ldrh	r3, [r7, #10]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	6a3a      	ldr	r2, [r7, #32]
 8003cac:	4906      	ldr	r1, [pc, #24]	; (8003cc8 <I2C_RequestMemoryRead+0x1cc>)
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f000 f863 	bl	8003d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	00010002 	.word	0x00010002

08003ccc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	603b      	str	r3, [r7, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cdc:	e025      	b.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce4:	d021      	beq.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce6:	f7fe ff27 	bl	8002b38 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d302      	bcc.n	8003cfc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d116      	bne.n	8003d2a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	f043 0220 	orr.w	r2, r3, #32
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e023      	b.n	8003d72 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	0c1b      	lsrs	r3, r3, #16
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10d      	bne.n	8003d50 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	43da      	mvns	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bf0c      	ite	eq
 8003d46:	2301      	moveq	r3, #1
 8003d48:	2300      	movne	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	e00c      	b.n	8003d6a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d0b6      	beq.n	8003cde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	60f8      	str	r0, [r7, #12]
 8003d82:	60b9      	str	r1, [r7, #8]
 8003d84:	607a      	str	r2, [r7, #4]
 8003d86:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d88:	e051      	b.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d98:	d123      	bne.n	8003de2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003db2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	f043 0204 	orr.w	r2, r3, #4
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e046      	b.n	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d021      	beq.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dea:	f7fe fea5 	bl	8002b38 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d302      	bcc.n	8003e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d116      	bne.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f043 0220 	orr.w	r2, r3, #32
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e020      	b.n	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d10c      	bne.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	43da      	mvns	r2, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	2300      	moveq	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e00b      	b.n	8003e6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	43da      	mvns	r2, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	bf14      	ite	ne
 8003e64:	2301      	movne	r3, #1
 8003e66:	2300      	moveq	r3, #0
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d18d      	bne.n	8003d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e84:	e02d      	b.n	8003ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e86:	68f8      	ldr	r0, [r7, #12]
 8003e88:	f000 f8ce 	bl	8004028 <I2C_IsAcknowledgeFailed>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e02d      	b.n	8003ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9c:	d021      	beq.n	8003ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fe fe4b 	bl	8002b38 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d116      	bne.n	8003ee2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e007      	b.n	8003ef2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eec:	2b80      	cmp	r3, #128	; 0x80
 8003eee:	d1ca      	bne.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f06:	e02d      	b.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 f88d 	bl	8004028 <I2C_IsAcknowledgeFailed>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e02d      	b.n	8003f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1e:	d021      	beq.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f20:	f7fe fe0a 	bl	8002b38 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d302      	bcc.n	8003f36 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d116      	bne.n	8003f64 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	f043 0220 	orr.w	r2, r3, #32
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e007      	b.n	8003f74 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0304 	and.w	r3, r3, #4
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d1ca      	bne.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f88:	e042      	b.n	8004010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	f003 0310 	and.w	r3, r3, #16
 8003f94:	2b10      	cmp	r3, #16
 8003f96:	d119      	bne.n	8003fcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0210 	mvn.w	r2, #16
 8003fa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2220      	movs	r2, #32
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e029      	b.n	8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fcc:	f7fe fdb4 	bl	8002b38 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d302      	bcc.n	8003fe2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d116      	bne.n	8004010 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	f043 0220 	orr.w	r2, r3, #32
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e007      	b.n	8004020 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d1b5      	bne.n	8003f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403e:	d11b      	bne.n	8004078 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004048:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004064:	f043 0204 	orr.w	r2, r3, #4
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
	...

08004088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e25b      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d075      	beq.n	8004192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040a6:	4ba3      	ldr	r3, [pc, #652]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 030c 	and.w	r3, r3, #12
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d00c      	beq.n	80040cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b2:	4ba0      	ldr	r3, [pc, #640]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d112      	bne.n	80040e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040be:	4b9d      	ldr	r3, [pc, #628]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040ca:	d10b      	bne.n	80040e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040cc:	4b99      	ldr	r3, [pc, #612]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d05b      	beq.n	8004190 <HAL_RCC_OscConfig+0x108>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d157      	bne.n	8004190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e236      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d106      	bne.n	80040fc <HAL_RCC_OscConfig+0x74>
 80040ee:	4b91      	ldr	r3, [pc, #580]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a90      	ldr	r2, [pc, #576]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e01d      	b.n	8004138 <HAL_RCC_OscConfig+0xb0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x98>
 8004106:	4b8b      	ldr	r3, [pc, #556]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a8a      	ldr	r2, [pc, #552]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 800410c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	4b88      	ldr	r3, [pc, #544]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a87      	ldr	r2, [pc, #540]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	6013      	str	r3, [r2, #0]
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0xb0>
 8004120:	4b84      	ldr	r3, [pc, #528]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a83      	ldr	r2, [pc, #524]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	4b81      	ldr	r3, [pc, #516]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a80      	ldr	r2, [pc, #512]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d013      	beq.n	8004168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004140:	f7fe fcfa 	bl	8002b38 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004148:	f7fe fcf6 	bl	8002b38 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b64      	cmp	r3, #100	; 0x64
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e1fb      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800415a:	4b76      	ldr	r3, [pc, #472]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0xc0>
 8004166:	e014      	b.n	8004192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004168:	f7fe fce6 	bl	8002b38 <HAL_GetTick>
 800416c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800416e:	e008      	b.n	8004182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004170:	f7fe fce2 	bl	8002b38 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	2b64      	cmp	r3, #100	; 0x64
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e1e7      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004182:	4b6c      	ldr	r3, [pc, #432]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1f0      	bne.n	8004170 <HAL_RCC_OscConfig+0xe8>
 800418e:	e000      	b.n	8004192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d063      	beq.n	8004266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800419e:	4b65      	ldr	r3, [pc, #404]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 030c 	and.w	r3, r3, #12
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00b      	beq.n	80041c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041aa:	4b62      	ldr	r3, [pc, #392]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d11c      	bne.n	80041f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041b6:	4b5f      	ldr	r3, [pc, #380]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	4b5c      	ldr	r3, [pc, #368]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d005      	beq.n	80041da <HAL_RCC_OscConfig+0x152>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e1bb      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041da:	4b56      	ldr	r3, [pc, #344]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	4952      	ldr	r1, [pc, #328]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ee:	e03a      	b.n	8004266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f8:	4b4f      	ldr	r3, [pc, #316]	; (8004338 <HAL_RCC_OscConfig+0x2b0>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fe fc9b 	bl	8002b38 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004206:	f7fe fc97 	bl	8002b38 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e19c      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004218:	4b46      	ldr	r3, [pc, #280]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0f0      	beq.n	8004206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b43      	ldr	r3, [pc, #268]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4940      	ldr	r1, [pc, #256]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	4313      	orrs	r3, r2
 8004236:	600b      	str	r3, [r1, #0]
 8004238:	e015      	b.n	8004266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <HAL_RCC_OscConfig+0x2b0>)
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fe fc7a 	bl	8002b38 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004248:	f7fe fc76 	bl	8002b38 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e17b      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800425a:	4b36      	ldr	r3, [pc, #216]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d030      	beq.n	80042d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d016      	beq.n	80042a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <HAL_RCC_OscConfig+0x2b4>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fe fc5a 	bl	8002b38 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004288:	f7fe fc56 	bl	8002b38 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e15b      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0f0      	beq.n	8004288 <HAL_RCC_OscConfig+0x200>
 80042a6:	e015      	b.n	80042d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a8:	4b24      	ldr	r3, [pc, #144]	; (800433c <HAL_RCC_OscConfig+0x2b4>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ae:	f7fe fc43 	bl	8002b38 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b6:	f7fe fc3f 	bl	8002b38 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e144      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d1f0      	bne.n	80042b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80a0 	beq.w	8004422 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e6:	4b13      	ldr	r3, [pc, #76]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	4a0e      	ldr	r2, [pc, #56]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 80042fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004300:	6413      	str	r3, [r2, #64]	; 0x40
 8004302:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <HAL_RCC_OscConfig+0x2ac>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <HAL_RCC_OscConfig+0x2b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431a:	2b00      	cmp	r3, #0
 800431c:	d121      	bne.n	8004362 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <HAL_RCC_OscConfig+0x2b8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a07      	ldr	r2, [pc, #28]	; (8004340 <HAL_RCC_OscConfig+0x2b8>)
 8004324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432a:	f7fe fc05 	bl	8002b38 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	e011      	b.n	8004356 <HAL_RCC_OscConfig+0x2ce>
 8004332:	bf00      	nop
 8004334:	40023800 	.word	0x40023800
 8004338:	42470000 	.word	0x42470000
 800433c:	42470e80 	.word	0x42470e80
 8004340:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004344:	f7fe fbf8 	bl	8002b38 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e0fd      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004356:	4b81      	ldr	r3, [pc, #516]	; (800455c <HAL_RCC_OscConfig+0x4d4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800435e:	2b00      	cmp	r3, #0
 8004360:	d0f0      	beq.n	8004344 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d106      	bne.n	8004378 <HAL_RCC_OscConfig+0x2f0>
 800436a:	4b7d      	ldr	r3, [pc, #500]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 800436c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436e:	4a7c      	ldr	r2, [pc, #496]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6713      	str	r3, [r2, #112]	; 0x70
 8004376:	e01c      	b.n	80043b2 <HAL_RCC_OscConfig+0x32a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b05      	cmp	r3, #5
 800437e:	d10c      	bne.n	800439a <HAL_RCC_OscConfig+0x312>
 8004380:	4b77      	ldr	r3, [pc, #476]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a76      	ldr	r2, [pc, #472]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004386:	f043 0304 	orr.w	r3, r3, #4
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	4b74      	ldr	r3, [pc, #464]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a73      	ldr	r2, [pc, #460]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004392:	f043 0301 	orr.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	e00b      	b.n	80043b2 <HAL_RCC_OscConfig+0x32a>
 800439a:	4b71      	ldr	r3, [pc, #452]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 800439c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439e:	4a70      	ldr	r2, [pc, #448]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	6713      	str	r3, [r2, #112]	; 0x70
 80043a6:	4b6e      	ldr	r3, [pc, #440]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 80043a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043aa:	4a6d      	ldr	r2, [pc, #436]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 80043ac:	f023 0304 	bic.w	r3, r3, #4
 80043b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d015      	beq.n	80043e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ba:	f7fe fbbd 	bl	8002b38 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fe fbb9 	bl	8002b38 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0bc      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	4b61      	ldr	r3, [pc, #388]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0ee      	beq.n	80043c2 <HAL_RCC_OscConfig+0x33a>
 80043e4:	e014      	b.n	8004410 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fe fba7 	bl	8002b38 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe fba3 	bl	8002b38 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e0a6      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	4b56      	ldr	r3, [pc, #344]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1ee      	bne.n	80043ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004410:	7dfb      	ldrb	r3, [r7, #23]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d105      	bne.n	8004422 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004416:	4b52      	ldr	r3, [pc, #328]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a51      	ldr	r2, [pc, #324]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 800441c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8092 	beq.w	8004550 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800442c:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 030c 	and.w	r3, r3, #12
 8004434:	2b08      	cmp	r3, #8
 8004436:	d05c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b02      	cmp	r3, #2
 800443e:	d141      	bne.n	80044c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004440:	4b48      	ldr	r3, [pc, #288]	; (8004564 <HAL_RCC_OscConfig+0x4dc>)
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004446:	f7fe fb77 	bl	8002b38 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe fb73 	bl	8002b38 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e078      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004460:	4b3f      	ldr	r3, [pc, #252]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	431a      	orrs	r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	019b      	lsls	r3, r3, #6
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	3b01      	subs	r3, #1
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	431a      	orrs	r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	061b      	lsls	r3, r3, #24
 8004490:	4933      	ldr	r1, [pc, #204]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004496:	4b33      	ldr	r3, [pc, #204]	; (8004564 <HAL_RCC_OscConfig+0x4dc>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449c:	f7fe fb4c 	bl	8002b38 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fe fb48 	bl	8002b38 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e04d      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x41c>
 80044c2:	e045      	b.n	8004550 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c4:	4b27      	ldr	r3, [pc, #156]	; (8004564 <HAL_RCC_OscConfig+0x4dc>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ca:	f7fe fb35 	bl	8002b38 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d2:	f7fe fb31 	bl	8002b38 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e036      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e4:	4b1e      	ldr	r3, [pc, #120]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f0      	bne.n	80044d2 <HAL_RCC_OscConfig+0x44a>
 80044f0:	e02e      	b.n	8004550 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	699b      	ldr	r3, [r3, #24]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e029      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_RCC_OscConfig+0x4d8>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	429a      	cmp	r2, r3
 8004510:	d11c      	bne.n	800454c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d115      	bne.n	800454c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004526:	4013      	ands	r3, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800452c:	4293      	cmp	r3, r2
 800452e:	d10d      	bne.n	800454c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d106      	bne.n	800454c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e000      	b.n	8004552 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40007000 	.word	0x40007000
 8004560:	40023800 	.word	0x40023800
 8004564:	42470060 	.word	0x42470060

08004568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d101      	bne.n	800457c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0cc      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800457c:	4b68      	ldr	r3, [pc, #416]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d90c      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800458a:	4b65      	ldr	r3, [pc, #404]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b63      	ldr	r3, [pc, #396]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b8      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045bc:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	494d      	ldr	r1, [pc, #308]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d044      	beq.n	8004688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d119      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d003      	beq.n	8004626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004622:	2b03      	cmp	r3, #3
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004626:	4b3f      	ldr	r3, [pc, #252]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d109      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e067      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b37      	ldr	r3, [pc, #220]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4934      	ldr	r1, [pc, #208]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004658:	f7fe fa6e 	bl	8002b38 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fe fa6a 	bl	8002b38 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e04f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004688:	4b25      	ldr	r3, [pc, #148]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 030f 	and.w	r3, r3, #15
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d20c      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004696:	4b22      	ldr	r3, [pc, #136]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e032      	b.n	8004716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4916      	ldr	r1, [pc, #88]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f889 	bl	8004804 <HAL_RCC_GetSysClockFreq>
 80046f2:	4601      	mov	r1, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	5cd3      	ldrb	r3, [r2, r3]
 8004702:	fa21 f303 	lsr.w	r3, r1, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1c8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe f9ce 	bl	8002ab0 <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40023c00 	.word	0x40023c00
 8004724:	40023800 	.word	0x40023800
 8004728:	08005664 	.word	0x08005664
 800472c:	20000000 	.word	0x20000000
 8004730:	20000004 	.word	0x20000004

08004734 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	; 0x30
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d129      	bne.n	800479a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004746:	2300      	movs	r3, #0
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	4a2a      	ldr	r2, [pc, #168]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6313      	str	r3, [r2, #48]	; 0x30
 8004756:	4b28      	ldr	r3, [pc, #160]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004768:	2302      	movs	r3, #2
 800476a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800476c:	2303      	movs	r3, #3
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004770:	2300      	movs	r3, #0
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004774:	2300      	movs	r3, #0
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004778:	f107 031c 	add.w	r3, r7, #28
 800477c:	4619      	mov	r1, r3
 800477e:	481f      	ldr	r0, [pc, #124]	; (80047fc <HAL_RCC_MCOConfig+0xc8>)
 8004780:	f7fe fb1a 	bl	8002db8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800478c:	68b9      	ldr	r1, [r7, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	430b      	orrs	r3, r1
 8004792:	4919      	ldr	r1, [pc, #100]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 8004794:	4313      	orrs	r3, r2
 8004796:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004798:	e029      	b.n	80047ee <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800479a:	2300      	movs	r3, #0
 800479c:	617b      	str	r3, [r7, #20]
 800479e:	4b16      	ldr	r3, [pc, #88]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 80047a4:	f043 0304 	orr.w	r3, r3, #4
 80047a8:	6313      	str	r3, [r2, #48]	; 0x30
 80047aa:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	617b      	str	r3, [r7, #20]
 80047b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80047b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047bc:	2302      	movs	r3, #2
 80047be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047c0:	2303      	movs	r3, #3
 80047c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80047c8:	2300      	movs	r3, #0
 80047ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80047cc:	f107 031c 	add.w	r3, r7, #28
 80047d0:	4619      	mov	r1, r3
 80047d2:	480b      	ldr	r0, [pc, #44]	; (8004800 <HAL_RCC_MCOConfig+0xcc>)
 80047d4:	f7fe faf0 	bl	8002db8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	00d9      	lsls	r1, r3, #3
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	430b      	orrs	r3, r1
 80047e8:	4903      	ldr	r1, [pc, #12]	; (80047f8 <HAL_RCC_MCOConfig+0xc4>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
}
 80047ee:	bf00      	nop
 80047f0:	3730      	adds	r7, #48	; 0x30
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
 80047fc:	40020000 	.word	0x40020000
 8004800:	40020800 	.word	0x40020800

08004804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	2300      	movs	r3, #0
 8004814:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800481a:	4b63      	ldr	r3, [pc, #396]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f003 030c 	and.w	r3, r3, #12
 8004822:	2b04      	cmp	r3, #4
 8004824:	d007      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0x32>
 8004826:	2b08      	cmp	r3, #8
 8004828:	d008      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0x38>
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 80b4 	bne.w	8004998 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004830:	4b5e      	ldr	r3, [pc, #376]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004832:	60bb      	str	r3, [r7, #8]
       break;
 8004834:	e0b3      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004836:	4b5e      	ldr	r3, [pc, #376]	; (80049b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004838:	60bb      	str	r3, [r7, #8]
      break;
 800483a:	e0b0      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800483c:	4b5a      	ldr	r3, [pc, #360]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004846:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d04a      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004852:	4b55      	ldr	r3, [pc, #340]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	099b      	lsrs	r3, r3, #6
 8004858:	f04f 0400 	mov.w	r4, #0
 800485c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	ea03 0501 	and.w	r5, r3, r1
 8004868:	ea04 0602 	and.w	r6, r4, r2
 800486c:	4629      	mov	r1, r5
 800486e:	4632      	mov	r2, r6
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	f04f 0400 	mov.w	r4, #0
 8004878:	0154      	lsls	r4, r2, #5
 800487a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800487e:	014b      	lsls	r3, r1, #5
 8004880:	4619      	mov	r1, r3
 8004882:	4622      	mov	r2, r4
 8004884:	1b49      	subs	r1, r1, r5
 8004886:	eb62 0206 	sbc.w	r2, r2, r6
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	f04f 0400 	mov.w	r4, #0
 8004892:	0194      	lsls	r4, r2, #6
 8004894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004898:	018b      	lsls	r3, r1, #6
 800489a:	1a5b      	subs	r3, r3, r1
 800489c:	eb64 0402 	sbc.w	r4, r4, r2
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	f04f 0200 	mov.w	r2, #0
 80048a8:	00e2      	lsls	r2, r4, #3
 80048aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80048ae:	00d9      	lsls	r1, r3, #3
 80048b0:	460b      	mov	r3, r1
 80048b2:	4614      	mov	r4, r2
 80048b4:	195b      	adds	r3, r3, r5
 80048b6:	eb44 0406 	adc.w	r4, r4, r6
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	0262      	lsls	r2, r4, #9
 80048c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80048c8:	0259      	lsls	r1, r3, #9
 80048ca:	460b      	mov	r3, r1
 80048cc:	4614      	mov	r4, r2
 80048ce:	4618      	mov	r0, r3
 80048d0:	4621      	mov	r1, r4
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f04f 0400 	mov.w	r4, #0
 80048d8:	461a      	mov	r2, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	f7fb fc7a 	bl	80001d4 <__aeabi_uldivmod>
 80048e0:	4603      	mov	r3, r0
 80048e2:	460c      	mov	r4, r1
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	e049      	b.n	800497c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048e8:	4b2f      	ldr	r3, [pc, #188]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	099b      	lsrs	r3, r3, #6
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	ea03 0501 	and.w	r5, r3, r1
 80048fe:	ea04 0602 	and.w	r6, r4, r2
 8004902:	4629      	mov	r1, r5
 8004904:	4632      	mov	r2, r6
 8004906:	f04f 0300 	mov.w	r3, #0
 800490a:	f04f 0400 	mov.w	r4, #0
 800490e:	0154      	lsls	r4, r2, #5
 8004910:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004914:	014b      	lsls	r3, r1, #5
 8004916:	4619      	mov	r1, r3
 8004918:	4622      	mov	r2, r4
 800491a:	1b49      	subs	r1, r1, r5
 800491c:	eb62 0206 	sbc.w	r2, r2, r6
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	f04f 0400 	mov.w	r4, #0
 8004928:	0194      	lsls	r4, r2, #6
 800492a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	1a5b      	subs	r3, r3, r1
 8004932:	eb64 0402 	sbc.w	r4, r4, r2
 8004936:	f04f 0100 	mov.w	r1, #0
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	00e2      	lsls	r2, r4, #3
 8004940:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004944:	00d9      	lsls	r1, r3, #3
 8004946:	460b      	mov	r3, r1
 8004948:	4614      	mov	r4, r2
 800494a:	195b      	adds	r3, r3, r5
 800494c:	eb44 0406 	adc.w	r4, r4, r6
 8004950:	f04f 0100 	mov.w	r1, #0
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	02a2      	lsls	r2, r4, #10
 800495a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800495e:	0299      	lsls	r1, r3, #10
 8004960:	460b      	mov	r3, r1
 8004962:	4614      	mov	r4, r2
 8004964:	4618      	mov	r0, r3
 8004966:	4621      	mov	r1, r4
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f04f 0400 	mov.w	r4, #0
 800496e:	461a      	mov	r2, r3
 8004970:	4623      	mov	r3, r4
 8004972:	f7fb fc2f 	bl	80001d4 <__aeabi_uldivmod>
 8004976:	4603      	mov	r3, r0
 8004978:	460c      	mov	r4, r1
 800497a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	0c1b      	lsrs	r3, r3, #16
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	3301      	adds	r3, #1
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	60bb      	str	r3, [r7, #8]
      break;
 8004996:	e002      	b.n	800499e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004998:	4b04      	ldr	r3, [pc, #16]	; (80049ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800499a:	60bb      	str	r3, [r7, #8]
      break;
 800499c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800499e:	68bb      	ldr	r3, [r7, #8]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	00f42400 	.word	0x00f42400
 80049b0:	007a1200 	.word	0x007a1200

080049b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049ba:	681b      	ldr	r3, [r3, #0]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000000 	.word	0x20000000

080049cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049d0:	f7ff fff0 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049d4:	4601      	mov	r1, r0
 80049d6:	4b05      	ldr	r3, [pc, #20]	; (80049ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	0a9b      	lsrs	r3, r3, #10
 80049dc:	f003 0307 	and.w	r3, r3, #7
 80049e0:	4a03      	ldr	r2, [pc, #12]	; (80049f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40023800 	.word	0x40023800
 80049f0:	08005674 	.word	0x08005674

080049f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049f8:	f7ff ffdc 	bl	80049b4 <HAL_RCC_GetHCLKFreq>
 80049fc:	4601      	mov	r1, r0
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	0b5b      	lsrs	r3, r3, #13
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	4a03      	ldr	r2, [pc, #12]	; (8004a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a0a:	5cd3      	ldrb	r3, [r2, r3]
 8004a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40023800 	.word	0x40023800
 8004a18:	08005674 	.word	0x08005674

08004a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e056      	b.n	8004adc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d106      	bne.n	8004a4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fd fe75 	bl	8002738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	ea42 0103 	orr.w	r1, r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	0c1b      	lsrs	r3, r3, #16
 8004aac:	f003 0104 	and.w	r1, r3, #4
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e03f      	b.n	8004b76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d106      	bne.n	8004b10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7fd ff3c 	bl	8002988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2224      	movs	r2, #36	; 0x24
 8004b14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f90b 	bl	8004d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695a      	ldr	r2, [r3, #20]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b088      	sub	sp, #32
 8004b82:	af02      	add	r7, sp, #8
 8004b84:	60f8      	str	r0, [r7, #12]
 8004b86:	60b9      	str	r1, [r7, #8]
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	f040 8083 	bne.w	8004ca6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <HAL_UART_Transmit+0x2e>
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e07b      	b.n	8004ca8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Transmit+0x40>
 8004bba:	2302      	movs	r3, #2
 8004bbc:	e074      	b.n	8004ca8 <HAL_UART_Transmit+0x12a>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2221      	movs	r2, #33	; 0x21
 8004bd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bd4:	f7fd ffb0 	bl	8002b38 <HAL_GetTick>
 8004bd8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	88fa      	ldrh	r2, [r7, #6]
 8004bde:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	88fa      	ldrh	r2, [r7, #6]
 8004be4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004bee:	e042      	b.n	8004c76 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c06:	d122      	bne.n	8004c4e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f84c 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e042      	b.n	8004ca8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	3302      	adds	r3, #2
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	e017      	b.n	8004c76 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	e013      	b.n	8004c76 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	9300      	str	r3, [sp, #0]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	; 0x80
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f829 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e01f      	b.n	8004ca8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	60ba      	str	r2, [r7, #8]
 8004c6e:	781a      	ldrb	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1b7      	bne.n	8004bf0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2200      	movs	r2, #0
 8004c88:	2140      	movs	r1, #64	; 0x40
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f810 	bl	8004cb0 <UART_WaitOnFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e006      	b.n	8004ca8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc0:	e02c      	b.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d028      	beq.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd0:	f7fd ff32 	bl	8002b38 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d21d      	bcs.n	8004d1c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004cee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f022 0201 	bic.w	r2, r2, #1
 8004cfe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e00f      	b.n	8004d3c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	4013      	ands	r3, r2
 8004d26:	68ba      	ldr	r2, [r7, #8]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	79fb      	ldrb	r3, [r7, #7]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d0c3      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68da      	ldr	r2, [r3, #12]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d86:	f023 030c 	bic.w	r3, r3, #12
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	430b      	orrs	r3, r1
 8004d92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db2:	f040 818b 	bne.w	80050cc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4ac1      	ldr	r2, [pc, #772]	; (80050c0 <UART_SetConfig+0x37c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d005      	beq.n	8004dcc <UART_SetConfig+0x88>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4abf      	ldr	r2, [pc, #764]	; (80050c4 <UART_SetConfig+0x380>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	f040 80bd 	bne.w	8004f46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7ff fe12 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	461d      	mov	r5, r3
 8004dd6:	f04f 0600 	mov.w	r6, #0
 8004dda:	46a8      	mov	r8, r5
 8004ddc:	46b1      	mov	r9, r6
 8004dde:	eb18 0308 	adds.w	r3, r8, r8
 8004de2:	eb49 0409 	adc.w	r4, r9, r9
 8004de6:	4698      	mov	r8, r3
 8004de8:	46a1      	mov	r9, r4
 8004dea:	eb18 0805 	adds.w	r8, r8, r5
 8004dee:	eb49 0906 	adc.w	r9, r9, r6
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	f04f 0200 	mov.w	r2, #0
 8004dfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004dfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e06:	4688      	mov	r8, r1
 8004e08:	4691      	mov	r9, r2
 8004e0a:	eb18 0005 	adds.w	r0, r8, r5
 8004e0e:	eb49 0106 	adc.w	r1, r9, r6
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	461d      	mov	r5, r3
 8004e18:	f04f 0600 	mov.w	r6, #0
 8004e1c:	196b      	adds	r3, r5, r5
 8004e1e:	eb46 0406 	adc.w	r4, r6, r6
 8004e22:	461a      	mov	r2, r3
 8004e24:	4623      	mov	r3, r4
 8004e26:	f7fb f9d5 	bl	80001d4 <__aeabi_uldivmod>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	461a      	mov	r2, r3
 8004e30:	4ba5      	ldr	r3, [pc, #660]	; (80050c8 <UART_SetConfig+0x384>)
 8004e32:	fba3 2302 	umull	r2, r3, r3, r2
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	461d      	mov	r5, r3
 8004e40:	f04f 0600 	mov.w	r6, #0
 8004e44:	46a9      	mov	r9, r5
 8004e46:	46b2      	mov	sl, r6
 8004e48:	eb19 0309 	adds.w	r3, r9, r9
 8004e4c:	eb4a 040a 	adc.w	r4, sl, sl
 8004e50:	4699      	mov	r9, r3
 8004e52:	46a2      	mov	sl, r4
 8004e54:	eb19 0905 	adds.w	r9, r9, r5
 8004e58:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e5c:	f04f 0100 	mov.w	r1, #0
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e70:	4689      	mov	r9, r1
 8004e72:	4692      	mov	sl, r2
 8004e74:	eb19 0005 	adds.w	r0, r9, r5
 8004e78:	eb4a 0106 	adc.w	r1, sl, r6
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	461d      	mov	r5, r3
 8004e82:	f04f 0600 	mov.w	r6, #0
 8004e86:	196b      	adds	r3, r5, r5
 8004e88:	eb46 0406 	adc.w	r4, r6, r6
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4623      	mov	r3, r4
 8004e90:	f7fb f9a0 	bl	80001d4 <__aeabi_uldivmod>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4b8b      	ldr	r3, [pc, #556]	; (80050c8 <UART_SetConfig+0x384>)
 8004e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	2164      	movs	r1, #100	; 0x64
 8004ea4:	fb01 f303 	mul.w	r3, r1, r3
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	3332      	adds	r3, #50	; 0x32
 8004eae:	4a86      	ldr	r2, [pc, #536]	; (80050c8 <UART_SetConfig+0x384>)
 8004eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ebc:	4498      	add	r8, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	461d      	mov	r5, r3
 8004ec2:	f04f 0600 	mov.w	r6, #0
 8004ec6:	46a9      	mov	r9, r5
 8004ec8:	46b2      	mov	sl, r6
 8004eca:	eb19 0309 	adds.w	r3, r9, r9
 8004ece:	eb4a 040a 	adc.w	r4, sl, sl
 8004ed2:	4699      	mov	r9, r3
 8004ed4:	46a2      	mov	sl, r4
 8004ed6:	eb19 0905 	adds.w	r9, r9, r5
 8004eda:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	f04f 0200 	mov.w	r2, #0
 8004ee6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004eea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004eee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ef2:	4689      	mov	r9, r1
 8004ef4:	4692      	mov	sl, r2
 8004ef6:	eb19 0005 	adds.w	r0, r9, r5
 8004efa:	eb4a 0106 	adc.w	r1, sl, r6
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	461d      	mov	r5, r3
 8004f04:	f04f 0600 	mov.w	r6, #0
 8004f08:	196b      	adds	r3, r5, r5
 8004f0a:	eb46 0406 	adc.w	r4, r6, r6
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4623      	mov	r3, r4
 8004f12:	f7fb f95f 	bl	80001d4 <__aeabi_uldivmod>
 8004f16:	4603      	mov	r3, r0
 8004f18:	460c      	mov	r4, r1
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b6a      	ldr	r3, [pc, #424]	; (80050c8 <UART_SetConfig+0x384>)
 8004f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	2164      	movs	r1, #100	; 0x64
 8004f26:	fb01 f303 	mul.w	r3, r1, r3
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	3332      	adds	r3, #50	; 0x32
 8004f30:	4a65      	ldr	r2, [pc, #404]	; (80050c8 <UART_SetConfig+0x384>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f003 0207 	and.w	r2, r3, #7
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4442      	add	r2, r8
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	e26f      	b.n	8005426 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f46:	f7ff fd41 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8004f4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	461d      	mov	r5, r3
 8004f50:	f04f 0600 	mov.w	r6, #0
 8004f54:	46a8      	mov	r8, r5
 8004f56:	46b1      	mov	r9, r6
 8004f58:	eb18 0308 	adds.w	r3, r8, r8
 8004f5c:	eb49 0409 	adc.w	r4, r9, r9
 8004f60:	4698      	mov	r8, r3
 8004f62:	46a1      	mov	r9, r4
 8004f64:	eb18 0805 	adds.w	r8, r8, r5
 8004f68:	eb49 0906 	adc.w	r9, r9, r6
 8004f6c:	f04f 0100 	mov.w	r1, #0
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f80:	4688      	mov	r8, r1
 8004f82:	4691      	mov	r9, r2
 8004f84:	eb18 0005 	adds.w	r0, r8, r5
 8004f88:	eb49 0106 	adc.w	r1, r9, r6
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	461d      	mov	r5, r3
 8004f92:	f04f 0600 	mov.w	r6, #0
 8004f96:	196b      	adds	r3, r5, r5
 8004f98:	eb46 0406 	adc.w	r4, r6, r6
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4623      	mov	r3, r4
 8004fa0:	f7fb f918 	bl	80001d4 <__aeabi_uldivmod>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	461a      	mov	r2, r3
 8004faa:	4b47      	ldr	r3, [pc, #284]	; (80050c8 <UART_SetConfig+0x384>)
 8004fac:	fba3 2302 	umull	r2, r3, r3, r2
 8004fb0:	095b      	lsrs	r3, r3, #5
 8004fb2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	461d      	mov	r5, r3
 8004fba:	f04f 0600 	mov.w	r6, #0
 8004fbe:	46a9      	mov	r9, r5
 8004fc0:	46b2      	mov	sl, r6
 8004fc2:	eb19 0309 	adds.w	r3, r9, r9
 8004fc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004fca:	4699      	mov	r9, r3
 8004fcc:	46a2      	mov	sl, r4
 8004fce:	eb19 0905 	adds.w	r9, r9, r5
 8004fd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fe6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fea:	4689      	mov	r9, r1
 8004fec:	4692      	mov	sl, r2
 8004fee:	eb19 0005 	adds.w	r0, r9, r5
 8004ff2:	eb4a 0106 	adc.w	r1, sl, r6
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	f04f 0600 	mov.w	r6, #0
 8005000:	196b      	adds	r3, r5, r5
 8005002:	eb46 0406 	adc.w	r4, r6, r6
 8005006:	461a      	mov	r2, r3
 8005008:	4623      	mov	r3, r4
 800500a:	f7fb f8e3 	bl	80001d4 <__aeabi_uldivmod>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	461a      	mov	r2, r3
 8005014:	4b2c      	ldr	r3, [pc, #176]	; (80050c8 <UART_SetConfig+0x384>)
 8005016:	fba3 1302 	umull	r1, r3, r3, r2
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	2164      	movs	r1, #100	; 0x64
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	3332      	adds	r3, #50	; 0x32
 8005028:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <UART_SetConfig+0x384>)
 800502a:	fba2 2303 	umull	r2, r3, r2, r3
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005036:	4498      	add	r8, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	461d      	mov	r5, r3
 800503c:	f04f 0600 	mov.w	r6, #0
 8005040:	46a9      	mov	r9, r5
 8005042:	46b2      	mov	sl, r6
 8005044:	eb19 0309 	adds.w	r3, r9, r9
 8005048:	eb4a 040a 	adc.w	r4, sl, sl
 800504c:	4699      	mov	r9, r3
 800504e:	46a2      	mov	sl, r4
 8005050:	eb19 0905 	adds.w	r9, r9, r5
 8005054:	eb4a 0a06 	adc.w	sl, sl, r6
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005064:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005068:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800506c:	4689      	mov	r9, r1
 800506e:	4692      	mov	sl, r2
 8005070:	eb19 0005 	adds.w	r0, r9, r5
 8005074:	eb4a 0106 	adc.w	r1, sl, r6
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	461d      	mov	r5, r3
 800507e:	f04f 0600 	mov.w	r6, #0
 8005082:	196b      	adds	r3, r5, r5
 8005084:	eb46 0406 	adc.w	r4, r6, r6
 8005088:	461a      	mov	r2, r3
 800508a:	4623      	mov	r3, r4
 800508c:	f7fb f8a2 	bl	80001d4 <__aeabi_uldivmod>
 8005090:	4603      	mov	r3, r0
 8005092:	460c      	mov	r4, r1
 8005094:	461a      	mov	r2, r3
 8005096:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <UART_SetConfig+0x384>)
 8005098:	fba3 1302 	umull	r1, r3, r3, r2
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	2164      	movs	r1, #100	; 0x64
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	00db      	lsls	r3, r3, #3
 80050a8:	3332      	adds	r3, #50	; 0x32
 80050aa:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <UART_SetConfig+0x384>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	095b      	lsrs	r3, r3, #5
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4442      	add	r2, r8
 80050bc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050be:	e1b2      	b.n	8005426 <UART_SetConfig+0x6e2>
 80050c0:	40011000 	.word	0x40011000
 80050c4:	40011400 	.word	0x40011400
 80050c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4ad7      	ldr	r2, [pc, #860]	; (8005430 <UART_SetConfig+0x6ec>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d005      	beq.n	80050e2 <UART_SetConfig+0x39e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4ad6      	ldr	r2, [pc, #856]	; (8005434 <UART_SetConfig+0x6f0>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	f040 80d1 	bne.w	8005284 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050e2:	f7ff fc87 	bl	80049f4 <HAL_RCC_GetPCLK2Freq>
 80050e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	469a      	mov	sl, r3
 80050ec:	f04f 0b00 	mov.w	fp, #0
 80050f0:	46d0      	mov	r8, sl
 80050f2:	46d9      	mov	r9, fp
 80050f4:	eb18 0308 	adds.w	r3, r8, r8
 80050f8:	eb49 0409 	adc.w	r4, r9, r9
 80050fc:	4698      	mov	r8, r3
 80050fe:	46a1      	mov	r9, r4
 8005100:	eb18 080a 	adds.w	r8, r8, sl
 8005104:	eb49 090b 	adc.w	r9, r9, fp
 8005108:	f04f 0100 	mov.w	r1, #0
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005114:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005118:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800511c:	4688      	mov	r8, r1
 800511e:	4691      	mov	r9, r2
 8005120:	eb1a 0508 	adds.w	r5, sl, r8
 8005124:	eb4b 0609 	adc.w	r6, fp, r9
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4619      	mov	r1, r3
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	f04f 0400 	mov.w	r4, #0
 800513a:	0094      	lsls	r4, r2, #2
 800513c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005140:	008b      	lsls	r3, r1, #2
 8005142:	461a      	mov	r2, r3
 8005144:	4623      	mov	r3, r4
 8005146:	4628      	mov	r0, r5
 8005148:	4631      	mov	r1, r6
 800514a:	f7fb f843 	bl	80001d4 <__aeabi_uldivmod>
 800514e:	4603      	mov	r3, r0
 8005150:	460c      	mov	r4, r1
 8005152:	461a      	mov	r2, r3
 8005154:	4bb8      	ldr	r3, [pc, #736]	; (8005438 <UART_SetConfig+0x6f4>)
 8005156:	fba3 2302 	umull	r2, r3, r3, r2
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	469b      	mov	fp, r3
 8005164:	f04f 0c00 	mov.w	ip, #0
 8005168:	46d9      	mov	r9, fp
 800516a:	46e2      	mov	sl, ip
 800516c:	eb19 0309 	adds.w	r3, r9, r9
 8005170:	eb4a 040a 	adc.w	r4, sl, sl
 8005174:	4699      	mov	r9, r3
 8005176:	46a2      	mov	sl, r4
 8005178:	eb19 090b 	adds.w	r9, r9, fp
 800517c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005180:	f04f 0100 	mov.w	r1, #0
 8005184:	f04f 0200 	mov.w	r2, #0
 8005188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800518c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005190:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005194:	4689      	mov	r9, r1
 8005196:	4692      	mov	sl, r2
 8005198:	eb1b 0509 	adds.w	r5, fp, r9
 800519c:	eb4c 060a 	adc.w	r6, ip, sl
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	4619      	mov	r1, r3
 80051a6:	f04f 0200 	mov.w	r2, #0
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	f04f 0400 	mov.w	r4, #0
 80051b2:	0094      	lsls	r4, r2, #2
 80051b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051b8:	008b      	lsls	r3, r1, #2
 80051ba:	461a      	mov	r2, r3
 80051bc:	4623      	mov	r3, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	4631      	mov	r1, r6
 80051c2:	f7fb f807 	bl	80001d4 <__aeabi_uldivmod>
 80051c6:	4603      	mov	r3, r0
 80051c8:	460c      	mov	r4, r1
 80051ca:	461a      	mov	r2, r3
 80051cc:	4b9a      	ldr	r3, [pc, #616]	; (8005438 <UART_SetConfig+0x6f4>)
 80051ce:	fba3 1302 	umull	r1, r3, r3, r2
 80051d2:	095b      	lsrs	r3, r3, #5
 80051d4:	2164      	movs	r1, #100	; 0x64
 80051d6:	fb01 f303 	mul.w	r3, r1, r3
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	3332      	adds	r3, #50	; 0x32
 80051e0:	4a95      	ldr	r2, [pc, #596]	; (8005438 <UART_SetConfig+0x6f4>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ec:	4498      	add	r8, r3
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	469b      	mov	fp, r3
 80051f2:	f04f 0c00 	mov.w	ip, #0
 80051f6:	46d9      	mov	r9, fp
 80051f8:	46e2      	mov	sl, ip
 80051fa:	eb19 0309 	adds.w	r3, r9, r9
 80051fe:	eb4a 040a 	adc.w	r4, sl, sl
 8005202:	4699      	mov	r9, r3
 8005204:	46a2      	mov	sl, r4
 8005206:	eb19 090b 	adds.w	r9, r9, fp
 800520a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800521a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800521e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005222:	4689      	mov	r9, r1
 8005224:	4692      	mov	sl, r2
 8005226:	eb1b 0509 	adds.w	r5, fp, r9
 800522a:	eb4c 060a 	adc.w	r6, ip, sl
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4619      	mov	r1, r3
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	f04f 0400 	mov.w	r4, #0
 8005240:	0094      	lsls	r4, r2, #2
 8005242:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005246:	008b      	lsls	r3, r1, #2
 8005248:	461a      	mov	r2, r3
 800524a:	4623      	mov	r3, r4
 800524c:	4628      	mov	r0, r5
 800524e:	4631      	mov	r1, r6
 8005250:	f7fa ffc0 	bl	80001d4 <__aeabi_uldivmod>
 8005254:	4603      	mov	r3, r0
 8005256:	460c      	mov	r4, r1
 8005258:	461a      	mov	r2, r3
 800525a:	4b77      	ldr	r3, [pc, #476]	; (8005438 <UART_SetConfig+0x6f4>)
 800525c:	fba3 1302 	umull	r1, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	2164      	movs	r1, #100	; 0x64
 8005264:	fb01 f303 	mul.w	r3, r1, r3
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	3332      	adds	r3, #50	; 0x32
 800526e:	4a72      	ldr	r2, [pc, #456]	; (8005438 <UART_SetConfig+0x6f4>)
 8005270:	fba2 2303 	umull	r2, r3, r2, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	f003 020f 	and.w	r2, r3, #15
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4442      	add	r2, r8
 8005280:	609a      	str	r2, [r3, #8]
 8005282:	e0d0      	b.n	8005426 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005284:	f7ff fba2 	bl	80049cc <HAL_RCC_GetPCLK1Freq>
 8005288:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	469a      	mov	sl, r3
 800528e:	f04f 0b00 	mov.w	fp, #0
 8005292:	46d0      	mov	r8, sl
 8005294:	46d9      	mov	r9, fp
 8005296:	eb18 0308 	adds.w	r3, r8, r8
 800529a:	eb49 0409 	adc.w	r4, r9, r9
 800529e:	4698      	mov	r8, r3
 80052a0:	46a1      	mov	r9, r4
 80052a2:	eb18 080a 	adds.w	r8, r8, sl
 80052a6:	eb49 090b 	adc.w	r9, r9, fp
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052be:	4688      	mov	r8, r1
 80052c0:	4691      	mov	r9, r2
 80052c2:	eb1a 0508 	adds.w	r5, sl, r8
 80052c6:	eb4b 0609 	adc.w	r6, fp, r9
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4619      	mov	r1, r3
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	f04f 0400 	mov.w	r4, #0
 80052dc:	0094      	lsls	r4, r2, #2
 80052de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052e2:	008b      	lsls	r3, r1, #2
 80052e4:	461a      	mov	r2, r3
 80052e6:	4623      	mov	r3, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	4631      	mov	r1, r6
 80052ec:	f7fa ff72 	bl	80001d4 <__aeabi_uldivmod>
 80052f0:	4603      	mov	r3, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b50      	ldr	r3, [pc, #320]	; (8005438 <UART_SetConfig+0x6f4>)
 80052f8:	fba3 2302 	umull	r2, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	469b      	mov	fp, r3
 8005306:	f04f 0c00 	mov.w	ip, #0
 800530a:	46d9      	mov	r9, fp
 800530c:	46e2      	mov	sl, ip
 800530e:	eb19 0309 	adds.w	r3, r9, r9
 8005312:	eb4a 040a 	adc.w	r4, sl, sl
 8005316:	4699      	mov	r9, r3
 8005318:	46a2      	mov	sl, r4
 800531a:	eb19 090b 	adds.w	r9, r9, fp
 800531e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005322:	f04f 0100 	mov.w	r1, #0
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800532e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005332:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005336:	4689      	mov	r9, r1
 8005338:	4692      	mov	sl, r2
 800533a:	eb1b 0509 	adds.w	r5, fp, r9
 800533e:	eb4c 060a 	adc.w	r6, ip, sl
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	4619      	mov	r1, r3
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	f04f 0400 	mov.w	r4, #0
 8005354:	0094      	lsls	r4, r2, #2
 8005356:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800535a:	008b      	lsls	r3, r1, #2
 800535c:	461a      	mov	r2, r3
 800535e:	4623      	mov	r3, r4
 8005360:	4628      	mov	r0, r5
 8005362:	4631      	mov	r1, r6
 8005364:	f7fa ff36 	bl	80001d4 <__aeabi_uldivmod>
 8005368:	4603      	mov	r3, r0
 800536a:	460c      	mov	r4, r1
 800536c:	461a      	mov	r2, r3
 800536e:	4b32      	ldr	r3, [pc, #200]	; (8005438 <UART_SetConfig+0x6f4>)
 8005370:	fba3 1302 	umull	r1, r3, r3, r2
 8005374:	095b      	lsrs	r3, r3, #5
 8005376:	2164      	movs	r1, #100	; 0x64
 8005378:	fb01 f303 	mul.w	r3, r1, r3
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	011b      	lsls	r3, r3, #4
 8005380:	3332      	adds	r3, #50	; 0x32
 8005382:	4a2d      	ldr	r2, [pc, #180]	; (8005438 <UART_SetConfig+0x6f4>)
 8005384:	fba2 2303 	umull	r2, r3, r2, r3
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800538e:	4498      	add	r8, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	469b      	mov	fp, r3
 8005394:	f04f 0c00 	mov.w	ip, #0
 8005398:	46d9      	mov	r9, fp
 800539a:	46e2      	mov	sl, ip
 800539c:	eb19 0309 	adds.w	r3, r9, r9
 80053a0:	eb4a 040a 	adc.w	r4, sl, sl
 80053a4:	4699      	mov	r9, r3
 80053a6:	46a2      	mov	sl, r4
 80053a8:	eb19 090b 	adds.w	r9, r9, fp
 80053ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053b0:	f04f 0100 	mov.w	r1, #0
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053c4:	4689      	mov	r9, r1
 80053c6:	4692      	mov	sl, r2
 80053c8:	eb1b 0509 	adds.w	r5, fp, r9
 80053cc:	eb4c 060a 	adc.w	r6, ip, sl
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	4619      	mov	r1, r3
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	f04f 0400 	mov.w	r4, #0
 80053e2:	0094      	lsls	r4, r2, #2
 80053e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053e8:	008b      	lsls	r3, r1, #2
 80053ea:	461a      	mov	r2, r3
 80053ec:	4623      	mov	r3, r4
 80053ee:	4628      	mov	r0, r5
 80053f0:	4631      	mov	r1, r6
 80053f2:	f7fa feef 	bl	80001d4 <__aeabi_uldivmod>
 80053f6:	4603      	mov	r3, r0
 80053f8:	460c      	mov	r4, r1
 80053fa:	461a      	mov	r2, r3
 80053fc:	4b0e      	ldr	r3, [pc, #56]	; (8005438 <UART_SetConfig+0x6f4>)
 80053fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	2164      	movs	r1, #100	; 0x64
 8005406:	fb01 f303 	mul.w	r3, r1, r3
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	011b      	lsls	r3, r3, #4
 800540e:	3332      	adds	r3, #50	; 0x32
 8005410:	4a09      	ldr	r2, [pc, #36]	; (8005438 <UART_SetConfig+0x6f4>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	095b      	lsrs	r3, r3, #5
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4442      	add	r2, r8
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	e7ff      	b.n	8005426 <UART_SetConfig+0x6e2>
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005430:	40011000 	.word	0x40011000
 8005434:	40011400 	.word	0x40011400
 8005438:	51eb851f 	.word	0x51eb851f

0800543c <__errno>:
 800543c:	4b01      	ldr	r3, [pc, #4]	; (8005444 <__errno+0x8>)
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	2000000c 	.word	0x2000000c

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	4e0d      	ldr	r6, [pc, #52]	; (8005480 <__libc_init_array+0x38>)
 800544c:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 800544e:	1ba4      	subs	r4, r4, r6
 8005450:	10a4      	asrs	r4, r4, #2
 8005452:	2500      	movs	r5, #0
 8005454:	42a5      	cmp	r5, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	4e0b      	ldr	r6, [pc, #44]	; (8005488 <__libc_init_array+0x40>)
 800545a:	4c0c      	ldr	r4, [pc, #48]	; (800548c <__libc_init_array+0x44>)
 800545c:	f000 f8f6 	bl	800564c <_init>
 8005460:	1ba4      	subs	r4, r4, r6
 8005462:	10a4      	asrs	r4, r4, #2
 8005464:	2500      	movs	r5, #0
 8005466:	42a5      	cmp	r5, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005470:	4798      	blx	r3
 8005472:	3501      	adds	r5, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800547a:	4798      	blx	r3
 800547c:	3501      	adds	r5, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	08005684 	.word	0x08005684
 8005484:	08005684 	.word	0x08005684
 8005488:	08005684 	.word	0x08005684
 800548c:	0800568c 	.word	0x0800568c

08005490 <malloc>:
 8005490:	4b02      	ldr	r3, [pc, #8]	; (800549c <malloc+0xc>)
 8005492:	4601      	mov	r1, r0
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	f000 b86d 	b.w	8005574 <_malloc_r>
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c

080054a0 <free>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <free+0xc>)
 80054a2:	4601      	mov	r1, r0
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f000 b817 	b.w	80054d8 <_free_r>
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <memcpy>:
 80054b0:	b510      	push	{r4, lr}
 80054b2:	1e43      	subs	r3, r0, #1
 80054b4:	440a      	add	r2, r1
 80054b6:	4291      	cmp	r1, r2
 80054b8:	d100      	bne.n	80054bc <memcpy+0xc>
 80054ba:	bd10      	pop	{r4, pc}
 80054bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054c4:	e7f7      	b.n	80054b6 <memcpy+0x6>

080054c6 <memset>:
 80054c6:	4402      	add	r2, r0
 80054c8:	4603      	mov	r3, r0
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d100      	bne.n	80054d0 <memset+0xa>
 80054ce:	4770      	bx	lr
 80054d0:	f803 1b01 	strb.w	r1, [r3], #1
 80054d4:	e7f9      	b.n	80054ca <memset+0x4>
	...

080054d8 <_free_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4605      	mov	r5, r0
 80054dc:	2900      	cmp	r1, #0
 80054de:	d045      	beq.n	800556c <_free_r+0x94>
 80054e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e4:	1f0c      	subs	r4, r1, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfb8      	it	lt
 80054ea:	18e4      	addlt	r4, r4, r3
 80054ec:	f000 f8ac 	bl	8005648 <__malloc_lock>
 80054f0:	4a1f      	ldr	r2, [pc, #124]	; (8005570 <_free_r+0x98>)
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	4610      	mov	r0, r2
 80054f6:	b933      	cbnz	r3, 8005506 <_free_r+0x2e>
 80054f8:	6063      	str	r3, [r4, #4]
 80054fa:	6014      	str	r4, [r2, #0]
 80054fc:	4628      	mov	r0, r5
 80054fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005502:	f000 b8a2 	b.w	800564a <__malloc_unlock>
 8005506:	42a3      	cmp	r3, r4
 8005508:	d90c      	bls.n	8005524 <_free_r+0x4c>
 800550a:	6821      	ldr	r1, [r4, #0]
 800550c:	1862      	adds	r2, r4, r1
 800550e:	4293      	cmp	r3, r2
 8005510:	bf04      	itt	eq
 8005512:	681a      	ldreq	r2, [r3, #0]
 8005514:	685b      	ldreq	r3, [r3, #4]
 8005516:	6063      	str	r3, [r4, #4]
 8005518:	bf04      	itt	eq
 800551a:	1852      	addeq	r2, r2, r1
 800551c:	6022      	streq	r2, [r4, #0]
 800551e:	6004      	str	r4, [r0, #0]
 8005520:	e7ec      	b.n	80054fc <_free_r+0x24>
 8005522:	4613      	mov	r3, r2
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	b10a      	cbz	r2, 800552c <_free_r+0x54>
 8005528:	42a2      	cmp	r2, r4
 800552a:	d9fa      	bls.n	8005522 <_free_r+0x4a>
 800552c:	6819      	ldr	r1, [r3, #0]
 800552e:	1858      	adds	r0, r3, r1
 8005530:	42a0      	cmp	r0, r4
 8005532:	d10b      	bne.n	800554c <_free_r+0x74>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	4401      	add	r1, r0
 8005538:	1858      	adds	r0, r3, r1
 800553a:	4282      	cmp	r2, r0
 800553c:	6019      	str	r1, [r3, #0]
 800553e:	d1dd      	bne.n	80054fc <_free_r+0x24>
 8005540:	6810      	ldr	r0, [r2, #0]
 8005542:	6852      	ldr	r2, [r2, #4]
 8005544:	605a      	str	r2, [r3, #4]
 8005546:	4401      	add	r1, r0
 8005548:	6019      	str	r1, [r3, #0]
 800554a:	e7d7      	b.n	80054fc <_free_r+0x24>
 800554c:	d902      	bls.n	8005554 <_free_r+0x7c>
 800554e:	230c      	movs	r3, #12
 8005550:	602b      	str	r3, [r5, #0]
 8005552:	e7d3      	b.n	80054fc <_free_r+0x24>
 8005554:	6820      	ldr	r0, [r4, #0]
 8005556:	1821      	adds	r1, r4, r0
 8005558:	428a      	cmp	r2, r1
 800555a:	bf04      	itt	eq
 800555c:	6811      	ldreq	r1, [r2, #0]
 800555e:	6852      	ldreq	r2, [r2, #4]
 8005560:	6062      	str	r2, [r4, #4]
 8005562:	bf04      	itt	eq
 8005564:	1809      	addeq	r1, r1, r0
 8005566:	6021      	streq	r1, [r4, #0]
 8005568:	605c      	str	r4, [r3, #4]
 800556a:	e7c7      	b.n	80054fc <_free_r+0x24>
 800556c:	bd38      	pop	{r3, r4, r5, pc}
 800556e:	bf00      	nop
 8005570:	20013758 	.word	0x20013758

08005574 <_malloc_r>:
 8005574:	b570      	push	{r4, r5, r6, lr}
 8005576:	1ccd      	adds	r5, r1, #3
 8005578:	f025 0503 	bic.w	r5, r5, #3
 800557c:	3508      	adds	r5, #8
 800557e:	2d0c      	cmp	r5, #12
 8005580:	bf38      	it	cc
 8005582:	250c      	movcc	r5, #12
 8005584:	2d00      	cmp	r5, #0
 8005586:	4606      	mov	r6, r0
 8005588:	db01      	blt.n	800558e <_malloc_r+0x1a>
 800558a:	42a9      	cmp	r1, r5
 800558c:	d903      	bls.n	8005596 <_malloc_r+0x22>
 800558e:	230c      	movs	r3, #12
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	2000      	movs	r0, #0
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	f000 f857 	bl	8005648 <__malloc_lock>
 800559a:	4a21      	ldr	r2, [pc, #132]	; (8005620 <_malloc_r+0xac>)
 800559c:	6814      	ldr	r4, [r2, #0]
 800559e:	4621      	mov	r1, r4
 80055a0:	b991      	cbnz	r1, 80055c8 <_malloc_r+0x54>
 80055a2:	4c20      	ldr	r4, [pc, #128]	; (8005624 <_malloc_r+0xb0>)
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	b91b      	cbnz	r3, 80055b0 <_malloc_r+0x3c>
 80055a8:	4630      	mov	r0, r6
 80055aa:	f000 f83d 	bl	8005628 <_sbrk_r>
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	4629      	mov	r1, r5
 80055b2:	4630      	mov	r0, r6
 80055b4:	f000 f838 	bl	8005628 <_sbrk_r>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d124      	bne.n	8005606 <_malloc_r+0x92>
 80055bc:	230c      	movs	r3, #12
 80055be:	6033      	str	r3, [r6, #0]
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 f842 	bl	800564a <__malloc_unlock>
 80055c6:	e7e4      	b.n	8005592 <_malloc_r+0x1e>
 80055c8:	680b      	ldr	r3, [r1, #0]
 80055ca:	1b5b      	subs	r3, r3, r5
 80055cc:	d418      	bmi.n	8005600 <_malloc_r+0x8c>
 80055ce:	2b0b      	cmp	r3, #11
 80055d0:	d90f      	bls.n	80055f2 <_malloc_r+0x7e>
 80055d2:	600b      	str	r3, [r1, #0]
 80055d4:	50cd      	str	r5, [r1, r3]
 80055d6:	18cc      	adds	r4, r1, r3
 80055d8:	4630      	mov	r0, r6
 80055da:	f000 f836 	bl	800564a <__malloc_unlock>
 80055de:	f104 000b 	add.w	r0, r4, #11
 80055e2:	1d23      	adds	r3, r4, #4
 80055e4:	f020 0007 	bic.w	r0, r0, #7
 80055e8:	1ac3      	subs	r3, r0, r3
 80055ea:	d0d3      	beq.n	8005594 <_malloc_r+0x20>
 80055ec:	425a      	negs	r2, r3
 80055ee:	50e2      	str	r2, [r4, r3]
 80055f0:	e7d0      	b.n	8005594 <_malloc_r+0x20>
 80055f2:	428c      	cmp	r4, r1
 80055f4:	684b      	ldr	r3, [r1, #4]
 80055f6:	bf16      	itet	ne
 80055f8:	6063      	strne	r3, [r4, #4]
 80055fa:	6013      	streq	r3, [r2, #0]
 80055fc:	460c      	movne	r4, r1
 80055fe:	e7eb      	b.n	80055d8 <_malloc_r+0x64>
 8005600:	460c      	mov	r4, r1
 8005602:	6849      	ldr	r1, [r1, #4]
 8005604:	e7cc      	b.n	80055a0 <_malloc_r+0x2c>
 8005606:	1cc4      	adds	r4, r0, #3
 8005608:	f024 0403 	bic.w	r4, r4, #3
 800560c:	42a0      	cmp	r0, r4
 800560e:	d005      	beq.n	800561c <_malloc_r+0xa8>
 8005610:	1a21      	subs	r1, r4, r0
 8005612:	4630      	mov	r0, r6
 8005614:	f000 f808 	bl	8005628 <_sbrk_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d0cf      	beq.n	80055bc <_malloc_r+0x48>
 800561c:	6025      	str	r5, [r4, #0]
 800561e:	e7db      	b.n	80055d8 <_malloc_r+0x64>
 8005620:	20013758 	.word	0x20013758
 8005624:	2001375c 	.word	0x2001375c

08005628 <_sbrk_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4c06      	ldr	r4, [pc, #24]	; (8005644 <_sbrk_r+0x1c>)
 800562c:	2300      	movs	r3, #0
 800562e:	4605      	mov	r5, r0
 8005630:	4608      	mov	r0, r1
 8005632:	6023      	str	r3, [r4, #0]
 8005634:	f7fd f932 	bl	800289c <_sbrk>
 8005638:	1c43      	adds	r3, r0, #1
 800563a:	d102      	bne.n	8005642 <_sbrk_r+0x1a>
 800563c:	6823      	ldr	r3, [r4, #0]
 800563e:	b103      	cbz	r3, 8005642 <_sbrk_r+0x1a>
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	bd38      	pop	{r3, r4, r5, pc}
 8005644:	200138a4 	.word	0x200138a4

08005648 <__malloc_lock>:
 8005648:	4770      	bx	lr

0800564a <__malloc_unlock>:
 800564a:	4770      	bx	lr

0800564c <_init>:
 800564c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800564e:	bf00      	nop
 8005650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005652:	bc08      	pop	{r3}
 8005654:	469e      	mov	lr, r3
 8005656:	4770      	bx	lr

08005658 <_fini>:
 8005658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565a:	bf00      	nop
 800565c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800565e:	bc08      	pop	{r3}
 8005660:	469e      	mov	lr, r3
 8005662:	4770      	bx	lr
